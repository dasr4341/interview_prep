/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 */
const documents = {
  '\n  query GetDealerQuotations(\n    $page: Float\n    $limit: Float\n    $carId: String\n    $dealerId: String\n  ) {\n    getDealerQuotations(\n      page: $page\n      limit: $limit\n      carId: $carId\n      dealerId: $dealerId\n    ) {\n      message\n      success\n      data {\n        key\n        quotations {\n          id\n          adminDetail {\n            firstName\n            lastName\n            email\n          }\n          status\n          carId\n          quotationDetails {\n            noOfLeads\n            validityDays\n            amount\n            currency\n            expiryDate\n            startDate\n          }\n          car {\n            id\n            launchYear\n            totalRun\n            noOfOwners\n            model\n            companyName\n            variant\n            registrationNumber\n            fuelType\n            transmission\n            status\n            createdAt\n            updatedAt\n            userId\n            quotation {\n              id\n              status\n              createdAt\n            }\n            user {\n              id\n              firstName\n              lastName\n              companyName\n              location\n              status\n              email\n              phoneNumber\n              documents {\n                id\n                userId\n                fileName\n                path\n              }\n            }\n            products {\n              id\n              fileType\n              productType\n              amount\n              discountedAmount\n              currency\n              thumbnail\n              documents {\n                id\n                fileName\n                path\n                documentType\n              }\n              createdAt\n              updatedAt\n            }\n            gallery {\n              id\n              fileType\n              thumbnail\n              createdAt\n              updatedAt\n            }\n          }\n        }\n      }\n      pagination {\n        maxPage\n        currentPage\n        total\n        limit\n      }\n    }\n  }\n':
    types.GetDealerQuotationsDocument,
  '\n  mutation AssignLeadsToDealer($leads: [String!]!) {\n    assignLeadsToDealer(leads: $leads) {\n      message\n      success\n      data {\n        id\n        carId\n        userId\n        contact {\n          id\n          contactMessage {\n            message\n            createdAt\n            updatedAt\n          }\n          alternatePhone\n          alternateEmail\n          carId\n        }\n        leadType\n        status\n        user {\n          id\n          firstName\n          lastName\n          profileImage\n          companyName\n          location\n          status\n          email\n          phoneNumber\n          documents {\n            id\n            userId\n            fileName\n            path\n          }\n        }\n        car {\n          id\n          launchYear\n          totalRun\n          noOfOwners\n          model\n          companyName\n          variant\n          registrationNumber\n          fuelType\n          transmission\n          status\n          createdAt\n          updatedAt\n          userId\n          quotation {\n            id\n            status\n            createdAt\n            quotationDetails {\n              noOfLeads\n              validityDays\n              amount\n              currency\n              expiryDate\n              startDate\n            }\n          }\n          products {\n            id\n            fileType\n            productType\n            amount\n            discountedAmount\n            currency\n            thumbnail\n            documents {\n              id\n              fileName\n              path\n              documentType\n            }\n            createdAt\n            updatedAt\n          }\n          carGallery {\n            id\n            fileType\n            thumbnail\n            CarGalleryDocuments {\n              id\n              fileName\n              path\n              documentType\n            }\n            createdAt\n            updatedAt\n          }\n        }\n        callCount\n        activeQuotation\n        assigned\n      }\n    }\n  }\n':
    types.AssignLeadsToDealerDocument,
  '\n  query GetCarAnalyticsReport(\n    $carId: String!\n    $lead: Range\n    $views: Range\n    $product: Range\n  ) {\n    getCarAnalyticsReport(\n      carId: $carId\n      lead: $lead\n      views: $views\n      product: $product\n    ) {\n      message\n      success\n      data {\n        quotationDetails {\n          totalActiveQuotationCount\n          totalPendingQuotationCount\n          totalCancelledQuotationCount\n          totalExpiredQuotationCount\n        }\n        totalLeadCount\n        totalViewCount\n        productDetails {\n          totalRevenue\n          totalProductsSoldCount\n          sales {\n            fileType\n            count\n          }\n        }\n        totalLeadsInRange {\n          id\n          createdAt\n          updatedAt\n        }\n        totalViewsInRange {\n          id\n          createdAt\n          updatedAt\n        }\n        totalProductSoldInRange {\n          id\n          createdAt\n          updatedAt\n        }\n      }\n    }\n  }\n':
    types.GetCarAnalyticsReportDocument,
  '\n  query CheckCarApproveStatus($carId: String!) {\n    checkCarApproveStatus(carId: $carId) {\n      message\n      success\n      data {\n        requiredData {\n          isCarProductExist\n          isCarImageExist\n          isCarVideoExist\n          isQuotationExist\n          isQuotationPaid\n          isThumbnailExist\n        }\n        approveStatus\n      }\n    }\n  }\n':
    types.CheckCarApproveStatusDocument,
  '\n  mutation UploadCarProducts(\n    $files: [Upload!]!\n    $documentType: DocumentTypeDocumentType!\n    $amount: Float!\n    $carId: String!\n    $fileType: String!\n    $uploadCarProductsId: String\n    $discountedAmount: Float\n  ) {\n    uploadCarProducts(\n      files: $files\n      documentType: $documentType\n      amount: $amount\n      carId: $carId\n      fileType: $fileType\n      id: $uploadCarProductsId\n      discountedAmount: $discountedAmount\n    ) {\n      message\n      success\n    }\n  }\n':
    types.UploadCarProductsDocument,
  '\n  mutation DeleteProduct($productIds: [String!]!) {\n    deleteProduct(productIds: $productIds) {\n      message\n      success\n    }\n  }\n':
    types.DeleteProductDocument,
  '\n  mutation DeleteBundle($bundleId: String!) {\n    deleteBundle(bundleId: $bundleId) {\n      message\n      success\n    }\n  }\n':
    types.DeleteBundleDocument,
  '\n  query GetStatsCountsDashboard {\n    getStatsCountsDashboard {\n      message\n      success\n      data {\n        leads {\n          totalLeads\n          totalHotAssignedLeads\n          totalColdAssignedLeads\n          totalHotUnassignedLeads\n          totalColdUnassignedLeads\n          inPast7DaysLeads\n        }\n        cars {\n          totalCars\n          totalPendingCars\n          totalSoldCars\n          totalDisabledCars\n          totalApprovedCars\n          inPast7DaysSoldCars\n          inPast7DaysApprovedCars\n        }\n        totalDealers\n        totalCustomers\n        totalVisitors\n        inPast7DaysVisitors\n      }\n    }\n  }\n':
    types.GetStatsCountsDashboardDocument,
  '\n  query GetReportByDateRangeDashboard(\n    $type: DashboardReportType!\n    $startDate: DateTime!\n    $endDate: DateTime!\n  ) {\n    getReportByDateRangeDashboard(\n      type: $type\n      startDate: $startDate\n      endDate: $endDate\n    ) {\n      message\n      success\n      data {\n        key\n        count\n      }\n    }\n  }\n':
    types.GetReportByDateRangeDashboardDocument,
  '\n  query ViewDealer($dealerId: String!) {\n    viewDealer(dealerId: $dealerId) {\n      message\n      success\n      data {\n        id\n        firstName\n        lastName\n        companyName\n        location\n        status\n        email\n        phoneNumber\n        documents {\n          fileType\n          docs {\n            id\n            fileName\n            path\n            amount\n            currency\n            thumbnail\n            createdAt\n            updatedAt\n          }\n        }\n      }\n    }\n  }\n':
    types.ViewDealerDocument,
  '\n  query ViewDealerDocuments($dealerId: String!) {\n    viewDealer(dealerId: $dealerId) {\n      message\n      success\n      data {\n        id\n        status\n        documents {\n          fileType\n          docs {\n            id\n            fileName\n            path\n            createdAt\n            updatedAt\n          }\n        }\n      }\n    }\n  }\n':
    types.ViewDealerDocumentsDocument,
  '\n  query GetDealerAnalytics($input: DealerAnalyticsDto) {\n    getDealerAnalytics(input: $input) {\n      message\n      success\n      data {\n        cars {\n          totalCarsPosted\n          totalCarsApproved\n          totalCarsPending\n        }\n        leads {\n          assignedLeads {\n            year\n            data {\n              month\n              data {\n                id\n                leadId\n                seen\n                note\n              }\n            }\n          }\n          totalUnAssignedLeadsCount\n          totalAssignedLeadsCount\n          totalLeadsInRange {\n            id\n            createdAt\n            updatedAt\n          }\n        }\n        quotations {\n          activeQuotations\n          pendingQuotations\n          totalActiveQuotationsInRange {\n            id\n            createdAt\n            updatedAt\n          }\n          totalPendingQuotationsInRange {\n            id\n            createdAt\n            updatedAt\n          }\n        }\n      }\n    }\n  }\n':
    types.GetDealerAnalyticsDocument,
  '\n  query ViewAllDealers(\n    $dealerFilter: [UserFilterInput!]\n    $limit: Float\n    $page: Float\n  ) {\n    viewAllDealers(dealerFilter: $dealerFilter, limit: $limit, page: $page) {\n      message\n      success\n      data {\n        id\n        firstName\n        lastName\n        companyName\n        location\n        status\n        email\n        phoneNumber\n        totalCars\n        totalActiveQuotation\n        totalPendingQuotation\n        documents {\n          fileType\n          docs {\n            id\n            fileName\n            path\n            amount\n            currency\n            thumbnail\n            createdAt\n            updatedAt\n          }\n        }\n      }\n      pagination {\n        maxPage\n        currentPage\n        total\n        limit\n      }\n    }\n  }\n':
    types.ViewAllDealersDocument,
  '\n  mutation DeleteGalleryOrDealerDocument(\n    $documentId: String!\n    $docType: DeleteDocType!\n  ) {\n    deleteGalleryOrDealerDocument(documentId: $documentId, docType: $docType) {\n      message\n      success\n    }\n  }\n':
    types.DeleteGalleryOrDealerDocumentDocument,
  '\n  mutation AdminForgetPassword($email: String!) {\n    adminForgetPassword(email: $email) {\n      message\n      success\n    }\n  }\n':
    types.AdminForgetPasswordDocument,
  '\n  mutation AdminForgetPasswordEmailVerification($token: String!) {\n    adminForgetPasswordEmailVerification(token: $token) {\n      message\n      success\n      token\n    }\n  }\n':
    types.AdminForgetPasswordEmailVerificationDocument,
  '\n  mutation AdminSetForgetPassword($token: String!, $newPassword: String!) {\n    adminSetForgetPassword(token: $token, newPassword: $newPassword) {\n      message\n      success\n    }\n  }\n':
    types.AdminSetForgetPasswordDocument,
  '\n  query GetAdminDetailsQuery {\n    getAdminDetails {\n      id\n      firstName\n      lastName\n      email\n    }\n  }\n':
    types.GetAdminDetailsQueryDocument,
  '\n  query GetAdminLeads(\n    $leadId: String\n    $page: Float\n    $limit: Float\n    $filter: [LeadFilterInput!]\n  ) {\n    getAdminLeads(\n      leadId: $leadId\n      page: $page\n      limit: $limit\n      filter: $filter\n    ) {\n      message\n      success\n      data {\n        id\n        carId\n        userId\n        contact {\n          id\n          contactMessage {\n            message\n            createdAt\n            updatedAt\n          }\n          alternatePhone\n          alternateEmail\n          carId\n        }\n        leadType\n        status\n        user {\n          id\n          firstName\n          lastName\n          profileImage\n          companyName\n          location\n          status\n          email\n          phoneNumber\n          documents {\n            id\n            userId\n            fileName\n            path\n          }\n        }\n        car {\n          id\n          launchYear\n          totalRun\n          noOfOwners\n          model\n          companyName\n          variant\n          registrationNumber\n          fuelType\n          transmission\n          status\n          createdAt\n          updatedAt\n          userId\n          quotation {\n            id\n            status\n            createdAt\n            quotationDetails {\n              noOfLeads\n              validityDays\n              amount\n              currency\n              expiryDate\n              startDate\n            }\n          }\n          products {\n            id\n            fileType\n            productType\n            amount\n            discountedAmount\n            currency\n            thumbnail\n            documents {\n              id\n              fileName\n              path\n              documentType\n            }\n            createdAt\n            updatedAt\n          }\n          carGallery {\n            id\n            fileType\n            thumbnail\n            CarGalleryDocuments {\n              id\n              fileName\n              path\n              documentType\n            }\n            createdAt\n            updatedAt\n          }\n          user {\n            firstName\n            lastName\n            id\n          }\n        }\n        callCount\n        activeQuotation\n        assigned\n      }\n      pagination {\n        maxPage\n        currentPage\n        total\n        limit\n      }\n    }\n  }\n':
    types.GetAdminLeadsDocument,
  '\n  query GetCarsAdmin(\n    $page: Float\n    $limit: Float\n    $searchString: String\n    $filter: [CarsFilterInput!]\n    $suggestedColumn: String\n  ) {\n    getCarsAdmin(\n      page: $page\n      limit: $limit\n      searchString: $searchString\n      filter: $filter\n      suggestedColumn: $suggestedColumn\n    ) {\n      message\n      success\n      data {\n        id\n        launchYear\n        totalRun\n        noOfOwners\n        model\n        companyName\n        variant\n        registrationNumber\n        fuelType\n        transmission\n        status\n        createdAt\n        updatedAt\n        userId\n        quotation {\n          id\n          status\n          createdAt\n          quotationDetails {\n            noOfLeads\n            validityDays\n            amount\n            currency\n            expiryDate\n            startDate\n          }\n        }\n        user {\n          id\n          firstName\n          lastName\n          companyName\n          location\n          status\n          email\n          phoneNumber\n          documents {\n            id\n            userId\n            fileName\n            path\n          }\n        }\n        products {\n          id\n          fileType\n          productType\n          amount\n          discountedAmount\n          currency\n          thumbnail\n          documents {\n            id\n            fileName\n            path\n            documentType\n          }\n          createdAt\n          updatedAt\n        }\n        gallery {\n          id\n          fileType\n          thumbnail\n          createdAt\n          updatedAt\n        }\n      }\n      pagination {\n        maxPage\n        currentPage\n        total\n        limit\n      }\n    }\n  }\n':
    types.GetCarsAdminDocument,
  '\n  query GetAllCustomers {\n    getAllCustomers {\n      message\n      success\n      data {\n        id\n        firstName\n        lastName\n        status\n        email\n        phoneNumber\n      }\n    }\n  }\n':
    types.GetAllCustomersDocument,
  '\n  query GetPaymentHistoryList {\n    getPaymentHistoryList {\n      message\n      success\n      data {\n        id\n        quotationId\n        quotation {\n          car {\n            registrationNumber\n          }\n        }\n        razorpayOrderId\n        productsPurchased {\n          id\n          fileType\n          productType\n          amount\n          discountedAmount\n          currency\n          thumbnail\n          documents {\n            id\n            fileName\n            path\n            documentType\n          }\n          createdAt\n          updatedAt\n        }\n        bundleDetails {\n          id\n          fileType\n          productType\n          amount\n          discountedAmount\n          currency\n          thumbnail\n          createdAt\n          updatedAt\n        }\n        carId\n        userName\n        userId\n        razorpayPaymentId\n        amount\n        invoiceStatus\n        amountPaid\n        amountDue\n        receipt\n        createdAt\n        updatedAt\n        userRole\n        carDetail\n      }\n      pagination {\n        maxPage\n        currentPage\n        total\n        limit\n      }\n    }\n  }\n':
    types.GetPaymentHistoryListDocument,
  '\n  query GetCarBundle($bundleId: String!, $carId: String!) {\n    getCarBundle(bundleId: $bundleId, carId: $carId) {\n      message\n      success\n      data {\n        id\n        fileType\n        thumbnail\n        amount\n        bundledItems {\n          CarProduct {\n            id\n            fileType\n            amount\n            productType\n            thumbnail\n            createdAt\n            updatedAt\n            CarProductDocuments {\n              documentType\n              fileName\n              path\n            }\n          }\n        }\n      }\n    }\n  }\n':
    types.GetCarBundleDocument,
  '\n  query GetCarBundles($carId: String!) {\n    getCarBundles(carId: $carId) {\n      message\n      success\n      data {\n        id\n        fileType\n        thumbnail\n        amount\n        bundledItems {\n          CarProduct {\n            id\n            fileType\n            amount\n            productType\n            thumbnail\n            createdAt\n            updatedAt\n            CarProductDocuments {\n              documentType\n              fileName\n              path\n            }\n          }\n        }\n      }\n    }\n  }\n':
    types.GetCarBundlesDocument,
  '\n  query GetCarDetailAdmin($carId: String!) {\n    getCarDetailAdmin(carId: $carId) {\n      message\n      success\n      data {\n        id\n        launchYear\n        totalRun\n        noOfOwners\n        model\n        companyName\n        variant\n        registrationNumber\n        fuelType\n        transmission\n        status\n        createdAt\n        updatedAt\n        userId\n        quotation {\n          id\n          status\n          createdAt\n          quotationDetails {\n            noOfLeads\n            validityDays\n            amount\n            currency\n            expiryDate\n            startDate\n          }\n        }\n        user {\n          id\n          firstName\n          lastName\n          companyName\n          location\n          status\n          email\n          phoneNumber\n          documents {\n            id\n            userId\n            fileName\n            path\n          }\n        }\n        products {\n          id\n          fileType\n          productType\n          amount\n          discountedAmount\n          currency\n          thumbnail\n          documents {\n            id\n            fileName\n            path\n            documentType\n          }\n          createdAt\n          updatedAt\n        }\n        gallery {\n          id\n          fileType\n          thumbnail\n          documents {\n            id\n            fileName\n            path\n            documentType\n          }\n          createdAt\n          updatedAt\n        }\n      }\n    }\n  }\n':
    types.GetCarDetailAdminDocument,
  '\n  query GetCarListViewedByUser($userId: String!, $page: Float, $limit: Float) {\n    getCarListViewedByUser(userId: $userId, page: $page, limit: $limit) {\n      message\n      success\n      data {\n        id\n        launchYear\n        totalRun\n        noOfOwners\n        model\n        companyName\n        variant\n        registrationNumber\n        fuelType\n        transmission\n        status\n        createdAt\n        updatedAt\n        userId\n        quotation {\n          id\n          status\n          createdAt\n          quotationDetails {\n            noOfLeads\n            validityDays\n            amount\n            currency\n            expiryDate\n            startDate\n          }\n        }\n        user {\n          id\n          firstName\n          lastName\n          companyName\n          location\n          status\n          email\n          phoneNumber\n          documents {\n            id\n            userId\n            fileName\n            path\n          }\n        }\n        products {\n          id\n          fileType\n          productType\n          amount\n          discountedAmount\n          currency\n          thumbnail\n          documents {\n            id\n            fileName\n            path\n            documentType\n          }\n          createdAt\n          updatedAt\n        }\n        gallery {\n          id\n          fileType\n          thumbnail\n          createdAt\n          updatedAt\n        }\n      }\n      pagination {\n        maxPage\n        currentPage\n        total\n        limit\n      }\n    }\n  }\n':
    types.GetCarListViewedByUserDocument,
  '\n  query GetCarViewers($carId: String!, $page: Float, $limit: Float) {\n    getCarViewers(carId: $carId, page: $page, limit: $limit) {\n      message\n      success\n      data {\n        ipAddress\n        viewsCount\n        latestViewedAt\n        userAgent\n        userId\n        user {\n          firstName\n          lastName\n        }\n      }\n      pagination {\n        maxPage\n        currentPage\n        total\n        limit\n      }\n    }\n  }\n':
    types.GetCarViewersDocument,
  '\n  query GetCustomersDetails($userId: String!) {\n    getCustomersDetails(userId: $userId) {\n      message\n      success\n      data {\n        id\n        firstName\n        lastName\n        status\n        email\n        phoneNumber\n      }\n    }\n  }\n':
    types.GetCustomersDetailsDocument,
  '\n  mutation GetNewTokensQuery($refreshToken: String!) {\n    getNewTokens(refreshToken: $refreshToken) {\n      accessToken\n      refreshToken\n    }\n  }\n':
    types.GetNewTokensQueryDocument,
  '\n  query GetLeadPaymentHistoryList(\n    $page: Float\n    $userId: String\n    $limit: Float\n    $filter: [UserInvoiceFilterInput!]\n  ) {\n    getPaymentHistoryList(\n      page: $page\n      userId: $userId\n      limit: $limit\n      filter: $filter\n    ) {\n      message\n      success\n      data {\n        id\n        quotationId\n        quotation {\n          car {\n            registrationNumber\n          }\n        }\n        razorpayOrderId\n        productsPurchased {\n          id\n          fileType\n          productType\n          amount\n          discountedAmount\n          currency\n          thumbnail\n          documents {\n            id\n            fileName\n            path\n            documentType\n          }\n          createdAt\n          updatedAt\n        }\n        bundleDetails {\n          id\n          fileType\n          productType\n          amount\n          discountedAmount\n          currency\n          thumbnail\n          createdAt\n          updatedAt\n        }\n        carId\n        userId\n        razorpayPaymentId\n        amount\n        invoiceStatus\n        amountPaid\n        amountDue\n        receipt\n        createdAt\n        updatedAt\n      }\n      pagination {\n        maxPage\n        currentPage\n        total\n        limit\n      }\n    }\n  }\n':
    types.GetLeadPaymentHistoryListDocument,
  '\n  mutation adminLogin($email: String!, $password: String!) {\n    adminLogin(email: $email, password: $password) {\n      message\n      success\n      signInToken {\n        accessToken\n        refreshToken\n      }\n    }\n  }\n':
    types.AdminLoginDocument,
  '\n  mutation MakeBundle(\n    $carId: String!\n    $productIds: [String!]!\n    $name: String!\n    $amount: Int!\n    $discountedAmount: Int\n  ) {\n    makeBundle(\n      carId: $carId\n      productIds: $productIds\n      name: $name\n      amount: $amount\n      discountedAmount: $discountedAmount\n    ) {\n      message\n      success\n    }\n  }\n':
    types.MakeBundleDocument,
  '\n  mutation RaiseQuotationQuery(\n    $carId: String!\n    $noOfLeads: Float!\n    $validityDays: Float!\n    $amount: Float!\n  ) {\n    raiseQuotation(\n      carId: $carId\n      noOfLeads: $noOfLeads\n      validityDays: $validityDays\n      amount: $amount\n    ) {\n      message\n      success\n    }\n  }\n':
    types.RaiseQuotationQueryDocument,
  '\n  mutation UpdateCarStatus($cartData: UpdateCarStatus!) {\n    updateCarStatus(cartData: $cartData) {\n      message\n      success\n    }\n  }\n':
    types.UpdateCarStatusDocument,
  '\n  mutation UpdateDealerStatus(\n    $updateDealerStatusId: String!\n    $status: Application!\n  ) {\n    updateDealerStatus(id: $updateDealerStatusId, status: $status) {\n      message\n      success\n    }\n  }\n':
    types.UpdateDealerStatusDocument,
  '\n  mutation UploadCarGalleryDocuments(\n    $files: [Upload!]!\n    $documentType: DocumentTypeDocumentType!\n    $carId: String!\n    $fileType: String!\n    $isThumbnail: Boolean!\n    $uploadCarGalleryDocumentsId: String\n  ) {\n    uploadCarGalleryDocuments(\n      files: $files\n      documentType: $documentType\n      carId: $carId\n      fileType: $fileType\n      isThumbnail: $isThumbnail\n      id: $uploadCarGalleryDocumentsId\n    ) {\n      message\n      success\n    }\n  }\n':
    types.UploadCarGalleryDocumentsDocument,
  '\n  mutation UploadUserDocument(\n    $files: [Upload!]!\n    $fileType: String!\n    $uploadCategory: FileType!\n    $dealerId: String!\n  ) {\n    uploadUserDocument(\n      files: $files\n      fileType: $fileType\n      uploadCategory: $uploadCategory\n      dealerId: $dealerId\n    ) {\n      message\n      success\n    }\n  }\n':
    types.UploadUserDocumentDocument,
};

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = graphql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function graphql(source: string): unknown;

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: '\n  query GetDealerQuotations(\n    $page: Float\n    $limit: Float\n    $carId: String\n    $dealerId: String\n  ) {\n    getDealerQuotations(\n      page: $page\n      limit: $limit\n      carId: $carId\n      dealerId: $dealerId\n    ) {\n      message\n      success\n      data {\n        key\n        quotations {\n          id\n          adminDetail {\n            firstName\n            lastName\n            email\n          }\n          status\n          carId\n          quotationDetails {\n            noOfLeads\n            validityDays\n            amount\n            currency\n            expiryDate\n            startDate\n          }\n          car {\n            id\n            launchYear\n            totalRun\n            noOfOwners\n            model\n            companyName\n            variant\n            registrationNumber\n            fuelType\n            transmission\n            status\n            createdAt\n            updatedAt\n            userId\n            quotation {\n              id\n              status\n              createdAt\n            }\n            user {\n              id\n              firstName\n              lastName\n              companyName\n              location\n              status\n              email\n              phoneNumber\n              documents {\n                id\n                userId\n                fileName\n                path\n              }\n            }\n            products {\n              id\n              fileType\n              productType\n              amount\n              discountedAmount\n              currency\n              thumbnail\n              documents {\n                id\n                fileName\n                path\n                documentType\n              }\n              createdAt\n              updatedAt\n            }\n            gallery {\n              id\n              fileType\n              thumbnail\n              createdAt\n              updatedAt\n            }\n          }\n        }\n      }\n      pagination {\n        maxPage\n        currentPage\n        total\n        limit\n      }\n    }\n  }\n'
): (typeof documents)['\n  query GetDealerQuotations(\n    $page: Float\n    $limit: Float\n    $carId: String\n    $dealerId: String\n  ) {\n    getDealerQuotations(\n      page: $page\n      limit: $limit\n      carId: $carId\n      dealerId: $dealerId\n    ) {\n      message\n      success\n      data {\n        key\n        quotations {\n          id\n          adminDetail {\n            firstName\n            lastName\n            email\n          }\n          status\n          carId\n          quotationDetails {\n            noOfLeads\n            validityDays\n            amount\n            currency\n            expiryDate\n            startDate\n          }\n          car {\n            id\n            launchYear\n            totalRun\n            noOfOwners\n            model\n            companyName\n            variant\n            registrationNumber\n            fuelType\n            transmission\n            status\n            createdAt\n            updatedAt\n            userId\n            quotation {\n              id\n              status\n              createdAt\n            }\n            user {\n              id\n              firstName\n              lastName\n              companyName\n              location\n              status\n              email\n              phoneNumber\n              documents {\n                id\n                userId\n                fileName\n                path\n              }\n            }\n            products {\n              id\n              fileType\n              productType\n              amount\n              discountedAmount\n              currency\n              thumbnail\n              documents {\n                id\n                fileName\n                path\n                documentType\n              }\n              createdAt\n              updatedAt\n            }\n            gallery {\n              id\n              fileType\n              thumbnail\n              createdAt\n              updatedAt\n            }\n          }\n        }\n      }\n      pagination {\n        maxPage\n        currentPage\n        total\n        limit\n      }\n    }\n  }\n'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: '\n  mutation AssignLeadsToDealer($leads: [String!]!) {\n    assignLeadsToDealer(leads: $leads) {\n      message\n      success\n      data {\n        id\n        carId\n        userId\n        contact {\n          id\n          contactMessage {\n            message\n            createdAt\n            updatedAt\n          }\n          alternatePhone\n          alternateEmail\n          carId\n        }\n        leadType\n        status\n        user {\n          id\n          firstName\n          lastName\n          profileImage\n          companyName\n          location\n          status\n          email\n          phoneNumber\n          documents {\n            id\n            userId\n            fileName\n            path\n          }\n        }\n        car {\n          id\n          launchYear\n          totalRun\n          noOfOwners\n          model\n          companyName\n          variant\n          registrationNumber\n          fuelType\n          transmission\n          status\n          createdAt\n          updatedAt\n          userId\n          quotation {\n            id\n            status\n            createdAt\n            quotationDetails {\n              noOfLeads\n              validityDays\n              amount\n              currency\n              expiryDate\n              startDate\n            }\n          }\n          products {\n            id\n            fileType\n            productType\n            amount\n            discountedAmount\n            currency\n            thumbnail\n            documents {\n              id\n              fileName\n              path\n              documentType\n            }\n            createdAt\n            updatedAt\n          }\n          carGallery {\n            id\n            fileType\n            thumbnail\n            CarGalleryDocuments {\n              id\n              fileName\n              path\n              documentType\n            }\n            createdAt\n            updatedAt\n          }\n        }\n        callCount\n        activeQuotation\n        assigned\n      }\n    }\n  }\n'
): (typeof documents)['\n  mutation AssignLeadsToDealer($leads: [String!]!) {\n    assignLeadsToDealer(leads: $leads) {\n      message\n      success\n      data {\n        id\n        carId\n        userId\n        contact {\n          id\n          contactMessage {\n            message\n            createdAt\n            updatedAt\n          }\n          alternatePhone\n          alternateEmail\n          carId\n        }\n        leadType\n        status\n        user {\n          id\n          firstName\n          lastName\n          profileImage\n          companyName\n          location\n          status\n          email\n          phoneNumber\n          documents {\n            id\n            userId\n            fileName\n            path\n          }\n        }\n        car {\n          id\n          launchYear\n          totalRun\n          noOfOwners\n          model\n          companyName\n          variant\n          registrationNumber\n          fuelType\n          transmission\n          status\n          createdAt\n          updatedAt\n          userId\n          quotation {\n            id\n            status\n            createdAt\n            quotationDetails {\n              noOfLeads\n              validityDays\n              amount\n              currency\n              expiryDate\n              startDate\n            }\n          }\n          products {\n            id\n            fileType\n            productType\n            amount\n            discountedAmount\n            currency\n            thumbnail\n            documents {\n              id\n              fileName\n              path\n              documentType\n            }\n            createdAt\n            updatedAt\n          }\n          carGallery {\n            id\n            fileType\n            thumbnail\n            CarGalleryDocuments {\n              id\n              fileName\n              path\n              documentType\n            }\n            createdAt\n            updatedAt\n          }\n        }\n        callCount\n        activeQuotation\n        assigned\n      }\n    }\n  }\n'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: '\n  query GetCarAnalyticsReport(\n    $carId: String!\n    $lead: Range\n    $views: Range\n    $product: Range\n  ) {\n    getCarAnalyticsReport(\n      carId: $carId\n      lead: $lead\n      views: $views\n      product: $product\n    ) {\n      message\n      success\n      data {\n        quotationDetails {\n          totalActiveQuotationCount\n          totalPendingQuotationCount\n          totalCancelledQuotationCount\n          totalExpiredQuotationCount\n        }\n        totalLeadCount\n        totalViewCount\n        productDetails {\n          totalRevenue\n          totalProductsSoldCount\n          sales {\n            fileType\n            count\n          }\n        }\n        totalLeadsInRange {\n          id\n          createdAt\n          updatedAt\n        }\n        totalViewsInRange {\n          id\n          createdAt\n          updatedAt\n        }\n        totalProductSoldInRange {\n          id\n          createdAt\n          updatedAt\n        }\n      }\n    }\n  }\n'
): (typeof documents)['\n  query GetCarAnalyticsReport(\n    $carId: String!\n    $lead: Range\n    $views: Range\n    $product: Range\n  ) {\n    getCarAnalyticsReport(\n      carId: $carId\n      lead: $lead\n      views: $views\n      product: $product\n    ) {\n      message\n      success\n      data {\n        quotationDetails {\n          totalActiveQuotationCount\n          totalPendingQuotationCount\n          totalCancelledQuotationCount\n          totalExpiredQuotationCount\n        }\n        totalLeadCount\n        totalViewCount\n        productDetails {\n          totalRevenue\n          totalProductsSoldCount\n          sales {\n            fileType\n            count\n          }\n        }\n        totalLeadsInRange {\n          id\n          createdAt\n          updatedAt\n        }\n        totalViewsInRange {\n          id\n          createdAt\n          updatedAt\n        }\n        totalProductSoldInRange {\n          id\n          createdAt\n          updatedAt\n        }\n      }\n    }\n  }\n'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: '\n  query CheckCarApproveStatus($carId: String!) {\n    checkCarApproveStatus(carId: $carId) {\n      message\n      success\n      data {\n        requiredData {\n          isCarProductExist\n          isCarImageExist\n          isCarVideoExist\n          isQuotationExist\n          isQuotationPaid\n          isThumbnailExist\n        }\n        approveStatus\n      }\n    }\n  }\n'
): (typeof documents)['\n  query CheckCarApproveStatus($carId: String!) {\n    checkCarApproveStatus(carId: $carId) {\n      message\n      success\n      data {\n        requiredData {\n          isCarProductExist\n          isCarImageExist\n          isCarVideoExist\n          isQuotationExist\n          isQuotationPaid\n          isThumbnailExist\n        }\n        approveStatus\n      }\n    }\n  }\n'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: '\n  mutation UploadCarProducts(\n    $files: [Upload!]!\n    $documentType: DocumentTypeDocumentType!\n    $amount: Float!\n    $carId: String!\n    $fileType: String!\n    $uploadCarProductsId: String\n    $discountedAmount: Float\n  ) {\n    uploadCarProducts(\n      files: $files\n      documentType: $documentType\n      amount: $amount\n      carId: $carId\n      fileType: $fileType\n      id: $uploadCarProductsId\n      discountedAmount: $discountedAmount\n    ) {\n      message\n      success\n    }\n  }\n'
): (typeof documents)['\n  mutation UploadCarProducts(\n    $files: [Upload!]!\n    $documentType: DocumentTypeDocumentType!\n    $amount: Float!\n    $carId: String!\n    $fileType: String!\n    $uploadCarProductsId: String\n    $discountedAmount: Float\n  ) {\n    uploadCarProducts(\n      files: $files\n      documentType: $documentType\n      amount: $amount\n      carId: $carId\n      fileType: $fileType\n      id: $uploadCarProductsId\n      discountedAmount: $discountedAmount\n    ) {\n      message\n      success\n    }\n  }\n'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: '\n  mutation DeleteProduct($productIds: [String!]!) {\n    deleteProduct(productIds: $productIds) {\n      message\n      success\n    }\n  }\n'
): (typeof documents)['\n  mutation DeleteProduct($productIds: [String!]!) {\n    deleteProduct(productIds: $productIds) {\n      message\n      success\n    }\n  }\n'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: '\n  mutation DeleteBundle($bundleId: String!) {\n    deleteBundle(bundleId: $bundleId) {\n      message\n      success\n    }\n  }\n'
): (typeof documents)['\n  mutation DeleteBundle($bundleId: String!) {\n    deleteBundle(bundleId: $bundleId) {\n      message\n      success\n    }\n  }\n'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: '\n  query GetStatsCountsDashboard {\n    getStatsCountsDashboard {\n      message\n      success\n      data {\n        leads {\n          totalLeads\n          totalHotAssignedLeads\n          totalColdAssignedLeads\n          totalHotUnassignedLeads\n          totalColdUnassignedLeads\n          inPast7DaysLeads\n        }\n        cars {\n          totalCars\n          totalPendingCars\n          totalSoldCars\n          totalDisabledCars\n          totalApprovedCars\n          inPast7DaysSoldCars\n          inPast7DaysApprovedCars\n        }\n        totalDealers\n        totalCustomers\n        totalVisitors\n        inPast7DaysVisitors\n      }\n    }\n  }\n'
): (typeof documents)['\n  query GetStatsCountsDashboard {\n    getStatsCountsDashboard {\n      message\n      success\n      data {\n        leads {\n          totalLeads\n          totalHotAssignedLeads\n          totalColdAssignedLeads\n          totalHotUnassignedLeads\n          totalColdUnassignedLeads\n          inPast7DaysLeads\n        }\n        cars {\n          totalCars\n          totalPendingCars\n          totalSoldCars\n          totalDisabledCars\n          totalApprovedCars\n          inPast7DaysSoldCars\n          inPast7DaysApprovedCars\n        }\n        totalDealers\n        totalCustomers\n        totalVisitors\n        inPast7DaysVisitors\n      }\n    }\n  }\n'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: '\n  query GetReportByDateRangeDashboard(\n    $type: DashboardReportType!\n    $startDate: DateTime!\n    $endDate: DateTime!\n  ) {\n    getReportByDateRangeDashboard(\n      type: $type\n      startDate: $startDate\n      endDate: $endDate\n    ) {\n      message\n      success\n      data {\n        key\n        count\n      }\n    }\n  }\n'
): (typeof documents)['\n  query GetReportByDateRangeDashboard(\n    $type: DashboardReportType!\n    $startDate: DateTime!\n    $endDate: DateTime!\n  ) {\n    getReportByDateRangeDashboard(\n      type: $type\n      startDate: $startDate\n      endDate: $endDate\n    ) {\n      message\n      success\n      data {\n        key\n        count\n      }\n    }\n  }\n'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: '\n  query ViewDealer($dealerId: String!) {\n    viewDealer(dealerId: $dealerId) {\n      message\n      success\n      data {\n        id\n        firstName\n        lastName\n        companyName\n        location\n        status\n        email\n        phoneNumber\n        documents {\n          fileType\n          docs {\n            id\n            fileName\n            path\n            amount\n            currency\n            thumbnail\n            createdAt\n            updatedAt\n          }\n        }\n      }\n    }\n  }\n'
): (typeof documents)['\n  query ViewDealer($dealerId: String!) {\n    viewDealer(dealerId: $dealerId) {\n      message\n      success\n      data {\n        id\n        firstName\n        lastName\n        companyName\n        location\n        status\n        email\n        phoneNumber\n        documents {\n          fileType\n          docs {\n            id\n            fileName\n            path\n            amount\n            currency\n            thumbnail\n            createdAt\n            updatedAt\n          }\n        }\n      }\n    }\n  }\n'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: '\n  query ViewDealerDocuments($dealerId: String!) {\n    viewDealer(dealerId: $dealerId) {\n      message\n      success\n      data {\n        id\n        status\n        documents {\n          fileType\n          docs {\n            id\n            fileName\n            path\n            createdAt\n            updatedAt\n          }\n        }\n      }\n    }\n  }\n'
): (typeof documents)['\n  query ViewDealerDocuments($dealerId: String!) {\n    viewDealer(dealerId: $dealerId) {\n      message\n      success\n      data {\n        id\n        status\n        documents {\n          fileType\n          docs {\n            id\n            fileName\n            path\n            createdAt\n            updatedAt\n          }\n        }\n      }\n    }\n  }\n'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: '\n  query GetDealerAnalytics($input: DealerAnalyticsDto) {\n    getDealerAnalytics(input: $input) {\n      message\n      success\n      data {\n        cars {\n          totalCarsPosted\n          totalCarsApproved\n          totalCarsPending\n        }\n        leads {\n          assignedLeads {\n            year\n            data {\n              month\n              data {\n                id\n                leadId\n                seen\n                note\n              }\n            }\n          }\n          totalUnAssignedLeadsCount\n          totalAssignedLeadsCount\n          totalLeadsInRange {\n            id\n            createdAt\n            updatedAt\n          }\n        }\n        quotations {\n          activeQuotations\n          pendingQuotations\n          totalActiveQuotationsInRange {\n            id\n            createdAt\n            updatedAt\n          }\n          totalPendingQuotationsInRange {\n            id\n            createdAt\n            updatedAt\n          }\n        }\n      }\n    }\n  }\n'
): (typeof documents)['\n  query GetDealerAnalytics($input: DealerAnalyticsDto) {\n    getDealerAnalytics(input: $input) {\n      message\n      success\n      data {\n        cars {\n          totalCarsPosted\n          totalCarsApproved\n          totalCarsPending\n        }\n        leads {\n          assignedLeads {\n            year\n            data {\n              month\n              data {\n                id\n                leadId\n                seen\n                note\n              }\n            }\n          }\n          totalUnAssignedLeadsCount\n          totalAssignedLeadsCount\n          totalLeadsInRange {\n            id\n            createdAt\n            updatedAt\n          }\n        }\n        quotations {\n          activeQuotations\n          pendingQuotations\n          totalActiveQuotationsInRange {\n            id\n            createdAt\n            updatedAt\n          }\n          totalPendingQuotationsInRange {\n            id\n            createdAt\n            updatedAt\n          }\n        }\n      }\n    }\n  }\n'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: '\n  query ViewAllDealers(\n    $dealerFilter: [UserFilterInput!]\n    $limit: Float\n    $page: Float\n  ) {\n    viewAllDealers(dealerFilter: $dealerFilter, limit: $limit, page: $page) {\n      message\n      success\n      data {\n        id\n        firstName\n        lastName\n        companyName\n        location\n        status\n        email\n        phoneNumber\n        totalCars\n        totalActiveQuotation\n        totalPendingQuotation\n        documents {\n          fileType\n          docs {\n            id\n            fileName\n            path\n            amount\n            currency\n            thumbnail\n            createdAt\n            updatedAt\n          }\n        }\n      }\n      pagination {\n        maxPage\n        currentPage\n        total\n        limit\n      }\n    }\n  }\n'
): (typeof documents)['\n  query ViewAllDealers(\n    $dealerFilter: [UserFilterInput!]\n    $limit: Float\n    $page: Float\n  ) {\n    viewAllDealers(dealerFilter: $dealerFilter, limit: $limit, page: $page) {\n      message\n      success\n      data {\n        id\n        firstName\n        lastName\n        companyName\n        location\n        status\n        email\n        phoneNumber\n        totalCars\n        totalActiveQuotation\n        totalPendingQuotation\n        documents {\n          fileType\n          docs {\n            id\n            fileName\n            path\n            amount\n            currency\n            thumbnail\n            createdAt\n            updatedAt\n          }\n        }\n      }\n      pagination {\n        maxPage\n        currentPage\n        total\n        limit\n      }\n    }\n  }\n'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: '\n  mutation DeleteGalleryOrDealerDocument(\n    $documentId: String!\n    $docType: DeleteDocType!\n  ) {\n    deleteGalleryOrDealerDocument(documentId: $documentId, docType: $docType) {\n      message\n      success\n    }\n  }\n'
): (typeof documents)['\n  mutation DeleteGalleryOrDealerDocument(\n    $documentId: String!\n    $docType: DeleteDocType!\n  ) {\n    deleteGalleryOrDealerDocument(documentId: $documentId, docType: $docType) {\n      message\n      success\n    }\n  }\n'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: '\n  mutation AdminForgetPassword($email: String!) {\n    adminForgetPassword(email: $email) {\n      message\n      success\n    }\n  }\n'
): (typeof documents)['\n  mutation AdminForgetPassword($email: String!) {\n    adminForgetPassword(email: $email) {\n      message\n      success\n    }\n  }\n'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: '\n  mutation AdminForgetPasswordEmailVerification($token: String!) {\n    adminForgetPasswordEmailVerification(token: $token) {\n      message\n      success\n      token\n    }\n  }\n'
): (typeof documents)['\n  mutation AdminForgetPasswordEmailVerification($token: String!) {\n    adminForgetPasswordEmailVerification(token: $token) {\n      message\n      success\n      token\n    }\n  }\n'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: '\n  mutation AdminSetForgetPassword($token: String!, $newPassword: String!) {\n    adminSetForgetPassword(token: $token, newPassword: $newPassword) {\n      message\n      success\n    }\n  }\n'
): (typeof documents)['\n  mutation AdminSetForgetPassword($token: String!, $newPassword: String!) {\n    adminSetForgetPassword(token: $token, newPassword: $newPassword) {\n      message\n      success\n    }\n  }\n'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: '\n  query GetAdminDetailsQuery {\n    getAdminDetails {\n      id\n      firstName\n      lastName\n      email\n    }\n  }\n'
): (typeof documents)['\n  query GetAdminDetailsQuery {\n    getAdminDetails {\n      id\n      firstName\n      lastName\n      email\n    }\n  }\n'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: '\n  query GetAdminLeads(\n    $leadId: String\n    $page: Float\n    $limit: Float\n    $filter: [LeadFilterInput!]\n  ) {\n    getAdminLeads(\n      leadId: $leadId\n      page: $page\n      limit: $limit\n      filter: $filter\n    ) {\n      message\n      success\n      data {\n        id\n        carId\n        userId\n        contact {\n          id\n          contactMessage {\n            message\n            createdAt\n            updatedAt\n          }\n          alternatePhone\n          alternateEmail\n          carId\n        }\n        leadType\n        status\n        user {\n          id\n          firstName\n          lastName\n          profileImage\n          companyName\n          location\n          status\n          email\n          phoneNumber\n          documents {\n            id\n            userId\n            fileName\n            path\n          }\n        }\n        car {\n          id\n          launchYear\n          totalRun\n          noOfOwners\n          model\n          companyName\n          variant\n          registrationNumber\n          fuelType\n          transmission\n          status\n          createdAt\n          updatedAt\n          userId\n          quotation {\n            id\n            status\n            createdAt\n            quotationDetails {\n              noOfLeads\n              validityDays\n              amount\n              currency\n              expiryDate\n              startDate\n            }\n          }\n          products {\n            id\n            fileType\n            productType\n            amount\n            discountedAmount\n            currency\n            thumbnail\n            documents {\n              id\n              fileName\n              path\n              documentType\n            }\n            createdAt\n            updatedAt\n          }\n          carGallery {\n            id\n            fileType\n            thumbnail\n            CarGalleryDocuments {\n              id\n              fileName\n              path\n              documentType\n            }\n            createdAt\n            updatedAt\n          }\n          user {\n            firstName\n            lastName\n            id\n          }\n        }\n        callCount\n        activeQuotation\n        assigned\n      }\n      pagination {\n        maxPage\n        currentPage\n        total\n        limit\n      }\n    }\n  }\n'
): (typeof documents)['\n  query GetAdminLeads(\n    $leadId: String\n    $page: Float\n    $limit: Float\n    $filter: [LeadFilterInput!]\n  ) {\n    getAdminLeads(\n      leadId: $leadId\n      page: $page\n      limit: $limit\n      filter: $filter\n    ) {\n      message\n      success\n      data {\n        id\n        carId\n        userId\n        contact {\n          id\n          contactMessage {\n            message\n            createdAt\n            updatedAt\n          }\n          alternatePhone\n          alternateEmail\n          carId\n        }\n        leadType\n        status\n        user {\n          id\n          firstName\n          lastName\n          profileImage\n          companyName\n          location\n          status\n          email\n          phoneNumber\n          documents {\n            id\n            userId\n            fileName\n            path\n          }\n        }\n        car {\n          id\n          launchYear\n          totalRun\n          noOfOwners\n          model\n          companyName\n          variant\n          registrationNumber\n          fuelType\n          transmission\n          status\n          createdAt\n          updatedAt\n          userId\n          quotation {\n            id\n            status\n            createdAt\n            quotationDetails {\n              noOfLeads\n              validityDays\n              amount\n              currency\n              expiryDate\n              startDate\n            }\n          }\n          products {\n            id\n            fileType\n            productType\n            amount\n            discountedAmount\n            currency\n            thumbnail\n            documents {\n              id\n              fileName\n              path\n              documentType\n            }\n            createdAt\n            updatedAt\n          }\n          carGallery {\n            id\n            fileType\n            thumbnail\n            CarGalleryDocuments {\n              id\n              fileName\n              path\n              documentType\n            }\n            createdAt\n            updatedAt\n          }\n          user {\n            firstName\n            lastName\n            id\n          }\n        }\n        callCount\n        activeQuotation\n        assigned\n      }\n      pagination {\n        maxPage\n        currentPage\n        total\n        limit\n      }\n    }\n  }\n'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: '\n  query GetCarsAdmin(\n    $page: Float\n    $limit: Float\n    $searchString: String\n    $filter: [CarsFilterInput!]\n    $suggestedColumn: String\n  ) {\n    getCarsAdmin(\n      page: $page\n      limit: $limit\n      searchString: $searchString\n      filter: $filter\n      suggestedColumn: $suggestedColumn\n    ) {\n      message\n      success\n      data {\n        id\n        launchYear\n        totalRun\n        noOfOwners\n        model\n        companyName\n        variant\n        registrationNumber\n        fuelType\n        transmission\n        status\n        createdAt\n        updatedAt\n        userId\n        quotation {\n          id\n          status\n          createdAt\n          quotationDetails {\n            noOfLeads\n            validityDays\n            amount\n            currency\n            expiryDate\n            startDate\n          }\n        }\n        user {\n          id\n          firstName\n          lastName\n          companyName\n          location\n          status\n          email\n          phoneNumber\n          documents {\n            id\n            userId\n            fileName\n            path\n          }\n        }\n        products {\n          id\n          fileType\n          productType\n          amount\n          discountedAmount\n          currency\n          thumbnail\n          documents {\n            id\n            fileName\n            path\n            documentType\n          }\n          createdAt\n          updatedAt\n        }\n        gallery {\n          id\n          fileType\n          thumbnail\n          createdAt\n          updatedAt\n        }\n      }\n      pagination {\n        maxPage\n        currentPage\n        total\n        limit\n      }\n    }\n  }\n'
): (typeof documents)['\n  query GetCarsAdmin(\n    $page: Float\n    $limit: Float\n    $searchString: String\n    $filter: [CarsFilterInput!]\n    $suggestedColumn: String\n  ) {\n    getCarsAdmin(\n      page: $page\n      limit: $limit\n      searchString: $searchString\n      filter: $filter\n      suggestedColumn: $suggestedColumn\n    ) {\n      message\n      success\n      data {\n        id\n        launchYear\n        totalRun\n        noOfOwners\n        model\n        companyName\n        variant\n        registrationNumber\n        fuelType\n        transmission\n        status\n        createdAt\n        updatedAt\n        userId\n        quotation {\n          id\n          status\n          createdAt\n          quotationDetails {\n            noOfLeads\n            validityDays\n            amount\n            currency\n            expiryDate\n            startDate\n          }\n        }\n        user {\n          id\n          firstName\n          lastName\n          companyName\n          location\n          status\n          email\n          phoneNumber\n          documents {\n            id\n            userId\n            fileName\n            path\n          }\n        }\n        products {\n          id\n          fileType\n          productType\n          amount\n          discountedAmount\n          currency\n          thumbnail\n          documents {\n            id\n            fileName\n            path\n            documentType\n          }\n          createdAt\n          updatedAt\n        }\n        gallery {\n          id\n          fileType\n          thumbnail\n          createdAt\n          updatedAt\n        }\n      }\n      pagination {\n        maxPage\n        currentPage\n        total\n        limit\n      }\n    }\n  }\n'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: '\n  query GetAllCustomers {\n    getAllCustomers {\n      message\n      success\n      data {\n        id\n        firstName\n        lastName\n        status\n        email\n        phoneNumber\n      }\n    }\n  }\n'
): (typeof documents)['\n  query GetAllCustomers {\n    getAllCustomers {\n      message\n      success\n      data {\n        id\n        firstName\n        lastName\n        status\n        email\n        phoneNumber\n      }\n    }\n  }\n'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: '\n  query GetPaymentHistoryList {\n    getPaymentHistoryList {\n      message\n      success\n      data {\n        id\n        quotationId\n        quotation {\n          car {\n            registrationNumber\n          }\n        }\n        razorpayOrderId\n        productsPurchased {\n          id\n          fileType\n          productType\n          amount\n          discountedAmount\n          currency\n          thumbnail\n          documents {\n            id\n            fileName\n            path\n            documentType\n          }\n          createdAt\n          updatedAt\n        }\n        bundleDetails {\n          id\n          fileType\n          productType\n          amount\n          discountedAmount\n          currency\n          thumbnail\n          createdAt\n          updatedAt\n        }\n        carId\n        userName\n        userId\n        razorpayPaymentId\n        amount\n        invoiceStatus\n        amountPaid\n        amountDue\n        receipt\n        createdAt\n        updatedAt\n        userRole\n        carDetail\n      }\n      pagination {\n        maxPage\n        currentPage\n        total\n        limit\n      }\n    }\n  }\n'
): (typeof documents)['\n  query GetPaymentHistoryList {\n    getPaymentHistoryList {\n      message\n      success\n      data {\n        id\n        quotationId\n        quotation {\n          car {\n            registrationNumber\n          }\n        }\n        razorpayOrderId\n        productsPurchased {\n          id\n          fileType\n          productType\n          amount\n          discountedAmount\n          currency\n          thumbnail\n          documents {\n            id\n            fileName\n            path\n            documentType\n          }\n          createdAt\n          updatedAt\n        }\n        bundleDetails {\n          id\n          fileType\n          productType\n          amount\n          discountedAmount\n          currency\n          thumbnail\n          createdAt\n          updatedAt\n        }\n        carId\n        userName\n        userId\n        razorpayPaymentId\n        amount\n        invoiceStatus\n        amountPaid\n        amountDue\n        receipt\n        createdAt\n        updatedAt\n        userRole\n        carDetail\n      }\n      pagination {\n        maxPage\n        currentPage\n        total\n        limit\n      }\n    }\n  }\n'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: '\n  query GetCarBundle($bundleId: String!, $carId: String!) {\n    getCarBundle(bundleId: $bundleId, carId: $carId) {\n      message\n      success\n      data {\n        id\n        fileType\n        thumbnail\n        amount\n        bundledItems {\n          CarProduct {\n            id\n            fileType\n            amount\n            productType\n            thumbnail\n            createdAt\n            updatedAt\n            CarProductDocuments {\n              documentType\n              fileName\n              path\n            }\n          }\n        }\n      }\n    }\n  }\n'
): (typeof documents)['\n  query GetCarBundle($bundleId: String!, $carId: String!) {\n    getCarBundle(bundleId: $bundleId, carId: $carId) {\n      message\n      success\n      data {\n        id\n        fileType\n        thumbnail\n        amount\n        bundledItems {\n          CarProduct {\n            id\n            fileType\n            amount\n            productType\n            thumbnail\n            createdAt\n            updatedAt\n            CarProductDocuments {\n              documentType\n              fileName\n              path\n            }\n          }\n        }\n      }\n    }\n  }\n'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: '\n  query GetCarBundles($carId: String!) {\n    getCarBundles(carId: $carId) {\n      message\n      success\n      data {\n        id\n        fileType\n        thumbnail\n        amount\n        bundledItems {\n          CarProduct {\n            id\n            fileType\n            amount\n            productType\n            thumbnail\n            createdAt\n            updatedAt\n            CarProductDocuments {\n              documentType\n              fileName\n              path\n            }\n          }\n        }\n      }\n    }\n  }\n'
): (typeof documents)['\n  query GetCarBundles($carId: String!) {\n    getCarBundles(carId: $carId) {\n      message\n      success\n      data {\n        id\n        fileType\n        thumbnail\n        amount\n        bundledItems {\n          CarProduct {\n            id\n            fileType\n            amount\n            productType\n            thumbnail\n            createdAt\n            updatedAt\n            CarProductDocuments {\n              documentType\n              fileName\n              path\n            }\n          }\n        }\n      }\n    }\n  }\n'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: '\n  query GetCarDetailAdmin($carId: String!) {\n    getCarDetailAdmin(carId: $carId) {\n      message\n      success\n      data {\n        id\n        launchYear\n        totalRun\n        noOfOwners\n        model\n        companyName\n        variant\n        registrationNumber\n        fuelType\n        transmission\n        status\n        createdAt\n        updatedAt\n        userId\n        quotation {\n          id\n          status\n          createdAt\n          quotationDetails {\n            noOfLeads\n            validityDays\n            amount\n            currency\n            expiryDate\n            startDate\n          }\n        }\n        user {\n          id\n          firstName\n          lastName\n          companyName\n          location\n          status\n          email\n          phoneNumber\n          documents {\n            id\n            userId\n            fileName\n            path\n          }\n        }\n        products {\n          id\n          fileType\n          productType\n          amount\n          discountedAmount\n          currency\n          thumbnail\n          documents {\n            id\n            fileName\n            path\n            documentType\n          }\n          createdAt\n          updatedAt\n        }\n        gallery {\n          id\n          fileType\n          thumbnail\n          documents {\n            id\n            fileName\n            path\n            documentType\n          }\n          createdAt\n          updatedAt\n        }\n      }\n    }\n  }\n'
): (typeof documents)['\n  query GetCarDetailAdmin($carId: String!) {\n    getCarDetailAdmin(carId: $carId) {\n      message\n      success\n      data {\n        id\n        launchYear\n        totalRun\n        noOfOwners\n        model\n        companyName\n        variant\n        registrationNumber\n        fuelType\n        transmission\n        status\n        createdAt\n        updatedAt\n        userId\n        quotation {\n          id\n          status\n          createdAt\n          quotationDetails {\n            noOfLeads\n            validityDays\n            amount\n            currency\n            expiryDate\n            startDate\n          }\n        }\n        user {\n          id\n          firstName\n          lastName\n          companyName\n          location\n          status\n          email\n          phoneNumber\n          documents {\n            id\n            userId\n            fileName\n            path\n          }\n        }\n        products {\n          id\n          fileType\n          productType\n          amount\n          discountedAmount\n          currency\n          thumbnail\n          documents {\n            id\n            fileName\n            path\n            documentType\n          }\n          createdAt\n          updatedAt\n        }\n        gallery {\n          id\n          fileType\n          thumbnail\n          documents {\n            id\n            fileName\n            path\n            documentType\n          }\n          createdAt\n          updatedAt\n        }\n      }\n    }\n  }\n'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: '\n  query GetCarListViewedByUser($userId: String!, $page: Float, $limit: Float) {\n    getCarListViewedByUser(userId: $userId, page: $page, limit: $limit) {\n      message\n      success\n      data {\n        id\n        launchYear\n        totalRun\n        noOfOwners\n        model\n        companyName\n        variant\n        registrationNumber\n        fuelType\n        transmission\n        status\n        createdAt\n        updatedAt\n        userId\n        quotation {\n          id\n          status\n          createdAt\n          quotationDetails {\n            noOfLeads\n            validityDays\n            amount\n            currency\n            expiryDate\n            startDate\n          }\n        }\n        user {\n          id\n          firstName\n          lastName\n          companyName\n          location\n          status\n          email\n          phoneNumber\n          documents {\n            id\n            userId\n            fileName\n            path\n          }\n        }\n        products {\n          id\n          fileType\n          productType\n          amount\n          discountedAmount\n          currency\n          thumbnail\n          documents {\n            id\n            fileName\n            path\n            documentType\n          }\n          createdAt\n          updatedAt\n        }\n        gallery {\n          id\n          fileType\n          thumbnail\n          createdAt\n          updatedAt\n        }\n      }\n      pagination {\n        maxPage\n        currentPage\n        total\n        limit\n      }\n    }\n  }\n'
): (typeof documents)['\n  query GetCarListViewedByUser($userId: String!, $page: Float, $limit: Float) {\n    getCarListViewedByUser(userId: $userId, page: $page, limit: $limit) {\n      message\n      success\n      data {\n        id\n        launchYear\n        totalRun\n        noOfOwners\n        model\n        companyName\n        variant\n        registrationNumber\n        fuelType\n        transmission\n        status\n        createdAt\n        updatedAt\n        userId\n        quotation {\n          id\n          status\n          createdAt\n          quotationDetails {\n            noOfLeads\n            validityDays\n            amount\n            currency\n            expiryDate\n            startDate\n          }\n        }\n        user {\n          id\n          firstName\n          lastName\n          companyName\n          location\n          status\n          email\n          phoneNumber\n          documents {\n            id\n            userId\n            fileName\n            path\n          }\n        }\n        products {\n          id\n          fileType\n          productType\n          amount\n          discountedAmount\n          currency\n          thumbnail\n          documents {\n            id\n            fileName\n            path\n            documentType\n          }\n          createdAt\n          updatedAt\n        }\n        gallery {\n          id\n          fileType\n          thumbnail\n          createdAt\n          updatedAt\n        }\n      }\n      pagination {\n        maxPage\n        currentPage\n        total\n        limit\n      }\n    }\n  }\n'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: '\n  query GetCarViewers($carId: String!, $page: Float, $limit: Float) {\n    getCarViewers(carId: $carId, page: $page, limit: $limit) {\n      message\n      success\n      data {\n        ipAddress\n        viewsCount\n        latestViewedAt\n        userAgent\n        userId\n        user {\n          firstName\n          lastName\n        }\n      }\n      pagination {\n        maxPage\n        currentPage\n        total\n        limit\n      }\n    }\n  }\n'
): (typeof documents)['\n  query GetCarViewers($carId: String!, $page: Float, $limit: Float) {\n    getCarViewers(carId: $carId, page: $page, limit: $limit) {\n      message\n      success\n      data {\n        ipAddress\n        viewsCount\n        latestViewedAt\n        userAgent\n        userId\n        user {\n          firstName\n          lastName\n        }\n      }\n      pagination {\n        maxPage\n        currentPage\n        total\n        limit\n      }\n    }\n  }\n'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: '\n  query GetCustomersDetails($userId: String!) {\n    getCustomersDetails(userId: $userId) {\n      message\n      success\n      data {\n        id\n        firstName\n        lastName\n        status\n        email\n        phoneNumber\n      }\n    }\n  }\n'
): (typeof documents)['\n  query GetCustomersDetails($userId: String!) {\n    getCustomersDetails(userId: $userId) {\n      message\n      success\n      data {\n        id\n        firstName\n        lastName\n        status\n        email\n        phoneNumber\n      }\n    }\n  }\n'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: '\n  mutation GetNewTokensQuery($refreshToken: String!) {\n    getNewTokens(refreshToken: $refreshToken) {\n      accessToken\n      refreshToken\n    }\n  }\n'
): (typeof documents)['\n  mutation GetNewTokensQuery($refreshToken: String!) {\n    getNewTokens(refreshToken: $refreshToken) {\n      accessToken\n      refreshToken\n    }\n  }\n'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: '\n  query GetLeadPaymentHistoryList(\n    $page: Float\n    $userId: String\n    $limit: Float\n    $filter: [UserInvoiceFilterInput!]\n  ) {\n    getPaymentHistoryList(\n      page: $page\n      userId: $userId\n      limit: $limit\n      filter: $filter\n    ) {\n      message\n      success\n      data {\n        id\n        quotationId\n        quotation {\n          car {\n            registrationNumber\n          }\n        }\n        razorpayOrderId\n        productsPurchased {\n          id\n          fileType\n          productType\n          amount\n          discountedAmount\n          currency\n          thumbnail\n          documents {\n            id\n            fileName\n            path\n            documentType\n          }\n          createdAt\n          updatedAt\n        }\n        bundleDetails {\n          id\n          fileType\n          productType\n          amount\n          discountedAmount\n          currency\n          thumbnail\n          createdAt\n          updatedAt\n        }\n        carId\n        userId\n        razorpayPaymentId\n        amount\n        invoiceStatus\n        amountPaid\n        amountDue\n        receipt\n        createdAt\n        updatedAt\n      }\n      pagination {\n        maxPage\n        currentPage\n        total\n        limit\n      }\n    }\n  }\n'
): (typeof documents)['\n  query GetLeadPaymentHistoryList(\n    $page: Float\n    $userId: String\n    $limit: Float\n    $filter: [UserInvoiceFilterInput!]\n  ) {\n    getPaymentHistoryList(\n      page: $page\n      userId: $userId\n      limit: $limit\n      filter: $filter\n    ) {\n      message\n      success\n      data {\n        id\n        quotationId\n        quotation {\n          car {\n            registrationNumber\n          }\n        }\n        razorpayOrderId\n        productsPurchased {\n          id\n          fileType\n          productType\n          amount\n          discountedAmount\n          currency\n          thumbnail\n          documents {\n            id\n            fileName\n            path\n            documentType\n          }\n          createdAt\n          updatedAt\n        }\n        bundleDetails {\n          id\n          fileType\n          productType\n          amount\n          discountedAmount\n          currency\n          thumbnail\n          createdAt\n          updatedAt\n        }\n        carId\n        userId\n        razorpayPaymentId\n        amount\n        invoiceStatus\n        amountPaid\n        amountDue\n        receipt\n        createdAt\n        updatedAt\n      }\n      pagination {\n        maxPage\n        currentPage\n        total\n        limit\n      }\n    }\n  }\n'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: '\n  mutation adminLogin($email: String!, $password: String!) {\n    adminLogin(email: $email, password: $password) {\n      message\n      success\n      signInToken {\n        accessToken\n        refreshToken\n      }\n    }\n  }\n'
): (typeof documents)['\n  mutation adminLogin($email: String!, $password: String!) {\n    adminLogin(email: $email, password: $password) {\n      message\n      success\n      signInToken {\n        accessToken\n        refreshToken\n      }\n    }\n  }\n'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: '\n  mutation MakeBundle(\n    $carId: String!\n    $productIds: [String!]!\n    $name: String!\n    $amount: Int!\n    $discountedAmount: Int\n  ) {\n    makeBundle(\n      carId: $carId\n      productIds: $productIds\n      name: $name\n      amount: $amount\n      discountedAmount: $discountedAmount\n    ) {\n      message\n      success\n    }\n  }\n'
): (typeof documents)['\n  mutation MakeBundle(\n    $carId: String!\n    $productIds: [String!]!\n    $name: String!\n    $amount: Int!\n    $discountedAmount: Int\n  ) {\n    makeBundle(\n      carId: $carId\n      productIds: $productIds\n      name: $name\n      amount: $amount\n      discountedAmount: $discountedAmount\n    ) {\n      message\n      success\n    }\n  }\n'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: '\n  mutation RaiseQuotationQuery(\n    $carId: String!\n    $noOfLeads: Float!\n    $validityDays: Float!\n    $amount: Float!\n  ) {\n    raiseQuotation(\n      carId: $carId\n      noOfLeads: $noOfLeads\n      validityDays: $validityDays\n      amount: $amount\n    ) {\n      message\n      success\n    }\n  }\n'
): (typeof documents)['\n  mutation RaiseQuotationQuery(\n    $carId: String!\n    $noOfLeads: Float!\n    $validityDays: Float!\n    $amount: Float!\n  ) {\n    raiseQuotation(\n      carId: $carId\n      noOfLeads: $noOfLeads\n      validityDays: $validityDays\n      amount: $amount\n    ) {\n      message\n      success\n    }\n  }\n'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: '\n  mutation UpdateCarStatus($cartData: UpdateCarStatus!) {\n    updateCarStatus(cartData: $cartData) {\n      message\n      success\n    }\n  }\n'
): (typeof documents)['\n  mutation UpdateCarStatus($cartData: UpdateCarStatus!) {\n    updateCarStatus(cartData: $cartData) {\n      message\n      success\n    }\n  }\n'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: '\n  mutation UpdateDealerStatus(\n    $updateDealerStatusId: String!\n    $status: Application!\n  ) {\n    updateDealerStatus(id: $updateDealerStatusId, status: $status) {\n      message\n      success\n    }\n  }\n'
): (typeof documents)['\n  mutation UpdateDealerStatus(\n    $updateDealerStatusId: String!\n    $status: Application!\n  ) {\n    updateDealerStatus(id: $updateDealerStatusId, status: $status) {\n      message\n      success\n    }\n  }\n'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: '\n  mutation UploadCarGalleryDocuments(\n    $files: [Upload!]!\n    $documentType: DocumentTypeDocumentType!\n    $carId: String!\n    $fileType: String!\n    $isThumbnail: Boolean!\n    $uploadCarGalleryDocumentsId: String\n  ) {\n    uploadCarGalleryDocuments(\n      files: $files\n      documentType: $documentType\n      carId: $carId\n      fileType: $fileType\n      isThumbnail: $isThumbnail\n      id: $uploadCarGalleryDocumentsId\n    ) {\n      message\n      success\n    }\n  }\n'
): (typeof documents)['\n  mutation UploadCarGalleryDocuments(\n    $files: [Upload!]!\n    $documentType: DocumentTypeDocumentType!\n    $carId: String!\n    $fileType: String!\n    $isThumbnail: Boolean!\n    $uploadCarGalleryDocumentsId: String\n  ) {\n    uploadCarGalleryDocuments(\n      files: $files\n      documentType: $documentType\n      carId: $carId\n      fileType: $fileType\n      isThumbnail: $isThumbnail\n      id: $uploadCarGalleryDocumentsId\n    ) {\n      message\n      success\n    }\n  }\n'];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(
  source: '\n  mutation UploadUserDocument(\n    $files: [Upload!]!\n    $fileType: String!\n    $uploadCategory: FileType!\n    $dealerId: String!\n  ) {\n    uploadUserDocument(\n      files: $files\n      fileType: $fileType\n      uploadCategory: $uploadCategory\n      dealerId: $dealerId\n    ) {\n      message\n      success\n    }\n  }\n'
): (typeof documents)['\n  mutation UploadUserDocument(\n    $files: [Upload!]!\n    $fileType: String!\n    $uploadCategory: FileType!\n    $dealerId: String!\n  ) {\n    uploadUserDocument(\n      files: $files\n      fileType: $fileType\n      uploadCategory: $uploadCategory\n      dealerId: $dealerId\n    ) {\n      message\n      success\n    }\n  }\n'];

export function graphql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> =
  TDocumentNode extends DocumentNode<infer TType, any> ? TType : never;
