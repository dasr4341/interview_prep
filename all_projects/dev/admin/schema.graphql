type Query {
  account(where: AccountWhereUniqueInput!): Account
  findFirstAccount(
    where: AccountWhereInput
    orderBy: [AccountOrderByWithRelationInput!]
    cursor: AccountWhereUniqueInput
    take: Int
    skip: Int
    distinct: [AccountScalarFieldEnum!]
  ): Account
  accounts(
    where: AccountWhereInput
    orderBy: [AccountOrderByWithRelationInput!]
    cursor: AccountWhereUniqueInput
    take: Int
    skip: Int
    distinct: [AccountScalarFieldEnum!]
  ): [Account!]!
  aggregateAccount(
    where: AccountWhereInput
    orderBy: [AccountOrderByWithRelationInput!]
    cursor: AccountWhereUniqueInput
    take: Int
    skip: Int
  ): AggregateAccount!
  groupByAccount(
    where: AccountWhereInput
    orderBy: [AccountOrderByWithAggregationInput!]
    by: [AccountScalarFieldEnum!]!
    having: AccountScalarWhereWithAggregatesInput
    take: Int
    skip: Int
  ): [AccountGroupBy!]!
  company(where: CompanyWhereUniqueInput!): Company
  findFirstCompany(
    where: CompanyWhereInput
    orderBy: [CompanyOrderByWithRelationInput!]
    cursor: CompanyWhereUniqueInput
    take: Int
    skip: Int
    distinct: [CompanyScalarFieldEnum!]
  ): Company
  companies(
    where: CompanyWhereInput
    orderBy: [CompanyOrderByWithRelationInput!]
    cursor: CompanyWhereUniqueInput
    take: Int
    skip: Int
    distinct: [CompanyScalarFieldEnum!]
  ): [Company!]!
  aggregateCompany(
    where: CompanyWhereInput
    orderBy: [CompanyOrderByWithRelationInput!]
    cursor: CompanyWhereUniqueInput
    take: Int
    skip: Int
  ): AggregateCompany!
  groupByCompany(
    where: CompanyWhereInput
    orderBy: [CompanyOrderByWithAggregationInput!]
    by: [CompanyScalarFieldEnum!]!
    having: CompanyScalarWhereWithAggregatesInput
    take: Int
    skip: Int
  ): [CompanyGroupBy!]!
  companyStarred(where: CompanyStarredWhereUniqueInput!): CompanyStarred
  findFirstCompanyStarred(
    where: CompanyStarredWhereInput
    orderBy: [CompanyStarredOrderByWithRelationInput!]
    cursor: CompanyStarredWhereUniqueInput
    take: Int
    skip: Int
    distinct: [CompanyStarredScalarFieldEnum!]
  ): CompanyStarred
  companyStarreds(
    where: CompanyStarredWhereInput
    orderBy: [CompanyStarredOrderByWithRelationInput!]
    cursor: CompanyStarredWhereUniqueInput
    take: Int
    skip: Int
    distinct: [CompanyStarredScalarFieldEnum!]
  ): [CompanyStarred!]!
  aggregateCompanyStarred(
    where: CompanyStarredWhereInput
    orderBy: [CompanyStarredOrderByWithRelationInput!]
    cursor: CompanyStarredWhereUniqueInput
    take: Int
    skip: Int
  ): AggregateCompanyStarred!
  groupByCompanyStarred(
    where: CompanyStarredWhereInput
    orderBy: [CompanyStarredOrderByWithAggregationInput!]
    by: [CompanyStarredScalarFieldEnum!]!
    having: CompanyStarredScalarWhereWithAggregatesInput
    take: Int
    skip: Int
  ): [CompanyStarredGroupBy!]!
  competitor(where: CompetitorWhereUniqueInput!): Competitor
  findFirstCompetitor(
    where: CompetitorWhereInput
    orderBy: [CompetitorOrderByWithRelationInput!]
    cursor: CompetitorWhereUniqueInput
    take: Int
    skip: Int
    distinct: [CompetitorScalarFieldEnum!]
  ): Competitor
  competitors(
    where: CompetitorWhereInput
    orderBy: [CompetitorOrderByWithRelationInput!]
    cursor: CompetitorWhereUniqueInput
    take: Int
    skip: Int
    distinct: [CompetitorScalarFieldEnum!]
  ): [Competitor!]!
  aggregateCompetitor(
    where: CompetitorWhereInput
    orderBy: [CompetitorOrderByWithRelationInput!]
    cursor: CompetitorWhereUniqueInput
    take: Int
    skip: Int
  ): AggregateCompetitor!
  groupByCompetitor(
    where: CompetitorWhereInput
    orderBy: [CompetitorOrderByWithAggregationInput!]
    by: [CompetitorScalarFieldEnum!]!
    having: CompetitorScalarWhereWithAggregatesInput
    take: Int
    skip: Int
  ): [CompetitorGroupBy!]!
  findUniqueContacts(where: ContactsWhereUniqueInput!): Contacts
  findFirstContacts(
    where: ContactsWhereInput
    orderBy: [ContactsOrderByWithRelationInput!]
    cursor: ContactsWhereUniqueInput
    take: Int
    skip: Int
    distinct: [ContactsScalarFieldEnum!]
  ): Contacts
  findManyContacts(
    where: ContactsWhereInput
    orderBy: [ContactsOrderByWithRelationInput!]
    cursor: ContactsWhereUniqueInput
    take: Int
    skip: Int
    distinct: [ContactsScalarFieldEnum!]
  ): [Contacts!]!
  aggregateContacts(
    where: ContactsWhereInput
    orderBy: [ContactsOrderByWithRelationInput!]
    cursor: ContactsWhereUniqueInput
    take: Int
    skip: Int
  ): AggregateContacts!
  groupByContacts(
    where: ContactsWhereInput
    orderBy: [ContactsOrderByWithAggregationInput!]
    by: [ContactsScalarFieldEnum!]!
    having: ContactsScalarWhereWithAggregatesInput
    take: Int
    skip: Int
  ): [ContactsGroupBy!]!
  customer(where: CustomerWhereUniqueInput!): Customer
  findFirstCustomer(
    where: CustomerWhereInput
    orderBy: [CustomerOrderByWithRelationInput!]
    cursor: CustomerWhereUniqueInput
    take: Int
    skip: Int
    distinct: [CustomerScalarFieldEnum!]
  ): Customer
  customers(
    where: CustomerWhereInput
    orderBy: [CustomerOrderByWithRelationInput!]
    cursor: CustomerWhereUniqueInput
    take: Int
    skip: Int
    distinct: [CustomerScalarFieldEnum!]
  ): [Customer!]!
  aggregateCustomer(
    where: CustomerWhereInput
    orderBy: [CustomerOrderByWithRelationInput!]
    cursor: CustomerWhereUniqueInput
    take: Int
    skip: Int
  ): AggregateCustomer!
  groupByCustomer(
    where: CustomerWhereInput
    orderBy: [CustomerOrderByWithAggregationInput!]
    by: [CustomerScalarFieldEnum!]!
    having: CustomerScalarWhereWithAggregatesInput
    take: Int
    skip: Int
  ): [CustomerGroupBy!]!
  findUniqueCustomerDataObjects(
    where: CustomerDataObjectsWhereUniqueInput!
  ): CustomerDataObjects
  findFirstCustomerDataObjects(
    where: CustomerDataObjectsWhereInput
    orderBy: [CustomerDataObjectsOrderByWithRelationInput!]
    cursor: CustomerDataObjectsWhereUniqueInput
    take: Int
    skip: Int
    distinct: [CustomerDataObjectsScalarFieldEnum!]
  ): CustomerDataObjects
  findManyCustomerDataObjects(
    where: CustomerDataObjectsWhereInput
    orderBy: [CustomerDataObjectsOrderByWithRelationInput!]
    cursor: CustomerDataObjectsWhereUniqueInput
    take: Int
    skip: Int
    distinct: [CustomerDataObjectsScalarFieldEnum!]
  ): [CustomerDataObjects!]!
  aggregateCustomerDataObjects(
    where: CustomerDataObjectsWhereInput
    orderBy: [CustomerDataObjectsOrderByWithRelationInput!]
    cursor: CustomerDataObjectsWhereUniqueInput
    take: Int
    skip: Int
  ): AggregateCustomerDataObjects!
  groupByCustomerDataObjects(
    where: CustomerDataObjectsWhereInput
    orderBy: [CustomerDataObjectsOrderByWithAggregationInput!]
    by: [CustomerDataObjectsScalarFieldEnum!]!
    having: CustomerDataObjectsScalarWhereWithAggregatesInput
    take: Int
    skip: Int
  ): [CustomerDataObjectsGroupBy!]!
  customerIntegration(
    where: CustomerIntegrationWhereUniqueInput!
  ): CustomerIntegration
  findFirstCustomerIntegration(
    where: CustomerIntegrationWhereInput
    orderBy: [CustomerIntegrationOrderByWithRelationInput!]
    cursor: CustomerIntegrationWhereUniqueInput
    take: Int
    skip: Int
    distinct: [CustomerIntegrationScalarFieldEnum!]
  ): CustomerIntegration
  customerIntegrations(
    where: CustomerIntegrationWhereInput
    orderBy: [CustomerIntegrationOrderByWithRelationInput!]
    cursor: CustomerIntegrationWhereUniqueInput
    take: Int
    skip: Int
    distinct: [CustomerIntegrationScalarFieldEnum!]
  ): [CustomerIntegration!]!
  aggregateCustomerIntegration(
    where: CustomerIntegrationWhereInput
    orderBy: [CustomerIntegrationOrderByWithRelationInput!]
    cursor: CustomerIntegrationWhereUniqueInput
    take: Int
    skip: Int
  ): AggregateCustomerIntegration!
  groupByCustomerIntegration(
    where: CustomerIntegrationWhereInput
    orderBy: [CustomerIntegrationOrderByWithAggregationInput!]
    by: [CustomerIntegrationScalarFieldEnum!]!
    having: CustomerIntegrationScalarWhereWithAggregatesInput
    take: Int
    skip: Int
  ): [CustomerIntegrationGroupBy!]!
  dataObjectCollectionOnDataObject(
    where: DataObjectCollectionOnDataObjectWhereUniqueInput!
  ): DataObjectCollectionOnDataObject
  findFirstDataObjectCollectionOnDataObject(
    where: DataObjectCollectionOnDataObjectWhereInput
    orderBy: [DataObjectCollectionOnDataObjectOrderByWithRelationInput!]
    cursor: DataObjectCollectionOnDataObjectWhereUniqueInput
    take: Int
    skip: Int
    distinct: [DataObjectCollectionOnDataObjectScalarFieldEnum!]
  ): DataObjectCollectionOnDataObject
  dataObjectCollectionOnDataObjects(
    where: DataObjectCollectionOnDataObjectWhereInput
    orderBy: [DataObjectCollectionOnDataObjectOrderByWithRelationInput!]
    cursor: DataObjectCollectionOnDataObjectWhereUniqueInput
    take: Int
    skip: Int
    distinct: [DataObjectCollectionOnDataObjectScalarFieldEnum!]
  ): [DataObjectCollectionOnDataObject!]!
  aggregateDataObjectCollectionOnDataObject(
    where: DataObjectCollectionOnDataObjectWhereInput
    orderBy: [DataObjectCollectionOnDataObjectOrderByWithRelationInput!]
    cursor: DataObjectCollectionOnDataObjectWhereUniqueInput
    take: Int
    skip: Int
  ): AggregateDataObjectCollectionOnDataObject!
  groupByDataObjectCollectionOnDataObject(
    where: DataObjectCollectionOnDataObjectWhereInput
    orderBy: [DataObjectCollectionOnDataObjectOrderByWithAggregationInput!]
    by: [DataObjectCollectionOnDataObjectScalarFieldEnum!]!
    having: DataObjectCollectionOnDataObjectScalarWhereWithAggregatesInput
    take: Int
    skip: Int
  ): [DataObjectCollectionOnDataObjectGroupBy!]!
  findUniqueDataObjectCollections(
    where: DataObjectCollectionsWhereUniqueInput!
  ): DataObjectCollections
  findFirstDataObjectCollections(
    where: DataObjectCollectionsWhereInput
    orderBy: [DataObjectCollectionsOrderByWithRelationInput!]
    cursor: DataObjectCollectionsWhereUniqueInput
    take: Int
    skip: Int
    distinct: [DataObjectCollectionsScalarFieldEnum!]
  ): DataObjectCollections
  findManyDataObjectCollections(
    where: DataObjectCollectionsWhereInput
    orderBy: [DataObjectCollectionsOrderByWithRelationInput!]
    cursor: DataObjectCollectionsWhereUniqueInput
    take: Int
    skip: Int
    distinct: [DataObjectCollectionsScalarFieldEnum!]
  ): [DataObjectCollections!]!
  aggregateDataObjectCollections(
    where: DataObjectCollectionsWhereInput
    orderBy: [DataObjectCollectionsOrderByWithRelationInput!]
    cursor: DataObjectCollectionsWhereUniqueInput
    take: Int
    skip: Int
  ): AggregateDataObjectCollections!
  groupByDataObjectCollections(
    where: DataObjectCollectionsWhereInput
    orderBy: [DataObjectCollectionsOrderByWithAggregationInput!]
    by: [DataObjectCollectionsScalarFieldEnum!]!
    having: DataObjectCollectionsScalarWhereWithAggregatesInput
    take: Int
    skip: Int
  ): [DataObjectCollectionsGroupBy!]!
  findUniqueDataSources(where: DataSourcesWhereUniqueInput!): DataSources
  findFirstDataSources(
    where: DataSourcesWhereInput
    orderBy: [DataSourcesOrderByWithRelationInput!]
    cursor: DataSourcesWhereUniqueInput
    take: Int
    skip: Int
    distinct: [DataSourcesScalarFieldEnum!]
  ): DataSources
  findManyDataSources(
    where: DataSourcesWhereInput
    orderBy: [DataSourcesOrderByWithRelationInput!]
    cursor: DataSourcesWhereUniqueInput
    take: Int
    skip: Int
    distinct: [DataSourcesScalarFieldEnum!]
  ): [DataSources!]!
  aggregateDataSources(
    where: DataSourcesWhereInput
    orderBy: [DataSourcesOrderByWithRelationInput!]
    cursor: DataSourcesWhereUniqueInput
    take: Int
    skip: Int
  ): AggregateDataSources!
  groupByDataSources(
    where: DataSourcesWhereInput
    orderBy: [DataSourcesOrderByWithAggregationInput!]
    by: [DataSourcesScalarFieldEnum!]!
    having: DataSourcesScalarWhereWithAggregatesInput
    take: Int
    skip: Int
  ): [DataSourcesGroupBy!]!
  dataSourcesOnCustomer(
    where: DataSourcesOnCustomerWhereUniqueInput!
  ): DataSourcesOnCustomer
  findFirstDataSourcesOnCustomer(
    where: DataSourcesOnCustomerWhereInput
    orderBy: [DataSourcesOnCustomerOrderByWithRelationInput!]
    cursor: DataSourcesOnCustomerWhereUniqueInput
    take: Int
    skip: Int
    distinct: [DataSourcesOnCustomerScalarFieldEnum!]
  ): DataSourcesOnCustomer
  dataSourcesOnCustomers(
    where: DataSourcesOnCustomerWhereInput
    orderBy: [DataSourcesOnCustomerOrderByWithRelationInput!]
    cursor: DataSourcesOnCustomerWhereUniqueInput
    take: Int
    skip: Int
    distinct: [DataSourcesOnCustomerScalarFieldEnum!]
  ): [DataSourcesOnCustomer!]!
  aggregateDataSourcesOnCustomer(
    where: DataSourcesOnCustomerWhereInput
    orderBy: [DataSourcesOnCustomerOrderByWithRelationInput!]
    cursor: DataSourcesOnCustomerWhereUniqueInput
    take: Int
    skip: Int
  ): AggregateDataSourcesOnCustomer!
  groupByDataSourcesOnCustomer(
    where: DataSourcesOnCustomerWhereInput
    orderBy: [DataSourcesOnCustomerOrderByWithAggregationInput!]
    by: [DataSourcesOnCustomerScalarFieldEnum!]!
    having: DataSourcesOnCustomerScalarWhereWithAggregatesInput
    take: Int
    skip: Int
  ): [DataSourcesOnCustomerGroupBy!]!
  findUniqueDynamicUserFields(
    where: DynamicUserFieldsWhereUniqueInput!
  ): DynamicUserFields
  findFirstDynamicUserFields(
    where: DynamicUserFieldsWhereInput
    orderBy: [DynamicUserFieldsOrderByWithRelationInput!]
    cursor: DynamicUserFieldsWhereUniqueInput
    take: Int
    skip: Int
    distinct: [DynamicUserFieldsScalarFieldEnum!]
  ): DynamicUserFields
  findManyDynamicUserFields(
    where: DynamicUserFieldsWhereInput
    orderBy: [DynamicUserFieldsOrderByWithRelationInput!]
    cursor: DynamicUserFieldsWhereUniqueInput
    take: Int
    skip: Int
    distinct: [DynamicUserFieldsScalarFieldEnum!]
  ): [DynamicUserFields!]!
  aggregateDynamicUserFields(
    where: DynamicUserFieldsWhereInput
    orderBy: [DynamicUserFieldsOrderByWithRelationInput!]
    cursor: DynamicUserFieldsWhereUniqueInput
    take: Int
    skip: Int
  ): AggregateDynamicUserFields!
  groupByDynamicUserFields(
    where: DynamicUserFieldsWhereInput
    orderBy: [DynamicUserFieldsOrderByWithAggregationInput!]
    by: [DynamicUserFieldsScalarFieldEnum!]!
    having: DynamicUserFieldsScalarWhereWithAggregatesInput
    take: Int
    skip: Int
  ): [DynamicUserFieldsGroupBy!]!
  event(where: EventWhereUniqueInput!): Event
  findFirstEvent(
    where: EventWhereInput
    orderBy: [EventOrderByWithRelationInput!]
    cursor: EventWhereUniqueInput
    take: Int
    skip: Int
    distinct: [EventScalarFieldEnum!]
  ): Event
  events(
    where: EventWhereInput
    orderBy: [EventOrderByWithRelationInput!]
    cursor: EventWhereUniqueInput
    take: Int
    skip: Int
    distinct: [EventScalarFieldEnum!]
  ): [Event!]!
  aggregateEvent(
    where: EventWhereInput
    orderBy: [EventOrderByWithRelationInput!]
    cursor: EventWhereUniqueInput
    take: Int
    skip: Int
  ): AggregateEvent!
  groupByEvent(
    where: EventWhereInput
    orderBy: [EventOrderByWithAggregationInput!]
    by: [EventScalarFieldEnum!]!
    having: EventScalarWhereWithAggregatesInput
    take: Int
    skip: Int
  ): [EventGroupBy!]!
  externalGroup(where: ExternalGroupWhereUniqueInput!): ExternalGroup
  findFirstExternalGroup(
    where: ExternalGroupWhereInput
    orderBy: [ExternalGroupOrderByWithRelationInput!]
    cursor: ExternalGroupWhereUniqueInput
    take: Int
    skip: Int
    distinct: [ExternalGroupScalarFieldEnum!]
  ): ExternalGroup
  externalGroups(
    where: ExternalGroupWhereInput
    orderBy: [ExternalGroupOrderByWithRelationInput!]
    cursor: ExternalGroupWhereUniqueInput
    take: Int
    skip: Int
    distinct: [ExternalGroupScalarFieldEnum!]
  ): [ExternalGroup!]!
  aggregateExternalGroup(
    where: ExternalGroupWhereInput
    orderBy: [ExternalGroupOrderByWithRelationInput!]
    cursor: ExternalGroupWhereUniqueInput
    take: Int
    skip: Int
  ): AggregateExternalGroup!
  groupByExternalGroup(
    where: ExternalGroupWhereInput
    orderBy: [ExternalGroupOrderByWithAggregationInput!]
    by: [ExternalGroupScalarFieldEnum!]!
    having: ExternalGroupScalarWhereWithAggregatesInput
    take: Int
    skip: Int
  ): [ExternalGroupGroupBy!]!
  externalGroupMember(
    where: ExternalGroupMemberWhereUniqueInput!
  ): ExternalGroupMember
  findFirstExternalGroupMember(
    where: ExternalGroupMemberWhereInput
    orderBy: [ExternalGroupMemberOrderByWithRelationInput!]
    cursor: ExternalGroupMemberWhereUniqueInput
    take: Int
    skip: Int
    distinct: [ExternalGroupMemberScalarFieldEnum!]
  ): ExternalGroupMember
  externalGroupMembers(
    where: ExternalGroupMemberWhereInput
    orderBy: [ExternalGroupMemberOrderByWithRelationInput!]
    cursor: ExternalGroupMemberWhereUniqueInput
    take: Int
    skip: Int
    distinct: [ExternalGroupMemberScalarFieldEnum!]
  ): [ExternalGroupMember!]!
  aggregateExternalGroupMember(
    where: ExternalGroupMemberWhereInput
    orderBy: [ExternalGroupMemberOrderByWithRelationInput!]
    cursor: ExternalGroupMemberWhereUniqueInput
    take: Int
    skip: Int
  ): AggregateExternalGroupMember!
  groupByExternalGroupMember(
    where: ExternalGroupMemberWhereInput
    orderBy: [ExternalGroupMemberOrderByWithAggregationInput!]
    by: [ExternalGroupMemberScalarFieldEnum!]!
    having: ExternalGroupMemberScalarWhereWithAggregatesInput
    take: Int
    skip: Int
  ): [ExternalGroupMemberGroupBy!]!
  externalUser(where: ExternalUserWhereUniqueInput!): ExternalUser
  findFirstExternalUser(
    where: ExternalUserWhereInput
    orderBy: [ExternalUserOrderByWithRelationInput!]
    cursor: ExternalUserWhereUniqueInput
    take: Int
    skip: Int
    distinct: [ExternalUserScalarFieldEnum!]
  ): ExternalUser
  externalUsers(
    where: ExternalUserWhereInput
    orderBy: [ExternalUserOrderByWithRelationInput!]
    cursor: ExternalUserWhereUniqueInput
    take: Int
    skip: Int
    distinct: [ExternalUserScalarFieldEnum!]
  ): [ExternalUser!]!
  aggregateExternalUser(
    where: ExternalUserWhereInput
    orderBy: [ExternalUserOrderByWithRelationInput!]
    cursor: ExternalUserWhereUniqueInput
    take: Int
    skip: Int
  ): AggregateExternalUser!
  groupByExternalUser(
    where: ExternalUserWhereInput
    orderBy: [ExternalUserOrderByWithAggregationInput!]
    by: [ExternalUserScalarFieldEnum!]!
    having: ExternalUserScalarWhereWithAggregatesInput
    take: Int
    skip: Int
  ): [ExternalUserGroupBy!]!
  feedback(where: FeedbackWhereUniqueInput!): Feedback
  findFirstFeedback(
    where: FeedbackWhereInput
    orderBy: [FeedbackOrderByWithRelationInput!]
    cursor: FeedbackWhereUniqueInput
    take: Int
    skip: Int
    distinct: [FeedbackScalarFieldEnum!]
  ): Feedback
  feedbacks(
    where: FeedbackWhereInput
    orderBy: [FeedbackOrderByWithRelationInput!]
    cursor: FeedbackWhereUniqueInput
    take: Int
    skip: Int
    distinct: [FeedbackScalarFieldEnum!]
  ): [Feedback!]!
  aggregateFeedback(
    where: FeedbackWhereInput
    orderBy: [FeedbackOrderByWithRelationInput!]
    cursor: FeedbackWhereUniqueInput
    take: Int
    skip: Int
  ): AggregateFeedback!
  groupByFeedback(
    where: FeedbackWhereInput
    orderBy: [FeedbackOrderByWithAggregationInput!]
    by: [FeedbackScalarFieldEnum!]!
    having: FeedbackScalarWhereWithAggregatesInput
    take: Int
    skip: Int
  ): [FeedbackGroupBy!]!
  group(where: GroupWhereUniqueInput!): Group
  findFirstGroup(
    where: GroupWhereInput
    orderBy: [GroupOrderByWithRelationInput!]
    cursor: GroupWhereUniqueInput
    take: Int
    skip: Int
    distinct: [GroupScalarFieldEnum!]
  ): Group
  groups(
    where: GroupWhereInput
    orderBy: [GroupOrderByWithRelationInput!]
    cursor: GroupWhereUniqueInput
    take: Int
    skip: Int
    distinct: [GroupScalarFieldEnum!]
  ): [Group!]!
  aggregateGroup(
    where: GroupWhereInput
    orderBy: [GroupOrderByWithRelationInput!]
    cursor: GroupWhereUniqueInput
    take: Int
    skip: Int
  ): AggregateGroup!
  groupByGroup(
    where: GroupWhereInput
    orderBy: [GroupOrderByWithAggregationInput!]
    by: [GroupScalarFieldEnum!]!
    having: GroupScalarWhereWithAggregatesInput
    take: Int
    skip: Int
  ): [GroupGroupBy!]!
  groupUser(where: GroupUserWhereUniqueInput!): GroupUser
  findFirstGroupUser(
    where: GroupUserWhereInput
    orderBy: [GroupUserOrderByWithRelationInput!]
    cursor: GroupUserWhereUniqueInput
    take: Int
    skip: Int
    distinct: [GroupUserScalarFieldEnum!]
  ): GroupUser
  groupUsers(
    where: GroupUserWhereInput
    orderBy: [GroupUserOrderByWithRelationInput!]
    cursor: GroupUserWhereUniqueInput
    take: Int
    skip: Int
    distinct: [GroupUserScalarFieldEnum!]
  ): [GroupUser!]!
  aggregateGroupUser(
    where: GroupUserWhereInput
    orderBy: [GroupUserOrderByWithRelationInput!]
    cursor: GroupUserWhereUniqueInput
    take: Int
    skip: Int
  ): AggregateGroupUser!
  groupByGroupUser(
    where: GroupUserWhereInput
    orderBy: [GroupUserOrderByWithAggregationInput!]
    by: [GroupUserScalarFieldEnum!]!
    having: GroupUserScalarWhereWithAggregatesInput
    take: Int
    skip: Int
  ): [GroupUserGroupBy!]!
  launch(where: LaunchWhereUniqueInput!): Launch
  findFirstLaunch(
    where: LaunchWhereInput
    orderBy: [LaunchOrderByWithRelationInput!]
    cursor: LaunchWhereUniqueInput
    take: Int
    skip: Int
    distinct: [LaunchScalarFieldEnum!]
  ): Launch
  launches(
    where: LaunchWhereInput
    orderBy: [LaunchOrderByWithRelationInput!]
    cursor: LaunchWhereUniqueInput
    take: Int
    skip: Int
    distinct: [LaunchScalarFieldEnum!]
  ): [Launch!]!
  aggregateLaunch(
    where: LaunchWhereInput
    orderBy: [LaunchOrderByWithRelationInput!]
    cursor: LaunchWhereUniqueInput
    take: Int
    skip: Int
  ): AggregateLaunch!
  groupByLaunch(
    where: LaunchWhereInput
    orderBy: [LaunchOrderByWithAggregationInput!]
    by: [LaunchScalarFieldEnum!]!
    having: LaunchScalarWhereWithAggregatesInput
    take: Int
    skip: Int
  ): [LaunchGroupBy!]!
  findUniqueLaunchContacts(
    where: LaunchContactsWhereUniqueInput!
  ): LaunchContacts
  findFirstLaunchContacts(
    where: LaunchContactsWhereInput
    orderBy: [LaunchContactsOrderByWithRelationInput!]
    cursor: LaunchContactsWhereUniqueInput
    take: Int
    skip: Int
    distinct: [LaunchContactsScalarFieldEnum!]
  ): LaunchContacts
  findManyLaunchContacts(
    where: LaunchContactsWhereInput
    orderBy: [LaunchContactsOrderByWithRelationInput!]
    cursor: LaunchContactsWhereUniqueInput
    take: Int
    skip: Int
    distinct: [LaunchContactsScalarFieldEnum!]
  ): [LaunchContacts!]!
  aggregateLaunchContacts(
    where: LaunchContactsWhereInput
    orderBy: [LaunchContactsOrderByWithRelationInput!]
    cursor: LaunchContactsWhereUniqueInput
    take: Int
    skip: Int
  ): AggregateLaunchContacts!
  groupByLaunchContacts(
    where: LaunchContactsWhereInput
    orderBy: [LaunchContactsOrderByWithAggregationInput!]
    by: [LaunchContactsScalarFieldEnum!]!
    having: LaunchContactsScalarWhereWithAggregatesInput
    take: Int
    skip: Int
  ): [LaunchContactsGroupBy!]!
  list(where: ListWhereUniqueInput!): List
  findFirstList(
    where: ListWhereInput
    orderBy: [ListOrderByWithRelationInput!]
    cursor: ListWhereUniqueInput
    take: Int
    skip: Int
    distinct: [ListScalarFieldEnum!]
  ): List
  lists(
    where: ListWhereInput
    orderBy: [ListOrderByWithRelationInput!]
    cursor: ListWhereUniqueInput
    take: Int
    skip: Int
    distinct: [ListScalarFieldEnum!]
  ): [List!]!
  aggregateList(
    where: ListWhereInput
    orderBy: [ListOrderByWithRelationInput!]
    cursor: ListWhereUniqueInput
    take: Int
    skip: Int
  ): AggregateList!
  groupByList(
    where: ListWhereInput
    orderBy: [ListOrderByWithAggregationInput!]
    by: [ListScalarFieldEnum!]!
    having: ListScalarWhereWithAggregatesInput
    take: Int
    skip: Int
  ): [ListGroupBy!]!
  listCompany(where: ListCompanyWhereUniqueInput!): ListCompany
  findFirstListCompany(
    where: ListCompanyWhereInput
    orderBy: [ListCompanyOrderByWithRelationInput!]
    cursor: ListCompanyWhereUniqueInput
    take: Int
    skip: Int
    distinct: [ListCompanyScalarFieldEnum!]
  ): ListCompany
  listCompanies(
    where: ListCompanyWhereInput
    orderBy: [ListCompanyOrderByWithRelationInput!]
    cursor: ListCompanyWhereUniqueInput
    take: Int
    skip: Int
    distinct: [ListCompanyScalarFieldEnum!]
  ): [ListCompany!]!
  aggregateListCompany(
    where: ListCompanyWhereInput
    orderBy: [ListCompanyOrderByWithRelationInput!]
    cursor: ListCompanyWhereUniqueInput
    take: Int
    skip: Int
  ): AggregateListCompany!
  groupByListCompany(
    where: ListCompanyWhereInput
    orderBy: [ListCompanyOrderByWithAggregationInput!]
    by: [ListCompanyScalarFieldEnum!]!
    having: ListCompanyScalarWhereWithAggregatesInput
    take: Int
    skip: Int
  ): [ListCompanyGroupBy!]!
  messageTemplate(where: MessageTemplateWhereUniqueInput!): MessageTemplate
  findFirstMessageTemplate(
    where: MessageTemplateWhereInput
    orderBy: [MessageTemplateOrderByWithRelationInput!]
    cursor: MessageTemplateWhereUniqueInput
    take: Int
    skip: Int
    distinct: [MessageTemplateScalarFieldEnum!]
  ): MessageTemplate
  messageTemplates(
    where: MessageTemplateWhereInput
    orderBy: [MessageTemplateOrderByWithRelationInput!]
    cursor: MessageTemplateWhereUniqueInput
    take: Int
    skip: Int
    distinct: [MessageTemplateScalarFieldEnum!]
  ): [MessageTemplate!]!
  aggregateMessageTemplate(
    where: MessageTemplateWhereInput
    orderBy: [MessageTemplateOrderByWithRelationInput!]
    cursor: MessageTemplateWhereUniqueInput
    take: Int
    skip: Int
  ): AggregateMessageTemplate!
  groupByMessageTemplate(
    where: MessageTemplateWhereInput
    orderBy: [MessageTemplateOrderByWithAggregationInput!]
    by: [MessageTemplateScalarFieldEnum!]!
    having: MessageTemplateScalarWhereWithAggregatesInput
    take: Int
    skip: Int
  ): [MessageTemplateGroupBy!]!
  note(where: NoteWhereUniqueInput!): Note
  findFirstNote(
    where: NoteWhereInput
    orderBy: [NoteOrderByWithRelationInput!]
    cursor: NoteWhereUniqueInput
    take: Int
    skip: Int
    distinct: [NoteScalarFieldEnum!]
  ): Note
  notes(
    where: NoteWhereInput
    orderBy: [NoteOrderByWithRelationInput!]
    cursor: NoteWhereUniqueInput
    take: Int
    skip: Int
    distinct: [NoteScalarFieldEnum!]
  ): [Note!]!
  aggregateNote(
    where: NoteWhereInput
    orderBy: [NoteOrderByWithRelationInput!]
    cursor: NoteWhereUniqueInput
    take: Int
    skip: Int
  ): AggregateNote!
  groupByNote(
    where: NoteWhereInput
    orderBy: [NoteOrderByWithAggregationInput!]
    by: [NoteScalarFieldEnum!]!
    having: NoteScalarWhereWithAggregatesInput
    take: Int
    skip: Int
  ): [NoteGroupBy!]!
  findUniqueNoteGroupTags(where: NoteGroupTagsWhereUniqueInput!): NoteGroupTags
  findFirstNoteGroupTags(
    where: NoteGroupTagsWhereInput
    orderBy: [NoteGroupTagsOrderByWithRelationInput!]
    cursor: NoteGroupTagsWhereUniqueInput
    take: Int
    skip: Int
    distinct: [NoteGroupTagsScalarFieldEnum!]
  ): NoteGroupTags
  findManyNoteGroupTags(
    where: NoteGroupTagsWhereInput
    orderBy: [NoteGroupTagsOrderByWithRelationInput!]
    cursor: NoteGroupTagsWhereUniqueInput
    take: Int
    skip: Int
    distinct: [NoteGroupTagsScalarFieldEnum!]
  ): [NoteGroupTags!]!
  aggregateNoteGroupTags(
    where: NoteGroupTagsWhereInput
    orderBy: [NoteGroupTagsOrderByWithRelationInput!]
    cursor: NoteGroupTagsWhereUniqueInput
    take: Int
    skip: Int
  ): AggregateNoteGroupTags!
  groupByNoteGroupTags(
    where: NoteGroupTagsWhereInput
    orderBy: [NoteGroupTagsOrderByWithAggregationInput!]
    by: [NoteGroupTagsScalarFieldEnum!]!
    having: NoteGroupTagsScalarWhereWithAggregatesInput
    take: Int
    skip: Int
  ): [NoteGroupTagsGroupBy!]!
  findUniqueNoteUserTags(where: NoteUserTagsWhereUniqueInput!): NoteUserTags
  findFirstNoteUserTags(
    where: NoteUserTagsWhereInput
    orderBy: [NoteUserTagsOrderByWithRelationInput!]
    cursor: NoteUserTagsWhereUniqueInput
    take: Int
    skip: Int
    distinct: [NoteUserTagsScalarFieldEnum!]
  ): NoteUserTags
  findManyNoteUserTags(
    where: NoteUserTagsWhereInput
    orderBy: [NoteUserTagsOrderByWithRelationInput!]
    cursor: NoteUserTagsWhereUniqueInput
    take: Int
    skip: Int
    distinct: [NoteUserTagsScalarFieldEnum!]
  ): [NoteUserTags!]!
  aggregateNoteUserTags(
    where: NoteUserTagsWhereInput
    orderBy: [NoteUserTagsOrderByWithRelationInput!]
    cursor: NoteUserTagsWhereUniqueInput
    take: Int
    skip: Int
  ): AggregateNoteUserTags!
  groupByNoteUserTags(
    where: NoteUserTagsWhereInput
    orderBy: [NoteUserTagsOrderByWithAggregationInput!]
    by: [NoteUserTagsScalarFieldEnum!]!
    having: NoteUserTagsScalarWhereWithAggregatesInput
    take: Int
    skip: Int
  ): [NoteUserTagsGroupBy!]!
  offerOption(where: OfferOptionWhereUniqueInput!): OfferOption
  findFirstOfferOption(
    where: OfferOptionWhereInput
    orderBy: [OfferOptionOrderByWithRelationInput!]
    cursor: OfferOptionWhereUniqueInput
    take: Int
    skip: Int
    distinct: [OfferOptionScalarFieldEnum!]
  ): OfferOption
  offerOptions(
    where: OfferOptionWhereInput
    orderBy: [OfferOptionOrderByWithRelationInput!]
    cursor: OfferOptionWhereUniqueInput
    take: Int
    skip: Int
    distinct: [OfferOptionScalarFieldEnum!]
  ): [OfferOption!]!
  aggregateOfferOption(
    where: OfferOptionWhereInput
    orderBy: [OfferOptionOrderByWithRelationInput!]
    cursor: OfferOptionWhereUniqueInput
    take: Int
    skip: Int
  ): AggregateOfferOption!
  groupByOfferOption(
    where: OfferOptionWhereInput
    orderBy: [OfferOptionOrderByWithAggregationInput!]
    by: [OfferOptionScalarFieldEnum!]!
    having: OfferOptionScalarWhereWithAggregatesInput
    take: Int
    skip: Int
  ): [OfferOptionGroupBy!]!
  product(where: ProductWhereUniqueInput!): Product
  findFirstProduct(
    where: ProductWhereInput
    orderBy: [ProductOrderByWithRelationInput!]
    cursor: ProductWhereUniqueInput
    take: Int
    skip: Int
    distinct: [ProductScalarFieldEnum!]
  ): Product
  products(
    where: ProductWhereInput
    orderBy: [ProductOrderByWithRelationInput!]
    cursor: ProductWhereUniqueInput
    take: Int
    skip: Int
    distinct: [ProductScalarFieldEnum!]
  ): [Product!]!
  aggregateProduct(
    where: ProductWhereInput
    orderBy: [ProductOrderByWithRelationInput!]
    cursor: ProductWhereUniqueInput
    take: Int
    skip: Int
  ): AggregateProduct!
  groupByProduct(
    where: ProductWhereInput
    orderBy: [ProductOrderByWithAggregationInput!]
    by: [ProductScalarFieldEnum!]!
    having: ProductScalarWhereWithAggregatesInput
    take: Int
    skip: Int
  ): [ProductGroupBy!]!
  rating(where: RatingWhereUniqueInput!): Rating
  findFirstRating(
    where: RatingWhereInput
    orderBy: [RatingOrderByWithRelationInput!]
    cursor: RatingWhereUniqueInput
    take: Int
    skip: Int
    distinct: [RatingScalarFieldEnum!]
  ): Rating
  ratings(
    where: RatingWhereInput
    orderBy: [RatingOrderByWithRelationInput!]
    cursor: RatingWhereUniqueInput
    take: Int
    skip: Int
    distinct: [RatingScalarFieldEnum!]
  ): [Rating!]!
  aggregateRating(
    where: RatingWhereInput
    orderBy: [RatingOrderByWithRelationInput!]
    cursor: RatingWhereUniqueInput
    take: Int
    skip: Int
  ): AggregateRating!
  groupByRating(
    where: RatingWhereInput
    orderBy: [RatingOrderByWithAggregationInput!]
    by: [RatingScalarFieldEnum!]!
    having: RatingScalarWhereWithAggregatesInput
    take: Int
    skip: Int
  ): [RatingGroupBy!]!
  reference(where: ReferenceWhereUniqueInput!): Reference
  findFirstReference(
    where: ReferenceWhereInput
    orderBy: [ReferenceOrderByWithRelationInput!]
    cursor: ReferenceWhereUniqueInput
    take: Int
    skip: Int
    distinct: [ReferenceScalarFieldEnum!]
  ): Reference
  references(
    where: ReferenceWhereInput
    orderBy: [ReferenceOrderByWithRelationInput!]
    cursor: ReferenceWhereUniqueInput
    take: Int
    skip: Int
    distinct: [ReferenceScalarFieldEnum!]
  ): [Reference!]!
  aggregateReference(
    where: ReferenceWhereInput
    orderBy: [ReferenceOrderByWithRelationInput!]
    cursor: ReferenceWhereUniqueInput
    take: Int
    skip: Int
  ): AggregateReference!
  groupByReference(
    where: ReferenceWhereInput
    orderBy: [ReferenceOrderByWithAggregationInput!]
    by: [ReferenceScalarFieldEnum!]!
    having: ReferenceScalarWhereWithAggregatesInput
    take: Int
    skip: Int
  ): [ReferenceGroupBy!]!
  findUniqueReferenceOnOfferOptions(
    where: ReferenceOnOfferOptionsWhereUniqueInput!
  ): ReferenceOnOfferOptions
  findFirstReferenceOnOfferOptions(
    where: ReferenceOnOfferOptionsWhereInput
    orderBy: [ReferenceOnOfferOptionsOrderByWithRelationInput!]
    cursor: ReferenceOnOfferOptionsWhereUniqueInput
    take: Int
    skip: Int
    distinct: [ReferenceOnOfferOptionsScalarFieldEnum!]
  ): ReferenceOnOfferOptions
  findManyReferenceOnOfferOptions(
    where: ReferenceOnOfferOptionsWhereInput
    orderBy: [ReferenceOnOfferOptionsOrderByWithRelationInput!]
    cursor: ReferenceOnOfferOptionsWhereUniqueInput
    take: Int
    skip: Int
    distinct: [ReferenceOnOfferOptionsScalarFieldEnum!]
  ): [ReferenceOnOfferOptions!]!
  aggregateReferenceOnOfferOptions(
    where: ReferenceOnOfferOptionsWhereInput
    orderBy: [ReferenceOnOfferOptionsOrderByWithRelationInput!]
    cursor: ReferenceOnOfferOptionsWhereUniqueInput
    take: Int
    skip: Int
  ): AggregateReferenceOnOfferOptions!
  groupByReferenceOnOfferOptions(
    where: ReferenceOnOfferOptionsWhereInput
    orderBy: [ReferenceOnOfferOptionsOrderByWithAggregationInput!]
    by: [ReferenceOnOfferOptionsScalarFieldEnum!]!
    having: ReferenceOnOfferOptionsScalarWhereWithAggregatesInput
    take: Int
    skip: Int
  ): [ReferenceOnOfferOptionsGroupBy!]!
  role(where: RoleWhereUniqueInput!): Role
  findFirstRole(
    where: RoleWhereInput
    orderBy: [RoleOrderByWithRelationInput!]
    cursor: RoleWhereUniqueInput
    take: Int
    skip: Int
    distinct: [RoleScalarFieldEnum!]
  ): Role
  roles(
    where: RoleWhereInput
    orderBy: [RoleOrderByWithRelationInput!]
    cursor: RoleWhereUniqueInput
    take: Int
    skip: Int
    distinct: [RoleScalarFieldEnum!]
  ): [Role!]!
  aggregateRole(
    where: RoleWhereInput
    orderBy: [RoleOrderByWithRelationInput!]
    cursor: RoleWhereUniqueInput
    take: Int
    skip: Int
  ): AggregateRole!
  groupByRole(
    where: RoleWhereInput
    orderBy: [RoleOrderByWithAggregationInput!]
    by: [RoleScalarFieldEnum!]!
    having: RoleScalarWhereWithAggregatesInput
    take: Int
    skip: Int
  ): [RoleGroupBy!]!
  salesLead(where: SalesLeadWhereUniqueInput!): SalesLead
  findFirstSalesLead(
    where: SalesLeadWhereInput
    orderBy: [SalesLeadOrderByWithRelationInput!]
    cursor: SalesLeadWhereUniqueInput
    take: Int
    skip: Int
    distinct: [SalesLeadScalarFieldEnum!]
  ): SalesLead
  salesLeads(
    where: SalesLeadWhereInput
    orderBy: [SalesLeadOrderByWithRelationInput!]
    cursor: SalesLeadWhereUniqueInput
    take: Int
    skip: Int
    distinct: [SalesLeadScalarFieldEnum!]
  ): [SalesLead!]!
  aggregateSalesLead(
    where: SalesLeadWhereInput
    orderBy: [SalesLeadOrderByWithRelationInput!]
    cursor: SalesLeadWhereUniqueInput
    take: Int
    skip: Int
  ): AggregateSalesLead!
  groupBySalesLead(
    where: SalesLeadWhereInput
    orderBy: [SalesLeadOrderByWithAggregationInput!]
    by: [SalesLeadScalarFieldEnum!]!
    having: SalesLeadScalarWhereWithAggregatesInput
    take: Int
    skip: Int
  ): [SalesLeadGroupBy!]!
  syncEvent(where: SyncEventWhereUniqueInput!): SyncEvent
  findFirstSyncEvent(
    where: SyncEventWhereInput
    orderBy: [SyncEventOrderByWithRelationInput!]
    cursor: SyncEventWhereUniqueInput
    take: Int
    skip: Int
    distinct: [SyncEventScalarFieldEnum!]
  ): SyncEvent
  syncEvents(
    where: SyncEventWhereInput
    orderBy: [SyncEventOrderByWithRelationInput!]
    cursor: SyncEventWhereUniqueInput
    take: Int
    skip: Int
    distinct: [SyncEventScalarFieldEnum!]
  ): [SyncEvent!]!
  aggregateSyncEvent(
    where: SyncEventWhereInput
    orderBy: [SyncEventOrderByWithRelationInput!]
    cursor: SyncEventWhereUniqueInput
    take: Int
    skip: Int
  ): AggregateSyncEvent!
  groupBySyncEvent(
    where: SyncEventWhereInput
    orderBy: [SyncEventOrderByWithAggregationInput!]
    by: [SyncEventScalarFieldEnum!]!
    having: SyncEventScalarWhereWithAggregatesInput
    take: Int
    skip: Int
  ): [SyncEventGroupBy!]!
  findUniqueTemplateShortCodes(
    where: TemplateShortCodesWhereUniqueInput!
  ): TemplateShortCodes
  findFirstTemplateShortCodes(
    where: TemplateShortCodesWhereInput
    orderBy: [TemplateShortCodesOrderByWithRelationInput!]
    cursor: TemplateShortCodesWhereUniqueInput
    take: Int
    skip: Int
    distinct: [TemplateShortCodesScalarFieldEnum!]
  ): TemplateShortCodes
  findManyTemplateShortCodes(
    where: TemplateShortCodesWhereInput
    orderBy: [TemplateShortCodesOrderByWithRelationInput!]
    cursor: TemplateShortCodesWhereUniqueInput
    take: Int
    skip: Int
    distinct: [TemplateShortCodesScalarFieldEnum!]
  ): [TemplateShortCodes!]!
  aggregateTemplateShortCodes(
    where: TemplateShortCodesWhereInput
    orderBy: [TemplateShortCodesOrderByWithRelationInput!]
    cursor: TemplateShortCodesWhereUniqueInput
    take: Int
    skip: Int
  ): AggregateTemplateShortCodes!
  groupByTemplateShortCodes(
    where: TemplateShortCodesWhereInput
    orderBy: [TemplateShortCodesOrderByWithAggregationInput!]
    by: [TemplateShortCodesScalarFieldEnum!]!
    having: TemplateShortCodesScalarWhereWithAggregatesInput
    take: Int
    skip: Int
  ): [TemplateShortCodesGroupBy!]!
  findUniqueUseCaseCollections(
    where: UseCaseCollectionsWhereUniqueInput!
  ): UseCaseCollections
  findFirstUseCaseCollections(
    where: UseCaseCollectionsWhereInput
    orderBy: [UseCaseCollectionsOrderByWithRelationInput!]
    cursor: UseCaseCollectionsWhereUniqueInput
    take: Int
    skip: Int
    distinct: [UseCaseCollectionsScalarFieldEnum!]
  ): UseCaseCollections
  findManyUseCaseCollections(
    where: UseCaseCollectionsWhereInput
    orderBy: [UseCaseCollectionsOrderByWithRelationInput!]
    cursor: UseCaseCollectionsWhereUniqueInput
    take: Int
    skip: Int
    distinct: [UseCaseCollectionsScalarFieldEnum!]
  ): [UseCaseCollections!]!
  aggregateUseCaseCollections(
    where: UseCaseCollectionsWhereInput
    orderBy: [UseCaseCollectionsOrderByWithRelationInput!]
    cursor: UseCaseCollectionsWhereUniqueInput
    take: Int
    skip: Int
  ): AggregateUseCaseCollections!
  groupByUseCaseCollections(
    where: UseCaseCollectionsWhereInput
    orderBy: [UseCaseCollectionsOrderByWithAggregationInput!]
    by: [UseCaseCollectionsScalarFieldEnum!]!
    having: UseCaseCollectionsScalarWhereWithAggregatesInput
    take: Int
    skip: Int
  ): [UseCaseCollectionsGroupBy!]!
  findUniqueUseCases(where: UseCasesWhereUniqueInput!): UseCases
  findFirstUseCases(
    where: UseCasesWhereInput
    orderBy: [UseCasesOrderByWithRelationInput!]
    cursor: UseCasesWhereUniqueInput
    take: Int
    skip: Int
    distinct: [UseCasesScalarFieldEnum!]
  ): UseCases
  findManyUseCases(
    where: UseCasesWhereInput
    orderBy: [UseCasesOrderByWithRelationInput!]
    cursor: UseCasesWhereUniqueInput
    take: Int
    skip: Int
    distinct: [UseCasesScalarFieldEnum!]
  ): [UseCases!]!
  aggregateUseCases(
    where: UseCasesWhereInput
    orderBy: [UseCasesOrderByWithRelationInput!]
    cursor: UseCasesWhereUniqueInput
    take: Int
    skip: Int
  ): AggregateUseCases!
  groupByUseCases(
    where: UseCasesWhereInput
    orderBy: [UseCasesOrderByWithAggregationInput!]
    by: [UseCasesScalarFieldEnum!]!
    having: UseCasesScalarWhereWithAggregatesInput
    take: Int
    skip: Int
  ): [UseCasesGroupBy!]!
  findUniqueUseCasesOnCollections(
    where: UseCasesOnCollectionsWhereUniqueInput!
  ): UseCasesOnCollections
  findFirstUseCasesOnCollections(
    where: UseCasesOnCollectionsWhereInput
    orderBy: [UseCasesOnCollectionsOrderByWithRelationInput!]
    cursor: UseCasesOnCollectionsWhereUniqueInput
    take: Int
    skip: Int
    distinct: [UseCasesOnCollectionsScalarFieldEnum!]
  ): UseCasesOnCollections
  findManyUseCasesOnCollections(
    where: UseCasesOnCollectionsWhereInput
    orderBy: [UseCasesOnCollectionsOrderByWithRelationInput!]
    cursor: UseCasesOnCollectionsWhereUniqueInput
    take: Int
    skip: Int
    distinct: [UseCasesOnCollectionsScalarFieldEnum!]
  ): [UseCasesOnCollections!]!
  aggregateUseCasesOnCollections(
    where: UseCasesOnCollectionsWhereInput
    orderBy: [UseCasesOnCollectionsOrderByWithRelationInput!]
    cursor: UseCasesOnCollectionsWhereUniqueInput
    take: Int
    skip: Int
  ): AggregateUseCasesOnCollections!
  groupByUseCasesOnCollections(
    where: UseCasesOnCollectionsWhereInput
    orderBy: [UseCasesOnCollectionsOrderByWithAggregationInput!]
    by: [UseCasesOnCollectionsScalarFieldEnum!]!
    having: UseCasesOnCollectionsScalarWhereWithAggregatesInput
    take: Int
    skip: Int
  ): [UseCasesOnCollectionsGroupBy!]!
  user(where: UserWhereUniqueInput!): User
  findFirstUser(
    where: UserWhereInput
    orderBy: [UserOrderByWithRelationInput!]
    cursor: UserWhereUniqueInput
    take: Int
    skip: Int
    distinct: [UserScalarFieldEnum!]
  ): User
  users(
    where: UserWhereInput
    orderBy: [UserOrderByWithRelationInput!]
    cursor: UserWhereUniqueInput
    take: Int
    skip: Int
    distinct: [UserScalarFieldEnum!]
  ): [User!]!
  aggregateUser(
    where: UserWhereInput
    orderBy: [UserOrderByWithRelationInput!]
    cursor: UserWhereUniqueInput
    take: Int
    skip: Int
  ): AggregateUser!
  groupByUser(
    where: UserWhereInput
    orderBy: [UserOrderByWithAggregationInput!]
    by: [UserScalarFieldEnum!]!
    having: UserScalarWhereWithAggregatesInput
    take: Int
    skip: Int
  ): [UserGroupBy!]!
  findUniqueUserCompanyRatings(
    where: UserCompanyRatingsWhereUniqueInput!
  ): UserCompanyRatings
  findFirstUserCompanyRatings(
    where: UserCompanyRatingsWhereInput
    orderBy: [UserCompanyRatingsOrderByWithRelationInput!]
    cursor: UserCompanyRatingsWhereUniqueInput
    take: Int
    skip: Int
    distinct: [UserCompanyRatingsScalarFieldEnum!]
  ): UserCompanyRatings
  findManyUserCompanyRatings(
    where: UserCompanyRatingsWhereInput
    orderBy: [UserCompanyRatingsOrderByWithRelationInput!]
    cursor: UserCompanyRatingsWhereUniqueInput
    take: Int
    skip: Int
    distinct: [UserCompanyRatingsScalarFieldEnum!]
  ): [UserCompanyRatings!]!
  aggregateUserCompanyRatings(
    where: UserCompanyRatingsWhereInput
    orderBy: [UserCompanyRatingsOrderByWithRelationInput!]
    cursor: UserCompanyRatingsWhereUniqueInput
    take: Int
    skip: Int
  ): AggregateUserCompanyRatings!
  groupByUserCompanyRatings(
    where: UserCompanyRatingsWhereInput
    orderBy: [UserCompanyRatingsOrderByWithAggregationInput!]
    by: [UserCompanyRatingsScalarFieldEnum!]!
    having: UserCompanyRatingsScalarWhereWithAggregatesInput
    take: Int
    skip: Int
  ): [UserCompanyRatingsGroupBy!]!
  findUniqueUserEvents(where: UserEventsWhereUniqueInput!): UserEvents
  findFirstUserEvents(
    where: UserEventsWhereInput
    orderBy: [UserEventsOrderByWithRelationInput!]
    cursor: UserEventsWhereUniqueInput
    take: Int
    skip: Int
    distinct: [UserEventsScalarFieldEnum!]
  ): UserEvents
  findManyUserEvents(
    where: UserEventsWhereInput
    orderBy: [UserEventsOrderByWithRelationInput!]
    cursor: UserEventsWhereUniqueInput
    take: Int
    skip: Int
    distinct: [UserEventsScalarFieldEnum!]
  ): [UserEvents!]!
  aggregateUserEvents(
    where: UserEventsWhereInput
    orderBy: [UserEventsOrderByWithRelationInput!]
    cursor: UserEventsWhereUniqueInput
    take: Int
    skip: Int
  ): AggregateUserEvents!
  groupByUserEvents(
    where: UserEventsWhereInput
    orderBy: [UserEventsOrderByWithAggregationInput!]
    by: [UserEventsScalarFieldEnum!]!
    having: UserEventsScalarWhereWithAggregatesInput
    take: Int
    skip: Int
  ): [UserEventsGroupBy!]!
  userManager(where: UserManagerWhereUniqueInput!): UserManager
  findFirstUserManager(
    where: UserManagerWhereInput
    orderBy: [UserManagerOrderByWithRelationInput!]
    cursor: UserManagerWhereUniqueInput
    take: Int
    skip: Int
    distinct: [UserManagerScalarFieldEnum!]
  ): UserManager
  userManagers(
    where: UserManagerWhereInput
    orderBy: [UserManagerOrderByWithRelationInput!]
    cursor: UserManagerWhereUniqueInput
    take: Int
    skip: Int
    distinct: [UserManagerScalarFieldEnum!]
  ): [UserManager!]!
  aggregateUserManager(
    where: UserManagerWhereInput
    orderBy: [UserManagerOrderByWithRelationInput!]
    cursor: UserManagerWhereUniqueInput
    take: Int
    skip: Int
  ): AggregateUserManager!
  groupByUserManager(
    where: UserManagerWhereInput
    orderBy: [UserManagerOrderByWithAggregationInput!]
    by: [UserManagerScalarFieldEnum!]!
    having: UserManagerScalarWhereWithAggregatesInput
    take: Int
    skip: Int
  ): [UserManagerGroupBy!]!
  userRole(where: UserRoleWhereUniqueInput!): UserRole
  findFirstUserRole(
    where: UserRoleWhereInput
    orderBy: [UserRoleOrderByWithRelationInput!]
    cursor: UserRoleWhereUniqueInput
    take: Int
    skip: Int
    distinct: [UserRoleScalarFieldEnum!]
  ): UserRole
  userRoles(
    where: UserRoleWhereInput
    orderBy: [UserRoleOrderByWithRelationInput!]
    cursor: UserRoleWhereUniqueInput
    take: Int
    skip: Int
    distinct: [UserRoleScalarFieldEnum!]
  ): [UserRole!]!
  aggregateUserRole(
    where: UserRoleWhereInput
    orderBy: [UserRoleOrderByWithRelationInput!]
    cursor: UserRoleWhereUniqueInput
    take: Int
    skip: Int
  ): AggregateUserRole!
  groupByUserRole(
    where: UserRoleWhereInput
    orderBy: [UserRoleOrderByWithAggregationInput!]
    by: [UserRoleScalarFieldEnum!]!
    having: UserRoleScalarWhereWithAggregatesInput
    take: Int
    skip: Int
  ): [UserRoleGroupBy!]!
  createNewUser(
    dynamicFields: JSON!
    notificationSettings: JSON!
    roles: [String!]!
    name: String!
    email: String!
  ): User!
  currentUser: User!
  pretaaGetSSOUser(email: String!): JSONObject!
  pretaaDynamicUserFields(
    skip: Int = 0
    take: Int = 20
    searchPhrase: String
    orderBy: OrderType = DESC
    order: String = "createdAt"
  ): [DynamicUserFields!]!
  pretaaValidateToken(token: String!): String!
  pretaaGetUserList(
    skip: Int = 0
    take: Int = 20
    searchPhrase: String = ""
    searchColumn: String = ""
  ): [User!]!
  login(password: String!, email: String!): String!
  connectOAuth(service: String!, code: String!): Boolean!
  eventFilters: JSONObject!
  eventTypes: JSONObject!
  companyTypes: JSONObject!
  getFilteredNotes(
    skip: Int = 0
    take: Int = 20
    searchPhrase: String = ""
    filterList: [String!]!
    orderBy: OrderType = DESC
    companyId: Float
    eventId: Float
  ): [Note!]!
  companyStar(skip: Int = 0, take: Int = 20): [Company!]!
  getFilteredCompanies(
    excludeId: Float
    skip: Int = 0
    take: Int = 20
    searchPhrase: String = ""
    filterList: [String!]!
    orderBy: OrderType = DESC
    order: String = "createdAt"
  ): [Company!]!
  getCompanyFilterParams: JSONObject!
  pretaaGetCompanyEvents(
    searchPhrase: String = ""
    filterList: [String!]!
    orderBy: OrderType = DESC
    companyId: Int!
    skip: Int = 0
    take: Int = 20
  ): [Event!]!
  pretaaGetCompany(companyId: Float!): Company!
  getFilteredEvents(
    skip: Int = 0
    take: Int = 20
    searchPhrase: String = ""
    filterList: [String!]!
    orderBy: OrderType = DESC
    companyId: Float
  ): [Event!]!
  getCompanyFilteredEvents(
    skip: Int = 0
    take: Int = 20
    searchPhrase: String = ""
    filterList: [String!]!
    orderBy: OrderType = DESC
    companyId: Float
  ): [Event!]!
  pretaaGetEmailTemplate(
    whereUniqueInput: MessageTemplateWhereUniqueInput!
  ): MessageTemplate!
  pretaaGetEmailTemplates(
    where: MessageTemplateWhereInput
    orderBy: [MessageTemplateOrderByWithRelationInput!]
    cursor: MessageTemplateWhereUniqueInput
    take: Int
    skip: Int
    distinct: [MessageTemplateScalarFieldEnum!]
  ): [MessageTemplate!]!
  pretaaFindManyContacts(
    skip: Int = 0
    take: Int = 20
    companyId: Float
    orderBy: OrderType = DESC
    order: String = "createdAt"
  ): [Contacts!]!
  pretaaFindManyCompanyContacts(
    skip: Int = 0
    take: Int = 20
    companyId: Float
    searchPhrase: String
    order: OrderType = DESC
    orderBy: String = "createdAt"
  ): [Contacts!]!
  pretaaGetContactDetails(
    skip: Int = 0
    take: Int = 20
    companyId: Float
    orderBy: OrderType = DESC
    order: String = "createdAt"
  ): [Contacts!]!
  pretaaGetCompetitor(id: Float!): [Competitor!]!
  pretaaGetCompanyRating(companyId: Float!): UserCompanyRatings
  pretaaGetShortcodes: [TemplateShortCodes!]!
  pretaaGetShortcode(id: Float!): TemplateShortCodes!
  pretaaPreviewLaunchAction(text: String!, eventId: Float!): String!
  pretaaGetLaunchActions(
    where: LaunchWhereInput
    orderBy: [LaunchOrderByWithRelationInput!]
    cursor: LaunchWhereUniqueInput
    take: Int
    skip: Int
    distinct: [LaunchScalarFieldEnum!]
  ): [Launch!]!
  pretaaGetLaunchAction(id: Float!): Launch!
  pretaaGetLists(
    skip: Int = 0
    take: Int = 20
    searchPhrase: String
    orderBy: OrderType = DESC
    order: String = "createdAt"
  ): [List!]!
  pretaaGetFilteredGroups(
    where: PretaaGroupWhereInput
    orderBy: [GroupOrderByWithRelationInput!]
    cursor: GroupWhereUniqueInput
    take: Int
    skip: Int
    distinct: [GroupScalarFieldEnum!]
  ): [Group!]!
  pretaaGetGroup(id: Float!): Group!
  pretaaGetDataSources: [DataSources!]!
  pretaaGetUseCaseCollections(
    where: UseCaseCollectionsWhereInput
    orderBy: [UseCaseCollectionsOrderByWithRelationInput!]
    cursor: UseCaseCollectionsWhereUniqueInput
    take: Int
    skip: Int
    distinct: [UseCaseCollectionsScalarFieldEnum!]
  ): [UseCaseCollections!]!
  pretaaGetUseCases(
    where: UseCasesWhereInput
    orderBy: [UseCasesOrderByWithRelationInput!]
    cursor: UseCasesWhereUniqueInput
    take: Int
    skip: Int
    distinct: [UseCasesScalarFieldEnum!]
  ): [UseCases!]!
  pretaaGetDataObjects(
    where: CustomerDataObjectsWhereInput
    orderBy: [CustomerDataObjectsOrderByWithRelationInput!]
    cursor: CustomerDataObjectsWhereUniqueInput
    take: Int
    skip: Int
    distinct: [CustomerDataObjectsScalarFieldEnum!]
  ): [CustomerDataObjects!]!
  pretaaListDataObjectCollections(
    where: PretaaDataObjectCollectionsWhereInput
    orderBy: [DataObjectCollectionsOrderByWithRelationInput!]
    cursor: DataObjectCollectionsWhereUniqueInput
    take: Int
    skip: Int
    distinct: [DataObjectCollectionsScalarFieldEnum!]
  ): [DataObjectCollections!]!
}

type Account {
  id: Int!
  accountName: String!
  AccountUUID: String!
  _count: AccountCount
  company(
    where: CompanyWhereInput
    orderBy: [CompanyOrderByWithRelationInput!]
    cursor: CompanyWhereUniqueInput
    take: Int
    skip: Int
    distinct: [CompanyScalarFieldEnum!]
  ): [Company!]!
}

type AccountCount {
  company: Int!
}

type Company {
  id: Int!
  leadSourceId: Int
  annualRecurringRevenue: Int
  customerId: Int!
  expectedToCloseAt: DateTime
  fiscalYearStartMonth: Int
  name: String!
  companyType: CompanyType!
  primaryContactId: Int
  seatSize: Int
  createdAt: DateTime!
  updatedAt: DateTime!
  fiscalYear: Int!
  parentId: Int
  accountId: Int!
  renewalDate: DateTime
  referredOn: DateTime
  latestReferenceId: Int
  _count: CompanyCount
  customer: Customer!
  leadSource: User
  companyParent: Company
  primaryContact: User
  references(
    where: ReferenceWhereInput
    orderBy: [ReferenceOrderByWithRelationInput!]
    cursor: ReferenceWhereUniqueInput
    take: Int
    skip: Int
    distinct: [ReferenceScalarFieldEnum!]
  ): [Reference!]!
  referencesServedFor(
    where: ReferenceWhereInput
    orderBy: [ReferenceOrderByWithRelationInput!]
    cursor: ReferenceWhereUniqueInput
    take: Int
    skip: Int
    distinct: [ReferenceScalarFieldEnum!]
  ): [Reference!]!
  subsidiary(
    where: CompanyWhereInput
    orderBy: [CompanyOrderByWithRelationInput!]
    cursor: CompanyWhereUniqueInput
    take: Int
    skip: Int
    distinct: [CompanyScalarFieldEnum!]
  ): [Company!]!
  starredBy(
    where: CompanyStarredWhereInput
    orderBy: [CompanyStarredOrderByWithRelationInput!]
    cursor: CompanyStarredWhereUniqueInput
    take: Int
    skip: Int
    distinct: [CompanyStarredScalarFieldEnum!]
  ): [CompanyStarred!]!
  events(
    where: EventWhereInput
    orderBy: [EventOrderByWithRelationInput!]
    cursor: EventWhereUniqueInput
    take: Int
    skip: Int
    distinct: [EventScalarFieldEnum!]
  ): [Event!]!
  notes(
    where: NoteWhereInput
    orderBy: [NoteOrderByWithRelationInput!]
    cursor: NoteWhereUniqueInput
    take: Int
    skip: Int
    distinct: [NoteScalarFieldEnum!]
  ): [Note!]!
  account: Account!
  competitors(
    where: CompetitorWhereInput
    orderBy: [CompetitorOrderByWithRelationInput!]
    cursor: CompetitorWhereUniqueInput
    take: Int
    skip: Int
    distinct: [CompetitorScalarFieldEnum!]
  ): [Competitor!]!
  products(
    where: ProductWhereInput
    orderBy: [ProductOrderByWithRelationInput!]
    cursor: ProductWhereUniqueInput
    take: Int
    skip: Int
    distinct: [ProductScalarFieldEnum!]
  ): [Product!]!
  contacts(
    where: ContactsWhereInput
    orderBy: [ContactsOrderByWithRelationInput!]
    cursor: ContactsWhereUniqueInput
    take: Int
    skip: Int
    distinct: [ContactsScalarFieldEnum!]
  ): [Contacts!]!
  UserCompanyRatings(
    where: UserCompanyRatingsWhereInput
    orderBy: [UserCompanyRatingsOrderByWithRelationInput!]
    cursor: UserCompanyRatingsWhereUniqueInput
    take: Int
    skip: Int
    distinct: [UserCompanyRatingsScalarFieldEnum!]
  ): [UserCompanyRatings!]!
  listCompanies(
    where: ListCompanyWhereInput
    orderBy: [ListCompanyOrderByWithRelationInput!]
    cursor: ListCompanyWhereUniqueInput
    take: Int
    skip: Int
    distinct: [ListCompanyScalarFieldEnum!]
  ): [ListCompany!]!
  Launch(
    where: LaunchWhereInput
    orderBy: [LaunchOrderByWithRelationInput!]
    cursor: LaunchWhereUniqueInput
    take: Int
    skip: Int
    distinct: [LaunchScalarFieldEnum!]
  ): [Launch!]!
}

# The javascript `Date` as string. Type represents date and time as the ISO Date string.
scalar DateTime

enum CompanyType {
  PROSPECT
  CUSTOMER
}

type CompanyCount {
  references: Int!
  referencesServedFor: Int!
  subsidiary: Int!
  starredBy: Int!
  events: Int!
  notes: Int!
  competitors: Int!
  products: Int!
  contacts: Int!
  UserCompanyRatings: Int!
  listCompanies: Int!
  Launch: Int!
}

type Customer {
  id: Int!
  name: String!
  type: CustomerType!
  favoritedAt: DateTime
  createdAt: DateTime!
  updatedAt: DateTime!
  oktaClientId: String
  oktaDomain: String
  oktaClientSecret: String
  oktaApiKey: String
  _count: CustomerCount
  launch(
    where: LaunchWhereInput
    orderBy: [LaunchOrderByWithRelationInput!]
    cursor: LaunchWhereUniqueInput
    take: Int
    skip: Int
    distinct: [LaunchScalarFieldEnum!]
  ): [Launch!]!
  companies(
    where: CompanyWhereInput
    orderBy: [CompanyOrderByWithRelationInput!]
    cursor: CompanyWhereUniqueInput
    take: Int
    skip: Int
    distinct: [CompanyScalarFieldEnum!]
  ): [Company!]!
  integrations(
    where: CustomerIntegrationWhereInput
    orderBy: [CustomerIntegrationOrderByWithRelationInput!]
    cursor: CustomerIntegrationWhereUniqueInput
    take: Int
    skip: Int
    distinct: [CustomerIntegrationScalarFieldEnum!]
  ): [CustomerIntegration!]!
  events(
    where: EventWhereInput
    orderBy: [EventOrderByWithRelationInput!]
    cursor: EventWhereUniqueInput
    take: Int
    skip: Int
    distinct: [EventScalarFieldEnum!]
  ): [Event!]!
  externalGroups(
    where: ExternalGroupWhereInput
    orderBy: [ExternalGroupOrderByWithRelationInput!]
    cursor: ExternalGroupWhereUniqueInput
    take: Int
    skip: Int
    distinct: [ExternalGroupScalarFieldEnum!]
  ): [ExternalGroup!]!
  externalUsers(
    where: ExternalUserWhereInput
    orderBy: [ExternalUserOrderByWithRelationInput!]
    cursor: ExternalUserWhereUniqueInput
    take: Int
    skip: Int
    distinct: [ExternalUserScalarFieldEnum!]
  ): [ExternalUser!]!
  groups(
    where: GroupWhereInput
    orderBy: [GroupOrderByWithRelationInput!]
    cursor: GroupWhereUniqueInput
    take: Int
    skip: Int
    distinct: [GroupScalarFieldEnum!]
  ): [Group!]!
  notes(
    where: NoteWhereInput
    orderBy: [NoteOrderByWithRelationInput!]
    cursor: NoteWhereUniqueInput
    take: Int
    skip: Int
    distinct: [NoteScalarFieldEnum!]
  ): [Note!]!
  roles(
    where: RoleWhereInput
    orderBy: [RoleOrderByWithRelationInput!]
    cursor: RoleWhereUniqueInput
    take: Int
    skip: Int
    distinct: [RoleScalarFieldEnum!]
  ): [Role!]!
  salesLeads(
    where: SalesLeadWhereInput
    orderBy: [SalesLeadOrderByWithRelationInput!]
    cursor: SalesLeadWhereUniqueInput
    take: Int
    skip: Int
    distinct: [SalesLeadScalarFieldEnum!]
  ): [SalesLead!]!
  syncEvents(
    where: SyncEventWhereInput
    orderBy: [SyncEventOrderByWithRelationInput!]
    cursor: SyncEventWhereUniqueInput
    take: Int
    skip: Int
    distinct: [SyncEventScalarFieldEnum!]
  ): [SyncEvent!]!
  users(
    where: UserWhereInput
    orderBy: [UserOrderByWithRelationInput!]
    cursor: UserWhereUniqueInput
    take: Int
    skip: Int
    distinct: [UserScalarFieldEnum!]
  ): [User!]!
  messageTemplate(
    where: MessageTemplateWhereInput
    orderBy: [MessageTemplateOrderByWithRelationInput!]
    cursor: MessageTemplateWhereUniqueInput
    take: Int
    skip: Int
    distinct: [MessageTemplateScalarFieldEnum!]
  ): [MessageTemplate!]!
  dynamicFields(
    where: DynamicUserFieldsWhereInput
    orderBy: [DynamicUserFieldsOrderByWithRelationInput!]
    cursor: DynamicUserFieldsWhereUniqueInput
    take: Int
    skip: Int
    distinct: [DynamicUserFieldsScalarFieldEnum!]
  ): [DynamicUserFields!]!
  lists(
    where: ListWhereInput
    orderBy: [ListOrderByWithRelationInput!]
    cursor: ListWhereUniqueInput
    take: Int
    skip: Int
    distinct: [ListScalarFieldEnum!]
  ): [List!]!
  useCaseCollections(
    where: UseCaseCollectionsWhereInput
    orderBy: [UseCaseCollectionsOrderByWithRelationInput!]
    cursor: UseCaseCollectionsWhereUniqueInput
    take: Int
    skip: Int
    distinct: [UseCaseCollectionsScalarFieldEnum!]
  ): [UseCaseCollections!]!
  customerDataSources(
    where: DataSourcesOnCustomerWhereInput
    orderBy: [DataSourcesOnCustomerOrderByWithRelationInput!]
    cursor: DataSourcesOnCustomerWhereUniqueInput
    take: Int
    skip: Int
    distinct: [DataSourcesOnCustomerScalarFieldEnum!]
  ): [DataSourcesOnCustomer!]!
  dataObjectCollections(
    where: DataObjectCollectionsWhereInput
    orderBy: [DataObjectCollectionsOrderByWithRelationInput!]
    cursor: DataObjectCollectionsWhereUniqueInput
    take: Int
    skip: Int
    distinct: [DataObjectCollectionsScalarFieldEnum!]
  ): [DataObjectCollections!]!
}

enum CustomerType {
  PROSPECT
  CUSTOMER
  COMPETITORS
  RENEWALS
}

type CustomerCount {
  launch: Int!
  companies: Int!
  integrations: Int!
  events: Int!
  externalGroups: Int!
  externalUsers: Int!
  groups: Int!
  notes: Int!
  roles: Int!
  salesLeads: Int!
  syncEvents: Int!
  users: Int!
  messageTemplate: Int!
  dynamicFields: Int!
  lists: Int!
  useCaseCollections: Int!
  customerDataSources: Int!
  dataObjectCollections: Int!
}

type Launch {
  id: Int!
  createdAt: DateTime!
  companyId: Int!
  eventId: Int
  messageTemplateId: Int
  sendToAddress: String
  subject: String!
  text: String!
  delta: JSON
  customerId: Int
  _count: LaunchCount
  company: Company!
  events: Event
  messageTempate: MessageTemplate
  launchContacts(
    where: LaunchContactsWhereInput
    orderBy: [LaunchContactsOrderByWithRelationInput!]
    cursor: LaunchContactsWhereUniqueInput
    take: Int
    skip: Int
    distinct: [LaunchContactsScalarFieldEnum!]
  ): [LaunchContacts!]!
  Customer: Customer
}

# The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
scalar JSON

type LaunchCount {
  launchContacts: Int!
}

type Event {
  id: Int!
  customerId: Int!
  data: JSON
  notifiedAt: DateTime
  text: String
  type: EventType!
  companyId: Int
  needsAttention: EventAttention
  createdAt: DateTime!
  parentEventId: Int
  messageId: Int
  _count: EventCount
  company: Company
  customer: Customer!
  Launch(
    where: LaunchWhereInput
    orderBy: [LaunchOrderByWithRelationInput!]
    cursor: LaunchWhereUniqueInput
    take: Int
    skip: Int
    distinct: [LaunchScalarFieldEnum!]
  ): [Launch!]!
  notes(
    where: NoteWhereInput
    orderBy: [NoteOrderByWithRelationInput!]
    cursor: NoteWhereUniqueInput
    take: Int
    skip: Int
    distinct: [NoteScalarFieldEnum!]
  ): [Note!]!
  userEvents(
    where: UserEventsWhereInput
    orderBy: [UserEventsOrderByWithRelationInput!]
    cursor: UserEventsWhereUniqueInput
    take: Int
    skip: Int
    distinct: [UserEventsScalarFieldEnum!]
  ): [UserEvents!]!
  parentEvent: Event
  childEvents(
    where: EventWhereInput
    orderBy: [EventOrderByWithRelationInput!]
    cursor: EventWhereUniqueInput
    take: Int
    skip: Int
    distinct: [EventScalarFieldEnum!]
  ): [Event!]!
  message: Note
}

enum EventType {
  CUSTOMER_NEWS
  CUSTOMER_HEALTH
  OPPORTUNITY_HEALTH
  OPPORTUNITY_NEWS
  PRODUCT_HEALTH
  COMPANY_RATING
  MESSAGE
}

enum EventAttention {
  NEEDS_ATTENTION
  MAY_NEED_ATTENTION
}

type EventCount {
  Launch: Int!
  notes: Int!
  userEvents: Int!
  childEvents: Int!
}

input LaunchWhereInput {
  AND: [LaunchWhereInput!]
  OR: [LaunchWhereInput!]
  NOT: [LaunchWhereInput!]
  id: IntFilter
  createdAt: DateTimeFilter
  companyId: IntFilter
  eventId: IntNullableFilter
  messageTemplateId: IntNullableFilter
  sendToAddress: StringNullableFilter
  subject: StringFilter
  text: StringFilter
  company: CompanyRelationFilter
  events: EventRelationFilter
  messageTempate: MessageTemplateRelationFilter
  launchContacts: LaunchContactsListRelationFilter
  delta: JsonNullableFilter
  Customer: CustomerRelationFilter
  customerId: IntNullableFilter
}

input IntFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: NestedIntFilter
}

input NestedIntFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: NestedIntFilter
}

input DateTimeFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: NestedDateTimeFilter
}

input NestedDateTimeFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: NestedDateTimeFilter
}

input IntNullableFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: NestedIntNullableFilter
}

input NestedIntNullableFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: NestedIntNullableFilter
}

input StringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringNullableFilter
}

enum QueryMode {
  default
  insensitive
}

input NestedStringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringNullableFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringFilter
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input CompanyRelationFilter {
  is: CompanyWhereInput
  isNot: CompanyWhereInput
}

input CompanyWhereInput {
  AND: [CompanyWhereInput!]
  OR: [CompanyWhereInput!]
  NOT: [CompanyWhereInput!]
  id: IntFilter
  leadSourceId: IntNullableFilter
  annualRecurringRevenue: IntNullableFilter
  customerId: IntFilter
  customer: CustomerRelationFilter
  expectedToCloseAt: DateTimeNullableFilter
  fiscalYearStartMonth: IntNullableFilter
  name: StringFilter
  companyType: EnumCompanyTypeFilter
  primaryContactId: IntNullableFilter
  seatSize: IntNullableFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  fiscalYear: IntFilter
  leadSource: UserRelationFilter
  parentId: IntNullableFilter
  companyParent: CompanyRelationFilter
  primaryContact: UserRelationFilter
  references: ReferenceListRelationFilter
  referencesServedFor: ReferenceListRelationFilter
  subsidiary: CompanyListRelationFilter
  starredBy: CompanyStarredListRelationFilter
  events: EventListRelationFilter
  notes: NoteListRelationFilter
  accountId: IntFilter
  account: AccountRelationFilter
  competitors: CompetitorListRelationFilter
  products: ProductListRelationFilter
  contacts: ContactsListRelationFilter
  renewalDate: DateTimeNullableFilter
  UserCompanyRatings: UserCompanyRatingsListRelationFilter
  referredOn: DateTimeNullableFilter
  latestReferenceId: IntNullableFilter
  listCompanies: ListCompanyListRelationFilter
  Launch: LaunchListRelationFilter
}

input CustomerRelationFilter {
  is: CustomerWhereInput
  isNot: CustomerWhereInput
}

input CustomerWhereInput {
  AND: [CustomerWhereInput!]
  OR: [CustomerWhereInput!]
  NOT: [CustomerWhereInput!]
  id: IntFilter
  name: StringFilter
  type: EnumCustomerTypeFilter
  favoritedAt: DateTimeNullableFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  launch: LaunchListRelationFilter
  companies: CompanyListRelationFilter
  integrations: CustomerIntegrationListRelationFilter
  events: EventListRelationFilter
  externalGroups: ExternalGroupListRelationFilter
  externalUsers: ExternalUserListRelationFilter
  groups: GroupListRelationFilter
  notes: NoteListRelationFilter
  roles: RoleListRelationFilter
  salesLeads: SalesLeadListRelationFilter
  syncEvents: SyncEventListRelationFilter
  users: UserListRelationFilter
  messageTemplate: MessageTemplateListRelationFilter
  dynamicFields: DynamicUserFieldsListRelationFilter
  lists: ListListRelationFilter
  useCaseCollections: UseCaseCollectionsListRelationFilter
  customerDataSources: DataSourcesOnCustomerListRelationFilter
  dataObjectCollections: DataObjectCollectionsListRelationFilter
  oktaClientId: StringNullableFilter
  oktaDomain: StringNullableFilter
  oktaClientSecret: StringNullableFilter
  oktaApiKey: StringNullableFilter
}

input EnumCustomerTypeFilter {
  equals: CustomerType
  in: [CustomerType!]
  notIn: [CustomerType!]
  not: NestedEnumCustomerTypeFilter
}

input NestedEnumCustomerTypeFilter {
  equals: CustomerType
  in: [CustomerType!]
  notIn: [CustomerType!]
  not: NestedEnumCustomerTypeFilter
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: NestedDateTimeNullableFilter
}

input NestedDateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: NestedDateTimeNullableFilter
}

input LaunchListRelationFilter {
  every: LaunchWhereInput
  some: LaunchWhereInput
  none: LaunchWhereInput
}

input CompanyListRelationFilter {
  every: CompanyWhereInput
  some: CompanyWhereInput
  none: CompanyWhereInput
}

input CustomerIntegrationListRelationFilter {
  every: CustomerIntegrationWhereInput
  some: CustomerIntegrationWhereInput
  none: CustomerIntegrationWhereInput
}

input CustomerIntegrationWhereInput {
  AND: [CustomerIntegrationWhereInput!]
  OR: [CustomerIntegrationWhereInput!]
  NOT: [CustomerIntegrationWhereInput!]
  id: IntFilter
  customerId: IntFilter
  refreshToken: StringNullableFilter
  token: StringFilter
  type: EnumCustomerIntegrationTypeFilter
  url: StringNullableFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  customer: CustomerRelationFilter
}

input EnumCustomerIntegrationTypeFilter {
  equals: CustomerIntegrationType
  in: [CustomerIntegrationType!]
  notIn: [CustomerIntegrationType!]
  not: NestedEnumCustomerIntegrationTypeFilter
}

enum CustomerIntegrationType {
  SALESFORCE
}

input NestedEnumCustomerIntegrationTypeFilter {
  equals: CustomerIntegrationType
  in: [CustomerIntegrationType!]
  notIn: [CustomerIntegrationType!]
  not: NestedEnumCustomerIntegrationTypeFilter
}

input EventListRelationFilter {
  every: EventWhereInput
  some: EventWhereInput
  none: EventWhereInput
}

input EventWhereInput {
  AND: [EventWhereInput!]
  OR: [EventWhereInput!]
  NOT: [EventWhereInput!]
  id: IntFilter
  customerId: IntFilter
  data: JsonNullableFilter
  notifiedAt: DateTimeNullableFilter
  text: StringNullableFilter
  type: EnumEventTypeFilter
  companyId: IntNullableFilter
  needsAttention: EnumEventAttentionNullableFilter
  createdAt: DateTimeFilter
  company: CompanyRelationFilter
  customer: CustomerRelationFilter
  Launch: LaunchListRelationFilter
  notes: NoteListRelationFilter
  userEvents: UserEventsListRelationFilter
  parentEventId: IntNullableFilter
  parentEvent: EventRelationFilter
  childEvents: EventListRelationFilter
  messageId: IntNullableFilter
  message: NoteRelationFilter
}

input JsonNullableFilter {
  equals: JSON
  lt: JSON
  lte: JSON
  gt: JSON
  gte: JSON
  path: [String!]
  string_contains: String
  string_starts_with: String
  string_ends_with: String
  array_contains: JSON
  array_starts_with: JSON
  array_ends_with: JSON
  not: JSON
}

input EnumEventTypeFilter {
  equals: EventType
  in: [EventType!]
  notIn: [EventType!]
  not: NestedEnumEventTypeFilter
}

input NestedEnumEventTypeFilter {
  equals: EventType
  in: [EventType!]
  notIn: [EventType!]
  not: NestedEnumEventTypeFilter
}

input EnumEventAttentionNullableFilter {
  equals: EventAttention
  in: [EventAttention!]
  notIn: [EventAttention!]
  not: NestedEnumEventAttentionNullableFilter
}

input NestedEnumEventAttentionNullableFilter {
  equals: EventAttention
  in: [EventAttention!]
  notIn: [EventAttention!]
  not: NestedEnumEventAttentionNullableFilter
}

input NoteListRelationFilter {
  every: NoteWhereInput
  some: NoteWhereInput
  none: NoteWhereInput
}

input NoteWhereInput {
  AND: [NoteWhereInput!]
  OR: [NoteWhereInput!]
  NOT: [NoteWhereInput!]
  id: IntFilter
  customerId: IntNullableFilter
  eventId: IntNullableFilter
  readAt: DateTimeNullableFilter
  flaggedAt: DateTimeNullableFilter
  subject: StringFilter
  text: StringFilter
  companyId: IntNullableFilter
  createdBy: IntNullableFilter
  allCanView: BoolFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  company: CompanyRelationFilter
  customer: CustomerRelationFilter
  events: EventRelationFilter
  user: UserRelationFilter
  delta: JsonNullableFilter
  noteUserTags: NoteUserTagsListRelationFilter
  noteGroupTags: NoteGroupTagsListRelationFilter
  Event: EventListRelationFilter
}

input BoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

input NestedBoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

input EventRelationFilter {
  is: EventWhereInput
  isNot: EventWhereInput
}

input UserRelationFilter {
  is: UserWhereInput
  isNot: UserWhereInput
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IntFilter
  admin: BoolFilter
  customerId: IntFilter
  email: StringFilter
  name: StringFilter
  passwordHash: StringNullableFilter
  passwordSalt: StringNullableFilter
  workPhone: StringNullableFilter
  mobilePhone: StringNullableFilter
  title: StringNullableFilter
  token: StringNullableFilter
  notificationSettings: JsonNullableFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  customer: CustomerRelationFilter
  leadSourceFor: CompanyListRelationFilter
  primaryContactFor: CompanyListRelationFilter
  starred: CompanyStarredListRelationFilter
  externalUser: ExternalUserListRelationFilter
  groups: GroupUserListRelationFilter
  Note: NoteListRelationFilter
  roles: UserRoleListRelationFilter
  userEvents: UserEventsListRelationFilter
  UserCompanyRatings: UserCompanyRatingsListRelationFilter
  noteUserTags: NoteUserTagsListRelationFilter
  messageTemplate: MessageTemplateListRelationFilter
  dynamicFields: JsonNullableFilter
  Feedback: FeedbackListRelationFilter
  active: BoolFilter
  references: ReferenceListRelationFilter
  oktaUserId: IntNullableFilter
  oktaManagerId: IntNullableFilter
  forgetPassword: StringNullableFilter
  userManager: UserManagerListRelationFilter
  userReportee: UserManagerListRelationFilter
  csmStatus: BoolFilter
  crmStatus: BoolFilter
}

input CompanyStarredListRelationFilter {
  every: CompanyStarredWhereInput
  some: CompanyStarredWhereInput
  none: CompanyStarredWhereInput
}

input CompanyStarredWhereInput {
  AND: [CompanyStarredWhereInput!]
  OR: [CompanyStarredWhereInput!]
  NOT: [CompanyStarredWhereInput!]
  dummy: IntNullableFilter
  createdAt: DateTimeFilter
  companyId: IntFilter
  userId: IntFilter
  company: CompanyRelationFilter
  user: UserRelationFilter
}

input ExternalUserListRelationFilter {
  every: ExternalUserWhereInput
  some: ExternalUserWhereInput
  none: ExternalUserWhereInput
}

input ExternalUserWhereInput {
  AND: [ExternalUserWhereInput!]
  OR: [ExternalUserWhereInput!]
  NOT: [ExternalUserWhereInput!]
  customerId: IntFilter
  department: StringNullableFilter
  division: StringNullableFilter
  email: StringNullableFilter
  employeeNumber: StringNullableFilter
  externalId: StringFilter
  name: StringNullableFilter
  source: EnumCustomerIntegrationTypeFilter
  userId: IntNullableFilter
  title: StringNullableFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  customer: CustomerRelationFilter
  user: UserRelationFilter
  externalGroups: ExternalGroupMemberListRelationFilter
}

input ExternalGroupMemberListRelationFilter {
  every: ExternalGroupMemberWhereInput
  some: ExternalGroupMemberWhereInput
  none: ExternalGroupMemberWhereInput
}

input ExternalGroupMemberWhereInput {
  AND: [ExternalGroupMemberWhereInput!]
  OR: [ExternalGroupMemberWhereInput!]
  NOT: [ExternalGroupMemberWhereInput!]
  customerId: IntFilter
  groupId: StringFilter
  source: EnumCustomerIntegrationTypeFilter
  userId: StringFilter
  createdAt: DateTimeFilter
  group: ExternalGroupRelationFilter
  user: ExternalUserRelationFilter
}

input ExternalGroupRelationFilter {
  is: ExternalGroupWhereInput
  isNot: ExternalGroupWhereInput
}

input ExternalGroupWhereInput {
  AND: [ExternalGroupWhereInput!]
  OR: [ExternalGroupWhereInput!]
  NOT: [ExternalGroupWhereInput!]
  customerId: IntFilter
  externalId: StringFilter
  developerName: StringFilter
  name: StringNullableFilter
  ownerId: StringNullableFilter
  source: EnumCustomerIntegrationTypeFilter
  type: StringNullableFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  customer: CustomerRelationFilter
  members: ExternalGroupMemberListRelationFilter
}

input ExternalUserRelationFilter {
  is: ExternalUserWhereInput
  isNot: ExternalUserWhereInput
}

input GroupUserListRelationFilter {
  every: GroupUserWhereInput
  some: GroupUserWhereInput
  none: GroupUserWhereInput
}

input GroupUserWhereInput {
  AND: [GroupUserWhereInput!]
  OR: [GroupUserWhereInput!]
  NOT: [GroupUserWhereInput!]
  dummy: IntNullableFilter
  groupId: IntFilter
  userId: IntFilter
  group: GroupRelationFilter
  user: UserRelationFilter
}

input GroupRelationFilter {
  is: GroupWhereInput
  isNot: GroupWhereInput
}

input GroupWhereInput {
  AND: [GroupWhereInput!]
  OR: [GroupWhereInput!]
  NOT: [GroupWhereInput!]
  id: IntFilter
  customerId: IntFilter
  name: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  customer: CustomerRelationFilter
  users: GroupUserListRelationFilter
  parentId: IntNullableFilter
  parent: GroupRelationFilter
  children: GroupListRelationFilter
  noteGroupTags: NoteGroupTagsListRelationFilter
}

input GroupListRelationFilter {
  every: GroupWhereInput
  some: GroupWhereInput
  none: GroupWhereInput
}

input NoteGroupTagsListRelationFilter {
  every: NoteGroupTagsWhereInput
  some: NoteGroupTagsWhereInput
  none: NoteGroupTagsWhereInput
}

input NoteGroupTagsWhereInput {
  AND: [NoteGroupTagsWhereInput!]
  OR: [NoteGroupTagsWhereInput!]
  NOT: [NoteGroupTagsWhereInput!]
  noteId: IntFilter
  note: NoteRelationFilter
  groupId: IntFilter
  group: GroupRelationFilter
  createdAt: DateTimeFilter
}

input NoteRelationFilter {
  is: NoteWhereInput
  isNot: NoteWhereInput
}

input UserRoleListRelationFilter {
  every: UserRoleWhereInput
  some: UserRoleWhereInput
  none: UserRoleWhereInput
}

input UserRoleWhereInput {
  AND: [UserRoleWhereInput!]
  OR: [UserRoleWhereInput!]
  NOT: [UserRoleWhereInput!]
  id: IntFilter
  roleId: IntFilter
  userId: IntFilter
  role: RoleRelationFilter
  user: UserRelationFilter
  createdAt: DateTimeFilter
}

input RoleRelationFilter {
  is: RoleWhereInput
  isNot: RoleWhereInput
}

input RoleWhereInput {
  AND: [RoleWhereInput!]
  OR: [RoleWhereInput!]
  NOT: [RoleWhereInput!]
  id: IntFilter
  name: StringFilter
  capabilities: IntNullableListFilter
  customerId: IntFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  customer: CustomerRelationFilter
  userRoles: UserRoleListRelationFilter
}

input IntNullableListFilter {
  equals: [Int!]
  has: Int
  hasEvery: [Int!]
  hasSome: [Int!]
  isEmpty: Boolean
}

input UserEventsListRelationFilter {
  every: UserEventsWhereInput
  some: UserEventsWhereInput
  none: UserEventsWhereInput
}

input UserEventsWhereInput {
  AND: [UserEventsWhereInput!]
  OR: [UserEventsWhereInput!]
  NOT: [UserEventsWhereInput!]
  id: IntFilter
  userId: IntFilter
  user: UserRelationFilter
  readAt: DateTimeNullableFilter
  flaggedAt: IntNullableFilter
  hideAt: DateTimeNullableFilter
  eventId: IntFilter
  event: EventRelationFilter
  createdAt: DateTimeFilter
}

input UserCompanyRatingsListRelationFilter {
  every: UserCompanyRatingsWhereInput
  some: UserCompanyRatingsWhereInput
  none: UserCompanyRatingsWhereInput
}

input UserCompanyRatingsWhereInput {
  AND: [UserCompanyRatingsWhereInput!]
  OR: [UserCompanyRatingsWhereInput!]
  NOT: [UserCompanyRatingsWhereInput!]
  id: IntFilter
  user: UserRelationFilter
  userId: IntFilter
  rating: RatingRelationFilter
  ratingId: IntFilter
  company: CompanyRelationFilter
  companyId: IntFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
}

input RatingRelationFilter {
  is: RatingWhereInput
  isNot: RatingWhereInput
}

input RatingWhereInput {
  AND: [RatingWhereInput!]
  OR: [RatingWhereInput!]
  NOT: [RatingWhereInput!]
  id: IntFilter
  status: EnumRatingStatusFilter
  userratingcompany: UserCompanyRatingsListRelationFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
}

input EnumRatingStatusFilter {
  equals: RatingStatus
  in: [RatingStatus!]
  notIn: [RatingStatus!]
  not: NestedEnumRatingStatusFilter
}

enum RatingStatus {
  HAPPY
  UNHAPPY
  NEUTRAL
}

input NestedEnumRatingStatusFilter {
  equals: RatingStatus
  in: [RatingStatus!]
  notIn: [RatingStatus!]
  not: NestedEnumRatingStatusFilter
}

input NoteUserTagsListRelationFilter {
  every: NoteUserTagsWhereInput
  some: NoteUserTagsWhereInput
  none: NoteUserTagsWhereInput
}

input NoteUserTagsWhereInput {
  AND: [NoteUserTagsWhereInput!]
  OR: [NoteUserTagsWhereInput!]
  NOT: [NoteUserTagsWhereInput!]
  noteId: IntFilter
  note: NoteRelationFilter
  userId: IntFilter
  user: UserRelationFilter
  createdAt: DateTimeFilter
}

input MessageTemplateListRelationFilter {
  every: MessageTemplateWhereInput
  some: MessageTemplateWhereInput
  none: MessageTemplateWhereInput
}

input MessageTemplateWhereInput {
  AND: [MessageTemplateWhereInput!]
  OR: [MessageTemplateWhereInput!]
  NOT: [MessageTemplateWhereInput!]
  id: IntFilter
  eventType: EnumEventTypeFilter
  companyType: EnumCompanyTypeFilter
  messageType: EnumMessageTypeFilter
  sendToAddress: StringNullableFilter
  title: StringNullableFilter
  subject: StringFilter
  text: StringFilter
  customerId: IntFilter
  customer: CustomerRelationFilter
  userId: IntFilter
  user: UserRelationFilter
  launch: LaunchListRelationFilter
  delta: JsonNullableFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeNullableFilter
}

input EnumCompanyTypeFilter {
  equals: CompanyType
  in: [CompanyType!]
  notIn: [CompanyType!]
  not: NestedEnumCompanyTypeFilter
}

input NestedEnumCompanyTypeFilter {
  equals: CompanyType
  in: [CompanyType!]
  notIn: [CompanyType!]
  not: NestedEnumCompanyTypeFilter
}

input EnumMessageTypeFilter {
  equals: MessageType
  in: [MessageType!]
  notIn: [MessageType!]
  not: NestedEnumMessageTypeFilter
}

enum MessageType {
  EMAIL
  INMAIL
  SMS
  SLACK
}

input NestedEnumMessageTypeFilter {
  equals: MessageType
  in: [MessageType!]
  notIn: [MessageType!]
  not: NestedEnumMessageTypeFilter
}

input FeedbackListRelationFilter {
  every: FeedbackWhereInput
  some: FeedbackWhereInput
  none: FeedbackWhereInput
}

input FeedbackWhereInput {
  AND: [FeedbackWhereInput!]
  OR: [FeedbackWhereInput!]
  NOT: [FeedbackWhereInput!]
  feedbackId: IntFilter
  feedbackValue: FloatFilter
  feedback: StringFilter
  userId: IntFilter
  user: UserRelationFilter
}

input FloatFilter {
  equals: Float
  in: [Float!]
  notIn: [Float!]
  lt: Float
  lte: Float
  gt: Float
  gte: Float
  not: NestedFloatFilter
}

input NestedFloatFilter {
  equals: Float
  in: [Float!]
  notIn: [Float!]
  lt: Float
  lte: Float
  gt: Float
  gte: Float
  not: NestedFloatFilter
}

input ReferenceListRelationFilter {
  every: ReferenceWhereInput
  some: ReferenceWhereInput
  none: ReferenceWhereInput
}

input ReferenceWhereInput {
  AND: [ReferenceWhereInput!]
  OR: [ReferenceWhereInput!]
  NOT: [ReferenceWhereInput!]
  id: IntFilter
  companyId: IntFilter
  offeredTo: BoolFilter
  servedAsReferenceBefore: BoolFilter
  servedAsReferenceForId: IntNullableFilter
  servedAsReferenceAt: DateTimeNullableFilter
  notes: StringNullableFilter
  company: CompanyRelationFilter
  servedAsReferenceFor: CompanyRelationFilter
  dealClosed: BoolNullableFilter
  offerOptions: ReferenceOnOfferOptionsListRelationFilter
  createdAt: DateTimeFilter
  userId: IntFilter
  user: UserRelationFilter
}

input BoolNullableFilter {
  equals: Boolean
  not: NestedBoolNullableFilter
}

input NestedBoolNullableFilter {
  equals: Boolean
  not: NestedBoolNullableFilter
}

input ReferenceOnOfferOptionsListRelationFilter {
  every: ReferenceOnOfferOptionsWhereInput
  some: ReferenceOnOfferOptionsWhereInput
  none: ReferenceOnOfferOptionsWhereInput
}

input ReferenceOnOfferOptionsWhereInput {
  AND: [ReferenceOnOfferOptionsWhereInput!]
  OR: [ReferenceOnOfferOptionsWhereInput!]
  NOT: [ReferenceOnOfferOptionsWhereInput!]
  createdAt: DateTimeFilter
  reference: ReferenceRelationFilter
  referenceId: IntFilter
  offerOption: OfferOptionRelationFilter
  offerOptionId: IntFilter
}

input ReferenceRelationFilter {
  is: ReferenceWhereInput
  isNot: ReferenceWhereInput
}

input OfferOptionRelationFilter {
  is: OfferOptionWhereInput
  isNot: OfferOptionWhereInput
}

input OfferOptionWhereInput {
  AND: [OfferOptionWhereInput!]
  OR: [OfferOptionWhereInput!]
  NOT: [OfferOptionWhereInput!]
  id: IntFilter
  offerType: StringFilter
  status: BoolFilter
  references: ReferenceOnOfferOptionsListRelationFilter
}

input UserManagerListRelationFilter {
  every: UserManagerWhereInput
  some: UserManagerWhereInput
  none: UserManagerWhereInput
}

input UserManagerWhereInput {
  AND: [UserManagerWhereInput!]
  OR: [UserManagerWhereInput!]
  NOT: [UserManagerWhereInput!]
  id: IntFilter
  userId: IntFilter
  managerId: IntFilter
  createdAt: DateTimeFilter
  user: UserRelationFilter
  manager: UserRelationFilter
}

input ExternalGroupListRelationFilter {
  every: ExternalGroupWhereInput
  some: ExternalGroupWhereInput
  none: ExternalGroupWhereInput
}

input RoleListRelationFilter {
  every: RoleWhereInput
  some: RoleWhereInput
  none: RoleWhereInput
}

input SalesLeadListRelationFilter {
  every: SalesLeadWhereInput
  some: SalesLeadWhereInput
  none: SalesLeadWhereInput
}

input SalesLeadWhereInput {
  AND: [SalesLeadWhereInput!]
  OR: [SalesLeadWhereInput!]
  NOT: [SalesLeadWhereInput!]
  id: IntFilter
  company: StringFilter
  customerId: IntFilter
  description: StringNullableFilter
  email: StringNullableFilter
  name: StringFilter
  processedAt: DateTimeNullableFilter
  source: StringFilter
  status: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  customer: CustomerRelationFilter
}

input SyncEventListRelationFilter {
  every: SyncEventWhereInput
  some: SyncEventWhereInput
  none: SyncEventWhereInput
}

input SyncEventWhereInput {
  AND: [SyncEventWhereInput!]
  OR: [SyncEventWhereInput!]
  NOT: [SyncEventWhereInput!]
  id: IntFilter
  completedAt: DateTimeNullableFilter
  customerId: IntFilter
  entityType: EnumSyncEventEntityTypeFilter
  recordsCreated: IntFilter
  recordsDeleted: IntFilter
  recordsUpdated: IntFilter
  replayId: StringNullableFilter
  startedAt: DateTimeFilter
  type: EnumSyncEventTypeFilter
  customer: CustomerRelationFilter
}

input EnumSyncEventEntityTypeFilter {
  equals: SyncEventEntityType
  in: [SyncEventEntityType!]
  notIn: [SyncEventEntityType!]
  not: NestedEnumSyncEventEntityTypeFilter
}

enum SyncEventEntityType {
  CUSTOMERS
  GROUPS
  GROUP_MEMBERS
  LEADS
  USERS
}

input NestedEnumSyncEventEntityTypeFilter {
  equals: SyncEventEntityType
  in: [SyncEventEntityType!]
  notIn: [SyncEventEntityType!]
  not: NestedEnumSyncEventEntityTypeFilter
}

input EnumSyncEventTypeFilter {
  equals: SyncEventType
  in: [SyncEventType!]
  notIn: [SyncEventType!]
  not: NestedEnumSyncEventTypeFilter
}

enum SyncEventType {
  CAPTURE
  PULL
}

input NestedEnumSyncEventTypeFilter {
  equals: SyncEventType
  in: [SyncEventType!]
  notIn: [SyncEventType!]
  not: NestedEnumSyncEventTypeFilter
}

input UserListRelationFilter {
  every: UserWhereInput
  some: UserWhereInput
  none: UserWhereInput
}

input DynamicUserFieldsListRelationFilter {
  every: DynamicUserFieldsWhereInput
  some: DynamicUserFieldsWhereInput
  none: DynamicUserFieldsWhereInput
}

input DynamicUserFieldsWhereInput {
  AND: [DynamicUserFieldsWhereInput!]
  OR: [DynamicUserFieldsWhereInput!]
  NOT: [DynamicUserFieldsWhereInput!]
  id: IntFilter
  fieldName: StringFilter
  fieldLabel: StringFilter
  fieldType: EnumFieldTypesNullableFilter
  display: BoolFilter
  allowedValues: JsonNullableFilter
  isDefault: BoolFilter
  customerId: IntFilter
  customer: CustomerRelationFilter
  order: IntNullableFilter
}

input EnumFieldTypesNullableFilter {
  equals: FieldTypes
  in: [FieldTypes!]
  notIn: [FieldTypes!]
  not: NestedEnumFieldTypesNullableFilter
}

enum FieldTypes {
  INPUT
  SELECT
}

input NestedEnumFieldTypesNullableFilter {
  equals: FieldTypes
  in: [FieldTypes!]
  notIn: [FieldTypes!]
  not: NestedEnumFieldTypesNullableFilter
}

input ListListRelationFilter {
  every: ListWhereInput
  some: ListWhereInput
  none: ListWhereInput
}

input ListWhereInput {
  AND: [ListWhereInput!]
  OR: [ListWhereInput!]
  NOT: [ListWhereInput!]
  id: IntFilter
  customerId: IntFilter
  name: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  customer: CustomerRelationFilter
  listCompanies: ListCompanyListRelationFilter
  parentId: IntNullableFilter
  parent: ListRelationFilter
  children: ListListRelationFilter
}

input ListCompanyListRelationFilter {
  every: ListCompanyWhereInput
  some: ListCompanyWhereInput
  none: ListCompanyWhereInput
}

input ListCompanyWhereInput {
  AND: [ListCompanyWhereInput!]
  OR: [ListCompanyWhereInput!]
  NOT: [ListCompanyWhereInput!]
  id: IntFilter
  listId: IntFilter
  list: ListRelationFilter
  companyId: IntFilter
  company: CompanyRelationFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
}

input ListRelationFilter {
  is: ListWhereInput
  isNot: ListWhereInput
}

input UseCaseCollectionsListRelationFilter {
  every: UseCaseCollectionsWhereInput
  some: UseCaseCollectionsWhereInput
  none: UseCaseCollectionsWhereInput
}

input UseCaseCollectionsWhereInput {
  AND: [UseCaseCollectionsWhereInput!]
  OR: [UseCaseCollectionsWhereInput!]
  NOT: [UseCaseCollectionsWhereInput!]
  id: IntFilter
  name: StringFilter
  customerId: IntFilter
  customer: CustomerRelationFilter
  default: BoolFilter
  useCasesOnCollections: UseCasesOnCollectionsListRelationFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeNullableFilter
}

input UseCasesOnCollectionsListRelationFilter {
  every: UseCasesOnCollectionsWhereInput
  some: UseCasesOnCollectionsWhereInput
  none: UseCasesOnCollectionsWhereInput
}

input UseCasesOnCollectionsWhereInput {
  AND: [UseCasesOnCollectionsWhereInput!]
  OR: [UseCasesOnCollectionsWhereInput!]
  NOT: [UseCasesOnCollectionsWhereInput!]
  id: IntFilter
  status: BoolFilter
  useCaseId: IntFilter
  useCase: UseCasesRelationFilter
  collectionId: IntFilter
  collection: UseCaseCollectionsRelationFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeNullableFilter
}

input UseCasesRelationFilter {
  is: UseCasesWhereInput
  isNot: UseCasesWhereInput
}

input UseCasesWhereInput {
  AND: [UseCasesWhereInput!]
  OR: [UseCasesWhereInput!]
  NOT: [UseCasesWhereInput!]
  id: IntFilter
  name: StringFilter
  displayName: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeNullableFilter
  useCasesOnCollections: UseCasesOnCollectionsListRelationFilter
}

input UseCaseCollectionsRelationFilter {
  is: UseCaseCollectionsWhereInput
  isNot: UseCaseCollectionsWhereInput
}

input DataSourcesOnCustomerListRelationFilter {
  every: DataSourcesOnCustomerWhereInput
  some: DataSourcesOnCustomerWhereInput
  none: DataSourcesOnCustomerWhereInput
}

input DataSourcesOnCustomerWhereInput {
  AND: [DataSourcesOnCustomerWhereInput!]
  OR: [DataSourcesOnCustomerWhereInput!]
  NOT: [DataSourcesOnCustomerWhereInput!]
  id: IntFilter
  status: BoolFilter
  dataSourceId: IntFilter
  dataSource: DataSourcesRelationFilter
  customerId: IntFilter
  customer: CustomerRelationFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeNullableFilter
}

input DataSourcesRelationFilter {
  is: DataSourcesWhereInput
  isNot: DataSourcesWhereInput
}

input DataSourcesWhereInput {
  AND: [DataSourcesWhereInput!]
  OR: [DataSourcesWhereInput!]
  NOT: [DataSourcesWhereInput!]
  id: IntFilter
  name: StringFilter
  icon: StringNullableFilter
  dataObjects: CustomerDataObjectsListRelationFilter
  sourceType: EnumSourceTypesFilter
  createdAt: DateTimeFilter
  customerDataSources: DataSourcesOnCustomerListRelationFilter
}

input CustomerDataObjectsListRelationFilter {
  every: CustomerDataObjectsWhereInput
  some: CustomerDataObjectsWhereInput
  none: CustomerDataObjectsWhereInput
}

input CustomerDataObjectsWhereInput {
  AND: [CustomerDataObjectsWhereInput!]
  OR: [CustomerDataObjectsWhereInput!]
  NOT: [CustomerDataObjectsWhereInput!]
  id: IntFilter
  name: StringFilter
  displayName: StringFilter
  dataSourceId: IntFilter
  dataSource: DataSourcesRelationFilter
  dataObjectCollectionOnDataObject: DataObjectCollectionOnDataObjectListRelationFilter
  createdAt: DateTimeFilter
}

input DataObjectCollectionOnDataObjectListRelationFilter {
  every: DataObjectCollectionOnDataObjectWhereInput
  some: DataObjectCollectionOnDataObjectWhereInput
  none: DataObjectCollectionOnDataObjectWhereInput
}

input DataObjectCollectionOnDataObjectWhereInput {
  AND: [DataObjectCollectionOnDataObjectWhereInput!]
  OR: [DataObjectCollectionOnDataObjectWhereInput!]
  NOT: [DataObjectCollectionOnDataObjectWhereInput!]
  id: IntFilter
  dataObjectCollections: DataObjectCollectionsRelationFilter
  dataObjectCollectionId: IntFilter
  status: BoolFilter
  dataObjectId: IntFilter
  dataObject: CustomerDataObjectsRelationFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeNullableFilter
}

input DataObjectCollectionsRelationFilter {
  is: DataObjectCollectionsWhereInput
  isNot: DataObjectCollectionsWhereInput
}

input DataObjectCollectionsWhereInput {
  AND: [DataObjectCollectionsWhereInput!]
  OR: [DataObjectCollectionsWhereInput!]
  NOT: [DataObjectCollectionsWhereInput!]
  id: IntFilter
  name: StringFilter
  dataObjectCollectionOnDataObject: DataObjectCollectionOnDataObjectListRelationFilter
  customerId: IntFilter
  customer: CustomerRelationFilter
  default: BoolFilter
  isAllAccess: BoolFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeNullableFilter
}

input CustomerDataObjectsRelationFilter {
  is: CustomerDataObjectsWhereInput
  isNot: CustomerDataObjectsWhereInput
}

input EnumSourceTypesFilter {
  equals: SourceTypes
  in: [SourceTypes!]
  notIn: [SourceTypes!]
  not: NestedEnumSourceTypesFilter
}

enum SourceTypes {
  CRM
  CSM
}

input NestedEnumSourceTypesFilter {
  equals: SourceTypes
  in: [SourceTypes!]
  notIn: [SourceTypes!]
  not: NestedEnumSourceTypesFilter
}

input DataObjectCollectionsListRelationFilter {
  every: DataObjectCollectionsWhereInput
  some: DataObjectCollectionsWhereInput
  none: DataObjectCollectionsWhereInput
}

input AccountRelationFilter {
  is: AccountWhereInput
  isNot: AccountWhereInput
}

input AccountWhereInput {
  AND: [AccountWhereInput!]
  OR: [AccountWhereInput!]
  NOT: [AccountWhereInput!]
  id: IntFilter
  accountName: StringFilter
  AccountUUID: StringFilter
  company: CompanyListRelationFilter
}

input CompetitorListRelationFilter {
  every: CompetitorWhereInput
  some: CompetitorWhereInput
  none: CompetitorWhereInput
}

input CompetitorWhereInput {
  AND: [CompetitorWhereInput!]
  OR: [CompetitorWhereInput!]
  NOT: [CompetitorWhereInput!]
  id: IntFilter
  name: StringFilter
  createdAt: DateTimeFilter
  Company: CompanyRelationFilter
  companyId: IntNullableFilter
}

input ProductListRelationFilter {
  every: ProductWhereInput
  some: ProductWhereInput
  none: ProductWhereInput
}

input ProductWhereInput {
  AND: [ProductWhereInput!]
  OR: [ProductWhereInput!]
  NOT: [ProductWhereInput!]
  id: IntFilter
  name: StringFilter
  orderStartDate: DateTimeFilter
  orderEndDate: DateTimeFilter
  orderTerms: IntFilter
  monthlyUnitPrice: IntFilter
  quantity: IntFilter
  totalPrice: IntFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  Company: CompanyRelationFilter
  companyId: IntFilter
}

input ContactsListRelationFilter {
  every: ContactsWhereInput
  some: ContactsWhereInput
  none: ContactsWhereInput
}

input ContactsWhereInput {
  AND: [ContactsWhereInput!]
  OR: [ContactsWhereInput!]
  NOT: [ContactsWhereInput!]
  id: IntFilter
  email: StringFilter
  name: StringFilter
  workPhone: StringNullableFilter
  mobilePhone: StringNullableFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  primary: BoolFilter
  image: StringNullableFilter
  companyId: IntNullableFilter
  company: CompanyRelationFilter
  launchContacts: LaunchContactsListRelationFilter
}

input LaunchContactsListRelationFilter {
  every: LaunchContactsWhereInput
  some: LaunchContactsWhereInput
  none: LaunchContactsWhereInput
}

input LaunchContactsWhereInput {
  AND: [LaunchContactsWhereInput!]
  OR: [LaunchContactsWhereInput!]
  NOT: [LaunchContactsWhereInput!]
  id: IntFilter
  launchId: IntFilter
  launch: LaunchRelationFilter
  contactId: IntFilter
  contact: ContactsRelationFilter
  createdAt: DateTimeFilter
}

input LaunchRelationFilter {
  is: LaunchWhereInput
  isNot: LaunchWhereInput
}

input ContactsRelationFilter {
  is: ContactsWhereInput
  isNot: ContactsWhereInput
}

input MessageTemplateRelationFilter {
  is: MessageTemplateWhereInput
  isNot: MessageTemplateWhereInput
}

input LaunchOrderByWithRelationInput {
  id: SortOrder
  createdAt: SortOrder
  companyId: SortOrder
  eventId: SortOrder
  messageTemplateId: SortOrder
  sendToAddress: SortOrder
  subject: SortOrder
  text: SortOrder
  company: CompanyOrderByWithRelationInput
  events: EventOrderByWithRelationInput
  messageTempate: MessageTemplateOrderByWithRelationInput
  launchContacts: LaunchContactsOrderByRelationAggregateInput
  delta: SortOrder
  Customer: CustomerOrderByWithRelationInput
  customerId: SortOrder
}

enum SortOrder {
  asc
  desc
}

input CompanyOrderByWithRelationInput {
  id: SortOrder
  leadSourceId: SortOrder
  annualRecurringRevenue: SortOrder
  customerId: SortOrder
  customer: CustomerOrderByWithRelationInput
  expectedToCloseAt: SortOrder
  fiscalYearStartMonth: SortOrder
  name: SortOrder
  companyType: SortOrder
  primaryContactId: SortOrder
  seatSize: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  fiscalYear: SortOrder
  leadSource: UserOrderByWithRelationInput
  parentId: SortOrder
  companyParent: CompanyOrderByWithRelationInput
  primaryContact: UserOrderByWithRelationInput
  references: ReferenceOrderByRelationAggregateInput
  referencesServedFor: ReferenceOrderByRelationAggregateInput
  subsidiary: CompanyOrderByRelationAggregateInput
  starredBy: CompanyStarredOrderByRelationAggregateInput
  events: EventOrderByRelationAggregateInput
  notes: NoteOrderByRelationAggregateInput
  accountId: SortOrder
  account: AccountOrderByWithRelationInput
  competitors: CompetitorOrderByRelationAggregateInput
  products: ProductOrderByRelationAggregateInput
  contacts: ContactsOrderByRelationAggregateInput
  renewalDate: SortOrder
  UserCompanyRatings: UserCompanyRatingsOrderByRelationAggregateInput
  referredOn: SortOrder
  latestReferenceId: SortOrder
  listCompanies: ListCompanyOrderByRelationAggregateInput
  Launch: LaunchOrderByRelationAggregateInput
}

input CustomerOrderByWithRelationInput {
  id: SortOrder
  name: SortOrder
  type: SortOrder
  favoritedAt: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  launch: LaunchOrderByRelationAggregateInput
  companies: CompanyOrderByRelationAggregateInput
  integrations: CustomerIntegrationOrderByRelationAggregateInput
  events: EventOrderByRelationAggregateInput
  externalGroups: ExternalGroupOrderByRelationAggregateInput
  externalUsers: ExternalUserOrderByRelationAggregateInput
  groups: GroupOrderByRelationAggregateInput
  notes: NoteOrderByRelationAggregateInput
  roles: RoleOrderByRelationAggregateInput
  salesLeads: SalesLeadOrderByRelationAggregateInput
  syncEvents: SyncEventOrderByRelationAggregateInput
  users: UserOrderByRelationAggregateInput
  messageTemplate: MessageTemplateOrderByRelationAggregateInput
  dynamicFields: DynamicUserFieldsOrderByRelationAggregateInput
  lists: ListOrderByRelationAggregateInput
  useCaseCollections: UseCaseCollectionsOrderByRelationAggregateInput
  customerDataSources: DataSourcesOnCustomerOrderByRelationAggregateInput
  dataObjectCollections: DataObjectCollectionsOrderByRelationAggregateInput
  oktaClientId: SortOrder
  oktaDomain: SortOrder
  oktaClientSecret: SortOrder
  oktaApiKey: SortOrder
}

input LaunchOrderByRelationAggregateInput {
  _count: SortOrder
}

input CompanyOrderByRelationAggregateInput {
  _count: SortOrder
}

input CustomerIntegrationOrderByRelationAggregateInput {
  _count: SortOrder
}

input EventOrderByRelationAggregateInput {
  _count: SortOrder
}

input ExternalGroupOrderByRelationAggregateInput {
  _count: SortOrder
}

input ExternalUserOrderByRelationAggregateInput {
  _count: SortOrder
}

input GroupOrderByRelationAggregateInput {
  _count: SortOrder
}

input NoteOrderByRelationAggregateInput {
  _count: SortOrder
}

input RoleOrderByRelationAggregateInput {
  _count: SortOrder
}

input SalesLeadOrderByRelationAggregateInput {
  _count: SortOrder
}

input SyncEventOrderByRelationAggregateInput {
  _count: SortOrder
}

input UserOrderByRelationAggregateInput {
  _count: SortOrder
}

input MessageTemplateOrderByRelationAggregateInput {
  _count: SortOrder
}

input DynamicUserFieldsOrderByRelationAggregateInput {
  _count: SortOrder
}

input ListOrderByRelationAggregateInput {
  _count: SortOrder
}

input UseCaseCollectionsOrderByRelationAggregateInput {
  _count: SortOrder
}

input DataSourcesOnCustomerOrderByRelationAggregateInput {
  _count: SortOrder
}

input DataObjectCollectionsOrderByRelationAggregateInput {
  _count: SortOrder
}

input UserOrderByWithRelationInput {
  id: SortOrder
  admin: SortOrder
  customerId: SortOrder
  email: SortOrder
  name: SortOrder
  passwordHash: SortOrder
  passwordSalt: SortOrder
  workPhone: SortOrder
  mobilePhone: SortOrder
  title: SortOrder
  token: SortOrder
  notificationSettings: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  customer: CustomerOrderByWithRelationInput
  leadSourceFor: CompanyOrderByRelationAggregateInput
  primaryContactFor: CompanyOrderByRelationAggregateInput
  starred: CompanyStarredOrderByRelationAggregateInput
  externalUser: ExternalUserOrderByRelationAggregateInput
  groups: GroupUserOrderByRelationAggregateInput
  Note: NoteOrderByRelationAggregateInput
  roles: UserRoleOrderByRelationAggregateInput
  userEvents: UserEventsOrderByRelationAggregateInput
  UserCompanyRatings: UserCompanyRatingsOrderByRelationAggregateInput
  noteUserTags: NoteUserTagsOrderByRelationAggregateInput
  messageTemplate: MessageTemplateOrderByRelationAggregateInput
  dynamicFields: SortOrder
  Feedback: FeedbackOrderByRelationAggregateInput
  active: SortOrder
  references: ReferenceOrderByRelationAggregateInput
  oktaUserId: SortOrder
  oktaManagerId: SortOrder
  forgetPassword: SortOrder
  userManager: UserManagerOrderByRelationAggregateInput
  userReportee: UserManagerOrderByRelationAggregateInput
  csmStatus: SortOrder
  crmStatus: SortOrder
}

input CompanyStarredOrderByRelationAggregateInput {
  _count: SortOrder
}

input GroupUserOrderByRelationAggregateInput {
  _count: SortOrder
}

input UserRoleOrderByRelationAggregateInput {
  _count: SortOrder
}

input UserEventsOrderByRelationAggregateInput {
  _count: SortOrder
}

input UserCompanyRatingsOrderByRelationAggregateInput {
  _count: SortOrder
}

input NoteUserTagsOrderByRelationAggregateInput {
  _count: SortOrder
}

input FeedbackOrderByRelationAggregateInput {
  _count: SortOrder
}

input ReferenceOrderByRelationAggregateInput {
  _count: SortOrder
}

input UserManagerOrderByRelationAggregateInput {
  _count: SortOrder
}

input AccountOrderByWithRelationInput {
  id: SortOrder
  accountName: SortOrder
  AccountUUID: SortOrder
  company: CompanyOrderByRelationAggregateInput
}

input CompetitorOrderByRelationAggregateInput {
  _count: SortOrder
}

input ProductOrderByRelationAggregateInput {
  _count: SortOrder
}

input ContactsOrderByRelationAggregateInput {
  _count: SortOrder
}

input ListCompanyOrderByRelationAggregateInput {
  _count: SortOrder
}

input EventOrderByWithRelationInput {
  id: SortOrder
  customerId: SortOrder
  data: SortOrder
  notifiedAt: SortOrder
  text: SortOrder
  type: SortOrder
  companyId: SortOrder
  needsAttention: SortOrder
  createdAt: SortOrder
  company: CompanyOrderByWithRelationInput
  customer: CustomerOrderByWithRelationInput
  Launch: LaunchOrderByRelationAggregateInput
  notes: NoteOrderByRelationAggregateInput
  userEvents: UserEventsOrderByRelationAggregateInput
  parentEventId: SortOrder
  parentEvent: EventOrderByWithRelationInput
  childEvents: EventOrderByRelationAggregateInput
  messageId: SortOrder
  message: NoteOrderByWithRelationInput
}

input NoteOrderByWithRelationInput {
  id: SortOrder
  customerId: SortOrder
  eventId: SortOrder
  readAt: SortOrder
  flaggedAt: SortOrder
  subject: SortOrder
  text: SortOrder
  companyId: SortOrder
  createdBy: SortOrder
  allCanView: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  company: CompanyOrderByWithRelationInput
  customer: CustomerOrderByWithRelationInput
  events: EventOrderByWithRelationInput
  user: UserOrderByWithRelationInput
  delta: SortOrder
  noteUserTags: NoteUserTagsOrderByRelationAggregateInput
  noteGroupTags: NoteGroupTagsOrderByRelationAggregateInput
  Event: EventOrderByRelationAggregateInput
}

input NoteGroupTagsOrderByRelationAggregateInput {
  _count: SortOrder
}

input MessageTemplateOrderByWithRelationInput {
  id: SortOrder
  eventType: SortOrder
  companyType: SortOrder
  messageType: SortOrder
  sendToAddress: SortOrder
  title: SortOrder
  subject: SortOrder
  text: SortOrder
  customerId: SortOrder
  customer: CustomerOrderByWithRelationInput
  userId: SortOrder
  user: UserOrderByWithRelationInput
  launch: LaunchOrderByRelationAggregateInput
  delta: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input LaunchContactsOrderByRelationAggregateInput {
  _count: SortOrder
}

input LaunchWhereUniqueInput {
  id: Int
}

enum LaunchScalarFieldEnum {
  id
  createdAt
  companyId
  eventId
  messageTemplateId
  sendToAddress
  subject
  text
  delta
  customerId
}

type Note {
  id: Int!
  customerId: Int
  eventId: Int
  readAt: DateTime
  flaggedAt: DateTime
  subject: String!
  text: String!
  companyId: Int
  createdBy: Int
  allCanView: Boolean!
  createdAt: DateTime!
  updatedAt: DateTime!
  delta: JSON
  _count: NoteCount
  company: Company
  customer: Customer
  events: Event
  user: User
  noteUserTags(
    where: NoteUserTagsWhereInput
    orderBy: [NoteUserTagsOrderByWithRelationInput!]
    cursor: NoteUserTagsWhereUniqueInput
    take: Int
    skip: Int
    distinct: [NoteUserTagsScalarFieldEnum!]
  ): [NoteUserTags!]!
  noteGroupTags(
    where: NoteGroupTagsWhereInput
    orderBy: [NoteGroupTagsOrderByWithRelationInput!]
    cursor: NoteGroupTagsWhereUniqueInput
    take: Int
    skip: Int
    distinct: [NoteGroupTagsScalarFieldEnum!]
  ): [NoteGroupTags!]!
  Event(
    where: EventWhereInput
    orderBy: [EventOrderByWithRelationInput!]
    cursor: EventWhereUniqueInput
    take: Int
    skip: Int
    distinct: [EventScalarFieldEnum!]
  ): [Event!]!
}

type NoteCount {
  noteUserTags: Int!
  noteGroupTags: Int!
  Event: Int!
}

type User {
  id: Int!
  admin: Boolean!
  customerId: Int!
  email: String!
  name: String!
  passwordHash: String
  passwordSalt: String
  workPhone: String
  mobilePhone: String
  title: String
  token: String
  notificationSettings: JSON
  createdAt: DateTime!
  updatedAt: DateTime!
  dynamicFields: JSON
  active: Boolean!
  oktaUserId: Int
  oktaManagerId: Int
  forgetPassword: String
  csmStatus: Boolean!
  crmStatus: Boolean!
  _count: UserCount
  customer: Customer!
  leadSourceFor(
    where: CompanyWhereInput
    orderBy: [CompanyOrderByWithRelationInput!]
    cursor: CompanyWhereUniqueInput
    take: Int
    skip: Int
    distinct: [CompanyScalarFieldEnum!]
  ): [Company!]!
  primaryContactFor(
    where: CompanyWhereInput
    orderBy: [CompanyOrderByWithRelationInput!]
    cursor: CompanyWhereUniqueInput
    take: Int
    skip: Int
    distinct: [CompanyScalarFieldEnum!]
  ): [Company!]!
  starred(
    where: CompanyStarredWhereInput
    orderBy: [CompanyStarredOrderByWithRelationInput!]
    cursor: CompanyStarredWhereUniqueInput
    take: Int
    skip: Int
    distinct: [CompanyStarredScalarFieldEnum!]
  ): [CompanyStarred!]!
  externalUser(
    where: ExternalUserWhereInput
    orderBy: [ExternalUserOrderByWithRelationInput!]
    cursor: ExternalUserWhereUniqueInput
    take: Int
    skip: Int
    distinct: [ExternalUserScalarFieldEnum!]
  ): [ExternalUser!]!
  groups(
    where: GroupUserWhereInput
    orderBy: [GroupUserOrderByWithRelationInput!]
    cursor: GroupUserWhereUniqueInput
    take: Int
    skip: Int
    distinct: [GroupUserScalarFieldEnum!]
  ): [GroupUser!]!
  Note(
    where: NoteWhereInput
    orderBy: [NoteOrderByWithRelationInput!]
    cursor: NoteWhereUniqueInput
    take: Int
    skip: Int
    distinct: [NoteScalarFieldEnum!]
  ): [Note!]!
  roles(
    where: UserRoleWhereInput
    orderBy: [UserRoleOrderByWithRelationInput!]
    cursor: UserRoleWhereUniqueInput
    take: Int
    skip: Int
    distinct: [UserRoleScalarFieldEnum!]
  ): [UserRole!]!
  userEvents(
    where: UserEventsWhereInput
    orderBy: [UserEventsOrderByWithRelationInput!]
    cursor: UserEventsWhereUniqueInput
    take: Int
    skip: Int
    distinct: [UserEventsScalarFieldEnum!]
  ): [UserEvents!]!
  UserCompanyRatings(
    where: UserCompanyRatingsWhereInput
    orderBy: [UserCompanyRatingsOrderByWithRelationInput!]
    cursor: UserCompanyRatingsWhereUniqueInput
    take: Int
    skip: Int
    distinct: [UserCompanyRatingsScalarFieldEnum!]
  ): [UserCompanyRatings!]!
  noteUserTags(
    where: NoteUserTagsWhereInput
    orderBy: [NoteUserTagsOrderByWithRelationInput!]
    cursor: NoteUserTagsWhereUniqueInput
    take: Int
    skip: Int
    distinct: [NoteUserTagsScalarFieldEnum!]
  ): [NoteUserTags!]!
  messageTemplate(
    where: MessageTemplateWhereInput
    orderBy: [MessageTemplateOrderByWithRelationInput!]
    cursor: MessageTemplateWhereUniqueInput
    take: Int
    skip: Int
    distinct: [MessageTemplateScalarFieldEnum!]
  ): [MessageTemplate!]!
  Feedback(
    where: FeedbackWhereInput
    orderBy: [FeedbackOrderByWithRelationInput!]
    cursor: FeedbackWhereUniqueInput
    take: Int
    skip: Int
    distinct: [FeedbackScalarFieldEnum!]
  ): [Feedback!]!
  references(
    where: ReferenceWhereInput
    orderBy: [ReferenceOrderByWithRelationInput!]
    cursor: ReferenceWhereUniqueInput
    take: Int
    skip: Int
    distinct: [ReferenceScalarFieldEnum!]
  ): [Reference!]!
  userManager(
    where: UserManagerWhereInput
    orderBy: [UserManagerOrderByWithRelationInput!]
    cursor: UserManagerWhereUniqueInput
    take: Int
    skip: Int
    distinct: [UserManagerScalarFieldEnum!]
  ): [UserManager!]!
  userReportee(
    where: UserManagerWhereInput
    orderBy: [UserManagerOrderByWithRelationInput!]
    cursor: UserManagerWhereUniqueInput
    take: Int
    skip: Int
    distinct: [UserManagerScalarFieldEnum!]
  ): [UserManager!]!
}

type UserCount {
  leadSourceFor: Int!
  primaryContactFor: Int!
  starred: Int!
  externalUser: Int!
  groups: Int!
  Note: Int!
  roles: Int!
  userEvents: Int!
  UserCompanyRatings: Int!
  noteUserTags: Int!
  messageTemplate: Int!
  Feedback: Int!
  references: Int!
  userManager: Int!
  userReportee: Int!
}

input CompanyWhereUniqueInput {
  id: Int
}

enum CompanyScalarFieldEnum {
  id
  leadSourceId
  annualRecurringRevenue
  customerId
  expectedToCloseAt
  fiscalYearStartMonth
  name
  companyType
  primaryContactId
  seatSize
  createdAt
  updatedAt
  fiscalYear
  parentId
  accountId
  renewalDate
  referredOn
  latestReferenceId
}

type CompanyStarred {
  dummy: Int
  createdAt: DateTime!
  companyId: Int!
  userId: Int!
  company: Company!
  user: User!
}

input CompanyStarredOrderByWithRelationInput {
  dummy: SortOrder
  createdAt: SortOrder
  companyId: SortOrder
  userId: SortOrder
  company: CompanyOrderByWithRelationInput
  user: UserOrderByWithRelationInput
}

input CompanyStarredWhereUniqueInput {
  companyId_userId: CompanyStarredCompanyIdUserIdCompoundUniqueInput
}

input CompanyStarredCompanyIdUserIdCompoundUniqueInput {
  companyId: Int!
  userId: Int!
}

enum CompanyStarredScalarFieldEnum {
  dummy
  createdAt
  companyId
  userId
}

type ExternalUser {
  customerId: Int!
  department: String
  division: String
  email: String
  employeeNumber: String
  externalId: String!
  name: String
  source: CustomerIntegrationType!
  userId: Int
  title: String
  createdAt: DateTime!
  updatedAt: DateTime!
  _count: ExternalUserCount
  customer: Customer!
  user: User
  externalGroups(
    where: ExternalGroupMemberWhereInput
    orderBy: [ExternalGroupMemberOrderByWithRelationInput!]
    cursor: ExternalGroupMemberWhereUniqueInput
    take: Int
    skip: Int
    distinct: [ExternalGroupMemberScalarFieldEnum!]
  ): [ExternalGroupMember!]!
}

type ExternalUserCount {
  externalGroups: Int!
}

type ExternalGroupMember {
  customerId: Int!
  groupId: String!
  source: CustomerIntegrationType!
  userId: String!
  createdAt: DateTime!
  group: ExternalGroup!
  user: ExternalUser!
}

type ExternalGroup {
  customerId: Int!
  externalId: String!
  developerName: String!
  name: String
  ownerId: String
  source: CustomerIntegrationType!
  type: String
  createdAt: DateTime!
  updatedAt: DateTime!
  _count: ExternalGroupCount
  customer: Customer!
  members(
    where: ExternalGroupMemberWhereInput
    orderBy: [ExternalGroupMemberOrderByWithRelationInput!]
    cursor: ExternalGroupMemberWhereUniqueInput
    take: Int
    skip: Int
    distinct: [ExternalGroupMemberScalarFieldEnum!]
  ): [ExternalGroupMember!]!
}

type ExternalGroupCount {
  members: Int!
}

input ExternalGroupMemberOrderByWithRelationInput {
  customerId: SortOrder
  groupId: SortOrder
  source: SortOrder
  userId: SortOrder
  createdAt: SortOrder
  group: ExternalGroupOrderByWithRelationInput
  user: ExternalUserOrderByWithRelationInput
}

input ExternalGroupOrderByWithRelationInput {
  customerId: SortOrder
  externalId: SortOrder
  developerName: SortOrder
  name: SortOrder
  ownerId: SortOrder
  source: SortOrder
  type: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  customer: CustomerOrderByWithRelationInput
  members: ExternalGroupMemberOrderByRelationAggregateInput
}

input ExternalGroupMemberOrderByRelationAggregateInput {
  _count: SortOrder
}

input ExternalUserOrderByWithRelationInput {
  customerId: SortOrder
  department: SortOrder
  division: SortOrder
  email: SortOrder
  employeeNumber: SortOrder
  externalId: SortOrder
  name: SortOrder
  source: SortOrder
  userId: SortOrder
  title: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  customer: CustomerOrderByWithRelationInput
  user: UserOrderByWithRelationInput
  externalGroups: ExternalGroupMemberOrderByRelationAggregateInput
}

input ExternalGroupMemberWhereUniqueInput {
  customerId_groupId_userId_source: ExternalGroupMemberCustomerIdGroupIdUserIdSourceCompoundUniqueInput
}

input ExternalGroupMemberCustomerIdGroupIdUserIdSourceCompoundUniqueInput {
  customerId: Int!
  groupId: String!
  userId: String!
  source: CustomerIntegrationType!
}

enum ExternalGroupMemberScalarFieldEnum {
  customerId
  groupId
  source
  userId
  createdAt
}

input ExternalUserWhereUniqueInput {
  customerId_externalId_source: ExternalUserCustomerIdExternalIdSourceCompoundUniqueInput
}

input ExternalUserCustomerIdExternalIdSourceCompoundUniqueInput {
  customerId: Int!
  externalId: String!
  source: CustomerIntegrationType!
}

enum ExternalUserScalarFieldEnum {
  customerId
  department
  division
  email
  employeeNumber
  externalId
  name
  source
  userId
  title
  createdAt
  updatedAt
}

type GroupUser {
  dummy: Int
  groupId: Int!
  userId: Int!
  group: Group!
  user: User!
}

type Group {
  id: Int!
  customerId: Int!
  name: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  parentId: Int
  _count: GroupCount
  customer: Customer!
  users(
    where: GroupUserWhereInput
    orderBy: [GroupUserOrderByWithRelationInput!]
    cursor: GroupUserWhereUniqueInput
    take: Int
    skip: Int
    distinct: [GroupUserScalarFieldEnum!]
  ): [GroupUser!]!
  parent: Group
  children(
    where: GroupWhereInput
    orderBy: [GroupOrderByWithRelationInput!]
    cursor: GroupWhereUniqueInput
    take: Int
    skip: Int
    distinct: [GroupScalarFieldEnum!]
  ): [Group!]!
  noteGroupTags(
    where: NoteGroupTagsWhereInput
    orderBy: [NoteGroupTagsOrderByWithRelationInput!]
    cursor: NoteGroupTagsWhereUniqueInput
    take: Int
    skip: Int
    distinct: [NoteGroupTagsScalarFieldEnum!]
  ): [NoteGroupTags!]!
}

type GroupCount {
  users: Int!
  children: Int!
  noteGroupTags: Int!
}

input GroupUserOrderByWithRelationInput {
  dummy: SortOrder
  groupId: SortOrder
  userId: SortOrder
  group: GroupOrderByWithRelationInput
  user: UserOrderByWithRelationInput
}

input GroupOrderByWithRelationInput {
  id: SortOrder
  customerId: SortOrder
  name: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  customer: CustomerOrderByWithRelationInput
  users: GroupUserOrderByRelationAggregateInput
  parentId: SortOrder
  parent: GroupOrderByWithRelationInput
  children: GroupOrderByRelationAggregateInput
  noteGroupTags: NoteGroupTagsOrderByRelationAggregateInput
}

input GroupUserWhereUniqueInput {
  groupId_userId: GroupUserGroupIdUserIdCompoundUniqueInput
}

input GroupUserGroupIdUserIdCompoundUniqueInput {
  groupId: Int!
  userId: Int!
}

enum GroupUserScalarFieldEnum {
  dummy
  groupId
  userId
}

input GroupWhereUniqueInput {
  id: Int
  customerId_name: GroupCustomerIdNameCompoundUniqueInput
}

input GroupCustomerIdNameCompoundUniqueInput {
  customerId: Int!
  name: String!
}

enum GroupScalarFieldEnum {
  id
  customerId
  name
  createdAt
  updatedAt
  parentId
}

type NoteGroupTags {
  noteId: Int!
  groupId: Int!
  createdAt: DateTime!
  note: Note!
  group: Group!
}

input NoteGroupTagsOrderByWithRelationInput {
  noteId: SortOrder
  note: NoteOrderByWithRelationInput
  groupId: SortOrder
  group: GroupOrderByWithRelationInput
  createdAt: SortOrder
}

input NoteGroupTagsWhereUniqueInput {
  noteId_groupId: NoteGroupTagsNoteIdGroupIdCompoundUniqueInput
}

input NoteGroupTagsNoteIdGroupIdCompoundUniqueInput {
  noteId: Int!
  groupId: Int!
}

enum NoteGroupTagsScalarFieldEnum {
  noteId
  groupId
  createdAt
}

input NoteWhereUniqueInput {
  id: Int
}

enum NoteScalarFieldEnum {
  id
  customerId
  eventId
  readAt
  flaggedAt
  subject
  text
  companyId
  createdBy
  allCanView
  createdAt
  updatedAt
  delta
}

type UserRole {
  id: Int!
  roleId: Int!
  userId: Int!
  createdAt: DateTime!
  role: Role!
  user: User!
}

type Role {
  id: Int!
  name: String!
  capabilities: [Int!]!
  customerId: Int!
  createdAt: DateTime!
  updatedAt: DateTime!
  _count: RoleCount
  customer: Customer!
  userRoles(
    where: UserRoleWhereInput
    orderBy: [UserRoleOrderByWithRelationInput!]
    cursor: UserRoleWhereUniqueInput
    take: Int
    skip: Int
    distinct: [UserRoleScalarFieldEnum!]
  ): [UserRole!]!
}

type RoleCount {
  userRoles: Int!
}

input UserRoleOrderByWithRelationInput {
  id: SortOrder
  roleId: SortOrder
  userId: SortOrder
  role: RoleOrderByWithRelationInput
  user: UserOrderByWithRelationInput
  createdAt: SortOrder
}

input RoleOrderByWithRelationInput {
  id: SortOrder
  name: SortOrder
  capabilities: SortOrder
  customerId: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  customer: CustomerOrderByWithRelationInput
  userRoles: UserRoleOrderByRelationAggregateInput
}

input UserRoleWhereUniqueInput {
  id: Int
}

enum UserRoleScalarFieldEnum {
  id
  roleId
  userId
  createdAt
}

type UserEvents {
  id: Int!
  userId: Int!
  readAt: DateTime
  flaggedAt: Int
  hideAt: DateTime
  eventId: Int!
  createdAt: DateTime!
  user: User!
  event: Event!
}

input UserEventsOrderByWithRelationInput {
  id: SortOrder
  userId: SortOrder
  user: UserOrderByWithRelationInput
  readAt: SortOrder
  flaggedAt: SortOrder
  hideAt: SortOrder
  eventId: SortOrder
  event: EventOrderByWithRelationInput
  createdAt: SortOrder
}

input UserEventsWhereUniqueInput {
  id: Int
  userId_eventId: UserEventsUserIdEventIdCompoundUniqueInput
}

input UserEventsUserIdEventIdCompoundUniqueInput {
  userId: Int!
  eventId: Int!
}

enum UserEventsScalarFieldEnum {
  id
  userId
  readAt
  flaggedAt
  hideAt
  eventId
  createdAt
}

type UserCompanyRatings {
  id: Int!
  userId: Int!
  ratingId: Int!
  companyId: Int!
  createdAt: DateTime!
  updatedAt: DateTime!
  user: User!
  rating: Rating!
  company: Company!
}

type Rating {
  id: Int!
  status: RatingStatus!
  createdAt: DateTime!
  updatedAt: DateTime!
  _count: RatingCount
  userratingcompany(
    where: UserCompanyRatingsWhereInput
    orderBy: [UserCompanyRatingsOrderByWithRelationInput!]
    cursor: UserCompanyRatingsWhereUniqueInput
    take: Int
    skip: Int
    distinct: [UserCompanyRatingsScalarFieldEnum!]
  ): [UserCompanyRatings!]!
}

type RatingCount {
  userratingcompany: Int!
}

input UserCompanyRatingsOrderByWithRelationInput {
  id: SortOrder
  user: UserOrderByWithRelationInput
  userId: SortOrder
  rating: RatingOrderByWithRelationInput
  ratingId: SortOrder
  company: CompanyOrderByWithRelationInput
  companyId: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input RatingOrderByWithRelationInput {
  id: SortOrder
  status: SortOrder
  userratingcompany: UserCompanyRatingsOrderByRelationAggregateInput
  createdAt: SortOrder
  updatedAt: SortOrder
}

input UserCompanyRatingsWhereUniqueInput {
  id: Int
}

enum UserCompanyRatingsScalarFieldEnum {
  id
  userId
  ratingId
  companyId
  createdAt
  updatedAt
}

type NoteUserTags {
  noteId: Int!
  userId: Int!
  createdAt: DateTime!
  note: Note!
  user: User!
}

input NoteUserTagsOrderByWithRelationInput {
  noteId: SortOrder
  note: NoteOrderByWithRelationInput
  userId: SortOrder
  user: UserOrderByWithRelationInput
  createdAt: SortOrder
}

input NoteUserTagsWhereUniqueInput {
  noteId_userId: NoteUserTagsNoteIdUserIdCompoundUniqueInput
}

input NoteUserTagsNoteIdUserIdCompoundUniqueInput {
  noteId: Int!
  userId: Int!
}

enum NoteUserTagsScalarFieldEnum {
  noteId
  userId
  createdAt
}

type MessageTemplate {
  id: Int!
  eventType: EventType!
  companyType: CompanyType!
  messageType: MessageType!
  sendToAddress: String
  title: String
  subject: String!
  text: String!
  customerId: Int!
  userId: Int!
  delta: JSON
  createdAt: DateTime!
  updatedAt: DateTime
  _count: MessageTemplateCount
  customer: Customer!
  user: User!
  launch(
    where: LaunchWhereInput
    orderBy: [LaunchOrderByWithRelationInput!]
    cursor: LaunchWhereUniqueInput
    take: Int
    skip: Int
    distinct: [LaunchScalarFieldEnum!]
  ): [Launch!]!
}

type MessageTemplateCount {
  launch: Int!
}

input MessageTemplateWhereUniqueInput {
  id: Int
}

enum MessageTemplateScalarFieldEnum {
  id
  eventType
  companyType
  messageType
  sendToAddress
  title
  subject
  text
  customerId
  userId
  delta
  createdAt
  updatedAt
}

type Feedback {
  feedbackId: Int!
  feedbackValue: Float!
  feedback: String!
  userId: Int!
  user: User!
}

input FeedbackOrderByWithRelationInput {
  feedbackId: SortOrder
  feedbackValue: SortOrder
  feedback: SortOrder
  userId: SortOrder
  user: UserOrderByWithRelationInput
}

input FeedbackWhereUniqueInput {
  feedbackId: Int
}

enum FeedbackScalarFieldEnum {
  feedbackId
  feedbackValue
  feedback
  userId
}

type Reference {
  id: Int!
  companyId: Int!
  offeredTo: Boolean!
  servedAsReferenceBefore: Boolean!
  servedAsReferenceForId: Int
  servedAsReferenceAt: DateTime
  notes: String
  dealClosed: Boolean
  createdAt: DateTime!
  userId: Int!
  _count: ReferenceCount
  company: Company!
  servedAsReferenceFor: Company
  offerOptions(
    where: ReferenceOnOfferOptionsWhereInput
    orderBy: [ReferenceOnOfferOptionsOrderByWithRelationInput!]
    cursor: ReferenceOnOfferOptionsWhereUniqueInput
    take: Int
    skip: Int
    distinct: [ReferenceOnOfferOptionsScalarFieldEnum!]
  ): [ReferenceOnOfferOptions!]!
  user: User
}

type ReferenceCount {
  offerOptions: Int!
}

type ReferenceOnOfferOptions {
  createdAt: DateTime!
  referenceId: Int!
  offerOptionId: Int!
  reference: Reference!
  offerOption: OfferOption!
}

type OfferOption {
  id: Int!
  offerType: String!
  status: Boolean!
  _count: OfferOptionCount
  references(
    where: ReferenceOnOfferOptionsWhereInput
    orderBy: [ReferenceOnOfferOptionsOrderByWithRelationInput!]
    cursor: ReferenceOnOfferOptionsWhereUniqueInput
    take: Int
    skip: Int
    distinct: [ReferenceOnOfferOptionsScalarFieldEnum!]
  ): [ReferenceOnOfferOptions!]!
}

type OfferOptionCount {
  references: Int!
}

input ReferenceOnOfferOptionsOrderByWithRelationInput {
  createdAt: SortOrder
  reference: ReferenceOrderByWithRelationInput
  referenceId: SortOrder
  offerOption: OfferOptionOrderByWithRelationInput
  offerOptionId: SortOrder
}

input ReferenceOrderByWithRelationInput {
  id: SortOrder
  companyId: SortOrder
  offeredTo: SortOrder
  servedAsReferenceBefore: SortOrder
  servedAsReferenceForId: SortOrder
  servedAsReferenceAt: SortOrder
  notes: SortOrder
  company: CompanyOrderByWithRelationInput
  servedAsReferenceFor: CompanyOrderByWithRelationInput
  dealClosed: SortOrder
  offerOptions: ReferenceOnOfferOptionsOrderByRelationAggregateInput
  createdAt: SortOrder
  userId: SortOrder
  user: UserOrderByWithRelationInput
}

input ReferenceOnOfferOptionsOrderByRelationAggregateInput {
  _count: SortOrder
}

input OfferOptionOrderByWithRelationInput {
  id: SortOrder
  offerType: SortOrder
  status: SortOrder
  references: ReferenceOnOfferOptionsOrderByRelationAggregateInput
}

input ReferenceOnOfferOptionsWhereUniqueInput {
  referenceId_offerOptionId: ReferenceOnOfferOptionsReferenceIdOfferOptionIdCompoundUniqueInput
}

input ReferenceOnOfferOptionsReferenceIdOfferOptionIdCompoundUniqueInput {
  referenceId: Int!
  offerOptionId: Int!
}

enum ReferenceOnOfferOptionsScalarFieldEnum {
  createdAt
  referenceId
  offerOptionId
}

input ReferenceWhereUniqueInput {
  id: Int
}

enum ReferenceScalarFieldEnum {
  id
  companyId
  offeredTo
  servedAsReferenceBefore
  servedAsReferenceForId
  servedAsReferenceAt
  notes
  dealClosed
  createdAt
  userId
}

type UserManager {
  id: Int!
  userId: Int!
  managerId: Int!
  createdAt: DateTime!
  user: User!
  manager: User!
}

input UserManagerOrderByWithRelationInput {
  id: SortOrder
  userId: SortOrder
  managerId: SortOrder
  createdAt: SortOrder
  user: UserOrderByWithRelationInput
  manager: UserOrderByWithRelationInput
}

input UserManagerWhereUniqueInput {
  id: Int
  userId_managerId: UserManagerUserIdManagerIdCompoundUniqueInput
}

input UserManagerUserIdManagerIdCompoundUniqueInput {
  userId: Int!
  managerId: Int!
}

enum UserManagerScalarFieldEnum {
  id
  userId
  managerId
  createdAt
}

input EventWhereUniqueInput {
  id: Int
}

enum EventScalarFieldEnum {
  id
  customerId
  data
  notifiedAt
  text
  type
  companyId
  needsAttention
  createdAt
  parentEventId
  messageId
}

type LaunchContacts {
  id: Int!
  launchId: Int!
  contactId: Int!
  createdAt: DateTime!
  launch: Launch!
  contact: Contacts!
}

type Contacts {
  id: Int!
  email: String!
  name: String!
  workPhone: String
  mobilePhone: String
  createdAt: DateTime!
  updatedAt: DateTime!
  primary: Boolean!
  image: String
  companyId: Int
  _count: ContactsCount
  company: Company
  launchContacts(
    where: LaunchContactsWhereInput
    orderBy: [LaunchContactsOrderByWithRelationInput!]
    cursor: LaunchContactsWhereUniqueInput
    take: Int
    skip: Int
    distinct: [LaunchContactsScalarFieldEnum!]
  ): [LaunchContacts!]!
}

type ContactsCount {
  launchContacts: Int!
}

input LaunchContactsOrderByWithRelationInput {
  id: SortOrder
  launchId: SortOrder
  launch: LaunchOrderByWithRelationInput
  contactId: SortOrder
  contact: ContactsOrderByWithRelationInput
  createdAt: SortOrder
}

input ContactsOrderByWithRelationInput {
  id: SortOrder
  email: SortOrder
  name: SortOrder
  workPhone: SortOrder
  mobilePhone: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  primary: SortOrder
  image: SortOrder
  companyId: SortOrder
  company: CompanyOrderByWithRelationInput
  launchContacts: LaunchContactsOrderByRelationAggregateInput
}

input LaunchContactsWhereUniqueInput {
  id: Int
}

enum LaunchContactsScalarFieldEnum {
  id
  launchId
  contactId
  createdAt
}

type CustomerIntegration {
  id: Int!
  customerId: Int!
  refreshToken: String
  token: String!
  type: CustomerIntegrationType!
  url: String
  createdAt: DateTime!
  updatedAt: DateTime!
  customer: Customer!
}

input CustomerIntegrationOrderByWithRelationInput {
  id: SortOrder
  customerId: SortOrder
  refreshToken: SortOrder
  token: SortOrder
  type: SortOrder
  url: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  customer: CustomerOrderByWithRelationInput
}

input CustomerIntegrationWhereUniqueInput {
  id: Int
  customerId_type: CustomerIntegrationCustomerIdTypeCompoundUniqueInput
}

input CustomerIntegrationCustomerIdTypeCompoundUniqueInput {
  customerId: Int!
  type: CustomerIntegrationType!
}

enum CustomerIntegrationScalarFieldEnum {
  id
  customerId
  refreshToken
  token
  type
  url
  createdAt
  updatedAt
}

input ExternalGroupWhereUniqueInput {
  customerId_externalId_source: ExternalGroupCustomerIdExternalIdSourceCompoundUniqueInput
}

input ExternalGroupCustomerIdExternalIdSourceCompoundUniqueInput {
  customerId: Int!
  externalId: String!
  source: CustomerIntegrationType!
}

enum ExternalGroupScalarFieldEnum {
  customerId
  externalId
  developerName
  name
  ownerId
  source
  type
  createdAt
  updatedAt
}

input RoleWhereUniqueInput {
  id: Int
  name_customerId: RoleNameCustomerIdCompoundUniqueInput
}

input RoleNameCustomerIdCompoundUniqueInput {
  name: String!
  customerId: Int!
}

enum RoleScalarFieldEnum {
  id
  name
  capabilities
  customerId
  createdAt
  updatedAt
}

type SalesLead {
  id: Int!
  company: String!
  customerId: Int!
  description: String
  email: String
  name: String!
  processedAt: DateTime
  source: String!
  status: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  customer: Customer!
}

input SalesLeadOrderByWithRelationInput {
  id: SortOrder
  company: SortOrder
  customerId: SortOrder
  description: SortOrder
  email: SortOrder
  name: SortOrder
  processedAt: SortOrder
  source: SortOrder
  status: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  customer: CustomerOrderByWithRelationInput
}

input SalesLeadWhereUniqueInput {
  id: Int
}

enum SalesLeadScalarFieldEnum {
  id
  company
  customerId
  description
  email
  name
  processedAt
  source
  status
  createdAt
  updatedAt
}

type SyncEvent {
  id: Int!
  completedAt: DateTime
  customerId: Int!
  entityType: SyncEventEntityType!
  recordsCreated: Int!
  recordsDeleted: Int!
  recordsUpdated: Int!
  replayId: String
  startedAt: DateTime!
  type: SyncEventType!
  customer: Customer!
}

input SyncEventOrderByWithRelationInput {
  id: SortOrder
  completedAt: SortOrder
  customerId: SortOrder
  entityType: SortOrder
  recordsCreated: SortOrder
  recordsDeleted: SortOrder
  recordsUpdated: SortOrder
  replayId: SortOrder
  startedAt: SortOrder
  type: SortOrder
  customer: CustomerOrderByWithRelationInput
}

input SyncEventWhereUniqueInput {
  id: Int
}

enum SyncEventScalarFieldEnum {
  id
  completedAt
  customerId
  entityType
  recordsCreated
  recordsDeleted
  recordsUpdated
  replayId
  startedAt
  type
}

input UserWhereUniqueInput {
  id: Int
  email: String
}

enum UserScalarFieldEnum {
  id
  admin
  customerId
  email
  name
  passwordHash
  passwordSalt
  workPhone
  mobilePhone
  title
  token
  notificationSettings
  createdAt
  updatedAt
  dynamicFields
  active
  oktaUserId
  oktaManagerId
  forgetPassword
  csmStatus
  crmStatus
}

type DynamicUserFields {
  id: Int!
  fieldName: String!
  fieldLabel: String!
  fieldType: FieldTypes
  display: Boolean!
  allowedValues: JSON
  isDefault: Boolean!
  customerId: Int!
  order: Int
  customer: Customer!
}

input DynamicUserFieldsOrderByWithRelationInput {
  id: SortOrder
  fieldName: SortOrder
  fieldLabel: SortOrder
  fieldType: SortOrder
  display: SortOrder
  allowedValues: SortOrder
  isDefault: SortOrder
  customerId: SortOrder
  customer: CustomerOrderByWithRelationInput
  order: SortOrder
}

input DynamicUserFieldsWhereUniqueInput {
  id: Int
}

enum DynamicUserFieldsScalarFieldEnum {
  id
  fieldName
  fieldLabel
  fieldType
  display
  allowedValues
  isDefault
  customerId
  order
}

type List {
  id: Int!
  customerId: Int!
  name: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  parentId: Int
  _count: ListCount
  customer: Customer!
  listCompanies(
    where: ListCompanyWhereInput
    orderBy: [ListCompanyOrderByWithRelationInput!]
    cursor: ListCompanyWhereUniqueInput
    take: Int
    skip: Int
    distinct: [ListCompanyScalarFieldEnum!]
  ): [ListCompany!]!
  parent: List
  children(
    where: ListWhereInput
    orderBy: [ListOrderByWithRelationInput!]
    cursor: ListWhereUniqueInput
    take: Int
    skip: Int
    distinct: [ListScalarFieldEnum!]
  ): [List!]!
}

type ListCount {
  listCompanies: Int!
  children: Int!
}

type ListCompany {
  id: Int!
  listId: Int!
  companyId: Int!
  createdAt: DateTime!
  updatedAt: DateTime!
  list: List!
  company: Company!
}

input ListCompanyOrderByWithRelationInput {
  id: SortOrder
  listId: SortOrder
  list: ListOrderByWithRelationInput
  companyId: SortOrder
  company: CompanyOrderByWithRelationInput
  createdAt: SortOrder
  updatedAt: SortOrder
}

input ListOrderByWithRelationInput {
  id: SortOrder
  customerId: SortOrder
  name: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  customer: CustomerOrderByWithRelationInput
  listCompanies: ListCompanyOrderByRelationAggregateInput
  parentId: SortOrder
  parent: ListOrderByWithRelationInput
  children: ListOrderByRelationAggregateInput
}

input ListCompanyWhereUniqueInput {
  id: Int
  listId_companyId: ListCompanyListIdCompanyIdCompoundUniqueInput
}

input ListCompanyListIdCompanyIdCompoundUniqueInput {
  listId: Int!
  companyId: Int!
}

enum ListCompanyScalarFieldEnum {
  id
  listId
  companyId
  createdAt
  updatedAt
}

input ListWhereUniqueInput {
  id: Int
  customerId_name: ListCustomerIdNameCompoundUniqueInput
}

input ListCustomerIdNameCompoundUniqueInput {
  customerId: Int!
  name: String!
}

enum ListScalarFieldEnum {
  id
  customerId
  name
  createdAt
  updatedAt
  parentId
}

type UseCaseCollections {
  id: Int!
  name: String!
  customerId: Int!
  default: Boolean!
  createdAt: DateTime!
  updatedAt: DateTime
  _count: UseCaseCollectionsCount
  customer: Customer!
  useCasesOnCollections(
    where: UseCasesOnCollectionsWhereInput
    orderBy: [UseCasesOnCollectionsOrderByWithRelationInput!]
    cursor: UseCasesOnCollectionsWhereUniqueInput
    take: Int
    skip: Int
    distinct: [UseCasesOnCollectionsScalarFieldEnum!]
  ): [UseCasesOnCollections!]!
}

type UseCaseCollectionsCount {
  useCasesOnCollections: Int!
}

type UseCasesOnCollections {
  id: Int!
  status: Boolean!
  useCaseId: Int!
  collectionId: Int!
  createdAt: DateTime!
  updatedAt: DateTime
  useCase: UseCases!
  collection: UseCaseCollections!
}

type UseCases {
  id: Int!
  name: String!
  displayName: String!
  createdAt: DateTime!
  updatedAt: DateTime
  _count: UseCasesCount
  useCasesOnCollections(
    where: UseCasesOnCollectionsWhereInput
    orderBy: [UseCasesOnCollectionsOrderByWithRelationInput!]
    cursor: UseCasesOnCollectionsWhereUniqueInput
    take: Int
    skip: Int
    distinct: [UseCasesOnCollectionsScalarFieldEnum!]
  ): [UseCasesOnCollections!]!
}

type UseCasesCount {
  useCasesOnCollections: Int!
}

input UseCasesOnCollectionsOrderByWithRelationInput {
  id: SortOrder
  status: SortOrder
  useCaseId: SortOrder
  useCase: UseCasesOrderByWithRelationInput
  collectionId: SortOrder
  collection: UseCaseCollectionsOrderByWithRelationInput
  createdAt: SortOrder
  updatedAt: SortOrder
}

input UseCasesOrderByWithRelationInput {
  id: SortOrder
  name: SortOrder
  displayName: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  useCasesOnCollections: UseCasesOnCollectionsOrderByRelationAggregateInput
}

input UseCasesOnCollectionsOrderByRelationAggregateInput {
  _count: SortOrder
}

input UseCaseCollectionsOrderByWithRelationInput {
  id: SortOrder
  name: SortOrder
  customerId: SortOrder
  customer: CustomerOrderByWithRelationInput
  default: SortOrder
  useCasesOnCollections: UseCasesOnCollectionsOrderByRelationAggregateInput
  createdAt: SortOrder
  updatedAt: SortOrder
}

input UseCasesOnCollectionsWhereUniqueInput {
  id: Int
}

enum UseCasesOnCollectionsScalarFieldEnum {
  id
  status
  useCaseId
  collectionId
  createdAt
  updatedAt
}

input UseCaseCollectionsWhereUniqueInput {
  id: Int
}

enum UseCaseCollectionsScalarFieldEnum {
  id
  name
  customerId
  default
  createdAt
  updatedAt
}

type DataSourcesOnCustomer {
  id: Int!
  status: Boolean!
  dataSourceId: Int!
  customerId: Int!
  createdAt: DateTime!
  updatedAt: DateTime
  dataSource: DataSources!
  customer: Customer!
}

type DataSources {
  id: Int!
  name: String!
  icon: String
  sourceType: SourceTypes!
  createdAt: DateTime!
  _count: DataSourcesCount
  dataObjects(
    where: CustomerDataObjectsWhereInput
    orderBy: [CustomerDataObjectsOrderByWithRelationInput!]
    cursor: CustomerDataObjectsWhereUniqueInput
    take: Int
    skip: Int
    distinct: [CustomerDataObjectsScalarFieldEnum!]
  ): [CustomerDataObjects!]!
  customerDataSources(
    where: DataSourcesOnCustomerWhereInput
    orderBy: [DataSourcesOnCustomerOrderByWithRelationInput!]
    cursor: DataSourcesOnCustomerWhereUniqueInput
    take: Int
    skip: Int
    distinct: [DataSourcesOnCustomerScalarFieldEnum!]
  ): [DataSourcesOnCustomer!]!
}

type DataSourcesCount {
  dataObjects: Int!
  customerDataSources: Int!
}

type CustomerDataObjects {
  id: Int!
  name: String!
  displayName: String!
  dataSourceId: Int!
  createdAt: DateTime!
  _count: CustomerDataObjectsCount
  dataSource: DataSources!
  dataObjectCollectionOnDataObject(
    where: DataObjectCollectionOnDataObjectWhereInput
    orderBy: [DataObjectCollectionOnDataObjectOrderByWithRelationInput!]
    cursor: DataObjectCollectionOnDataObjectWhereUniqueInput
    take: Int
    skip: Int
    distinct: [DataObjectCollectionOnDataObjectScalarFieldEnum!]
  ): [DataObjectCollectionOnDataObject!]!
}

type CustomerDataObjectsCount {
  dataObjectCollectionOnDataObject: Int!
}

type DataObjectCollectionOnDataObject {
  id: Int!
  dataObjectCollectionId: Int!
  status: Boolean!
  dataObjectId: Int!
  createdAt: DateTime!
  updatedAt: DateTime
  dataObjectCollections: DataObjectCollections!
  dataObject: CustomerDataObjects!
}

type DataObjectCollections {
  id: Int!
  name: String!
  customerId: Int!
  default: Boolean!
  isAllAccess: Boolean!
  createdAt: DateTime!
  updatedAt: DateTime
  _count: DataObjectCollectionsCount
  dataObjectCollectionOnDataObject(
    where: DataObjectCollectionOnDataObjectWhereInput
    orderBy: [DataObjectCollectionOnDataObjectOrderByWithRelationInput!]
    cursor: DataObjectCollectionOnDataObjectWhereUniqueInput
    take: Int
    skip: Int
    distinct: [DataObjectCollectionOnDataObjectScalarFieldEnum!]
  ): [DataObjectCollectionOnDataObject!]!
  customer: Customer!
}

type DataObjectCollectionsCount {
  dataObjectCollectionOnDataObject: Int!
}

input DataObjectCollectionOnDataObjectOrderByWithRelationInput {
  id: SortOrder
  dataObjectCollections: DataObjectCollectionsOrderByWithRelationInput
  dataObjectCollectionId: SortOrder
  status: SortOrder
  dataObjectId: SortOrder
  dataObject: CustomerDataObjectsOrderByWithRelationInput
  createdAt: SortOrder
  updatedAt: SortOrder
}

input DataObjectCollectionsOrderByWithRelationInput {
  id: SortOrder
  name: SortOrder
  dataObjectCollectionOnDataObject: DataObjectCollectionOnDataObjectOrderByRelationAggregateInput
  customerId: SortOrder
  customer: CustomerOrderByWithRelationInput
  default: SortOrder
  isAllAccess: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input DataObjectCollectionOnDataObjectOrderByRelationAggregateInput {
  _count: SortOrder
}

input CustomerDataObjectsOrderByWithRelationInput {
  id: SortOrder
  name: SortOrder
  displayName: SortOrder
  dataSourceId: SortOrder
  dataSource: DataSourcesOrderByWithRelationInput
  dataObjectCollectionOnDataObject: DataObjectCollectionOnDataObjectOrderByRelationAggregateInput
  createdAt: SortOrder
}

input DataSourcesOrderByWithRelationInput {
  id: SortOrder
  name: SortOrder
  icon: SortOrder
  dataObjects: CustomerDataObjectsOrderByRelationAggregateInput
  sourceType: SortOrder
  createdAt: SortOrder
  customerDataSources: DataSourcesOnCustomerOrderByRelationAggregateInput
}

input CustomerDataObjectsOrderByRelationAggregateInput {
  _count: SortOrder
}

input DataObjectCollectionOnDataObjectWhereUniqueInput {
  id: Int
  dataObjectCollectionId_dataObjectId: DataObjectCollectionOnDataObjectDataObjectCollectionIdDataObjectIdCompoundUniqueInput
}

input DataObjectCollectionOnDataObjectDataObjectCollectionIdDataObjectIdCompoundUniqueInput {
  dataObjectCollectionId: Int!
  dataObjectId: Int!
}

enum DataObjectCollectionOnDataObjectScalarFieldEnum {
  id
  dataObjectCollectionId
  status
  dataObjectId
  createdAt
  updatedAt
}

input CustomerDataObjectsWhereUniqueInput {
  id: Int
}

enum CustomerDataObjectsScalarFieldEnum {
  id
  name
  displayName
  dataSourceId
  createdAt
}

input DataSourcesOnCustomerOrderByWithRelationInput {
  id: SortOrder
  status: SortOrder
  dataSourceId: SortOrder
  dataSource: DataSourcesOrderByWithRelationInput
  customerId: SortOrder
  customer: CustomerOrderByWithRelationInput
  createdAt: SortOrder
  updatedAt: SortOrder
}

input DataSourcesOnCustomerWhereUniqueInput {
  id: Int
}

enum DataSourcesOnCustomerScalarFieldEnum {
  id
  status
  dataSourceId
  customerId
  createdAt
  updatedAt
}

input DataObjectCollectionsWhereUniqueInput {
  id: Int
}

enum DataObjectCollectionsScalarFieldEnum {
  id
  name
  customerId
  default
  isAllAccess
  createdAt
  updatedAt
}

type Competitor {
  id: Int!
  name: String!
  createdAt: DateTime!
  companyId: Int
  Company: Company
}

input CompetitorOrderByWithRelationInput {
  id: SortOrder
  name: SortOrder
  createdAt: SortOrder
  Company: CompanyOrderByWithRelationInput
  companyId: SortOrder
}

input CompetitorWhereUniqueInput {
  id: Int
}

enum CompetitorScalarFieldEnum {
  id
  name
  createdAt
  companyId
}

type Product {
  id: Int!
  name: String!
  orderStartDate: DateTime!
  orderEndDate: DateTime!
  orderTerms: Int!
  monthlyUnitPrice: Int!
  quantity: Int!
  totalPrice: Int!
  createdAt: DateTime!
  updatedAt: DateTime!
  companyId: Int!
  Company: Company!
}

input ProductOrderByWithRelationInput {
  id: SortOrder
  name: SortOrder
  orderStartDate: SortOrder
  orderEndDate: SortOrder
  orderTerms: SortOrder
  monthlyUnitPrice: SortOrder
  quantity: SortOrder
  totalPrice: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  Company: CompanyOrderByWithRelationInput
  companyId: SortOrder
}

input ProductWhereUniqueInput {
  id: Int
}

enum ProductScalarFieldEnum {
  id
  name
  orderStartDate
  orderEndDate
  orderTerms
  monthlyUnitPrice
  quantity
  totalPrice
  createdAt
  updatedAt
  companyId
}

input ContactsWhereUniqueInput {
  id: Int
  email: String
}

enum ContactsScalarFieldEnum {
  id
  email
  name
  workPhone
  mobilePhone
  createdAt
  updatedAt
  primary
  image
  companyId
}

input AccountWhereUniqueInput {
  id: Int
  AccountUUID: String
}

enum AccountScalarFieldEnum {
  id
  accountName
  AccountUUID
}

type AggregateAccount {
  _count: AccountCountAggregate
  _avg: AccountAvgAggregate
  _sum: AccountSumAggregate
  _min: AccountMinAggregate
  _max: AccountMaxAggregate
}

type AccountCountAggregate {
  id: Int!
  accountName: Int!
  AccountUUID: Int!
  _all: Int!
}

type AccountAvgAggregate {
  id: Float
}

type AccountSumAggregate {
  id: Int
}

type AccountMinAggregate {
  id: Int
  accountName: String
  AccountUUID: String
}

type AccountMaxAggregate {
  id: Int
  accountName: String
  AccountUUID: String
}

type AccountGroupBy {
  id: Int!
  accountName: String!
  AccountUUID: String!
  _count: AccountCountAggregate
  _avg: AccountAvgAggregate
  _sum: AccountSumAggregate
  _min: AccountMinAggregate
  _max: AccountMaxAggregate
}

input AccountOrderByWithAggregationInput {
  id: SortOrder
  accountName: SortOrder
  AccountUUID: SortOrder
  _count: AccountCountOrderByAggregateInput
  _avg: AccountAvgOrderByAggregateInput
  _max: AccountMaxOrderByAggregateInput
  _min: AccountMinOrderByAggregateInput
  _sum: AccountSumOrderByAggregateInput
}

input AccountCountOrderByAggregateInput {
  id: SortOrder
  accountName: SortOrder
  AccountUUID: SortOrder
}

input AccountAvgOrderByAggregateInput {
  id: SortOrder
}

input AccountMaxOrderByAggregateInput {
  id: SortOrder
  accountName: SortOrder
  AccountUUID: SortOrder
}

input AccountMinOrderByAggregateInput {
  id: SortOrder
  accountName: SortOrder
  AccountUUID: SortOrder
}

input AccountSumOrderByAggregateInput {
  id: SortOrder
}

input AccountScalarWhereWithAggregatesInput {
  AND: [AccountScalarWhereWithAggregatesInput!]
  OR: [AccountScalarWhereWithAggregatesInput!]
  NOT: [AccountScalarWhereWithAggregatesInput!]
  id: IntWithAggregatesFilter
  accountName: StringWithAggregatesFilter
  AccountUUID: StringWithAggregatesFilter
}

input IntWithAggregatesFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: NestedIntWithAggregatesFilter
  _count: NestedIntFilter
  _avg: NestedFloatFilter
  _sum: NestedIntFilter
  _min: NestedIntFilter
  _max: NestedIntFilter
}

input NestedIntWithAggregatesFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: NestedIntWithAggregatesFilter
  _count: NestedIntFilter
  _avg: NestedFloatFilter
  _sum: NestedIntFilter
  _min: NestedIntFilter
  _max: NestedIntFilter
}

input StringWithAggregatesFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringWithAggregatesFilter
  _count: NestedIntFilter
  _min: NestedStringFilter
  _max: NestedStringFilter
}

input NestedStringWithAggregatesFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringWithAggregatesFilter
  _count: NestedIntFilter
  _min: NestedStringFilter
  _max: NestedStringFilter
}

type AggregateCompany {
  _count: CompanyCountAggregate
  _avg: CompanyAvgAggregate
  _sum: CompanySumAggregate
  _min: CompanyMinAggregate
  _max: CompanyMaxAggregate
}

type CompanyCountAggregate {
  id: Int!
  leadSourceId: Int!
  annualRecurringRevenue: Int!
  customerId: Int!
  expectedToCloseAt: Int!
  fiscalYearStartMonth: Int!
  name: Int!
  companyType: Int!
  primaryContactId: Int!
  seatSize: Int!
  createdAt: Int!
  updatedAt: Int!
  fiscalYear: Int!
  parentId: Int!
  accountId: Int!
  renewalDate: Int!
  referredOn: Int!
  latestReferenceId: Int!
  _all: Int!
}

type CompanyAvgAggregate {
  id: Float
  leadSourceId: Float
  annualRecurringRevenue: Float
  customerId: Float
  fiscalYearStartMonth: Float
  primaryContactId: Float
  seatSize: Float
  fiscalYear: Float
  parentId: Float
  accountId: Float
  latestReferenceId: Float
}

type CompanySumAggregate {
  id: Int
  leadSourceId: Int
  annualRecurringRevenue: Int
  customerId: Int
  fiscalYearStartMonth: Int
  primaryContactId: Int
  seatSize: Int
  fiscalYear: Int
  parentId: Int
  accountId: Int
  latestReferenceId: Int
}

type CompanyMinAggregate {
  id: Int
  leadSourceId: Int
  annualRecurringRevenue: Int
  customerId: Int
  expectedToCloseAt: DateTime
  fiscalYearStartMonth: Int
  name: String
  companyType: CompanyType
  primaryContactId: Int
  seatSize: Int
  createdAt: DateTime
  updatedAt: DateTime
  fiscalYear: Int
  parentId: Int
  accountId: Int
  renewalDate: DateTime
  referredOn: DateTime
  latestReferenceId: Int
}

type CompanyMaxAggregate {
  id: Int
  leadSourceId: Int
  annualRecurringRevenue: Int
  customerId: Int
  expectedToCloseAt: DateTime
  fiscalYearStartMonth: Int
  name: String
  companyType: CompanyType
  primaryContactId: Int
  seatSize: Int
  createdAt: DateTime
  updatedAt: DateTime
  fiscalYear: Int
  parentId: Int
  accountId: Int
  renewalDate: DateTime
  referredOn: DateTime
  latestReferenceId: Int
}

type CompanyGroupBy {
  id: Int!
  leadSourceId: Int
  annualRecurringRevenue: Int
  customerId: Int!
  expectedToCloseAt: DateTime
  fiscalYearStartMonth: Int
  name: String!
  companyType: CompanyType!
  primaryContactId: Int
  seatSize: Int
  createdAt: DateTime!
  updatedAt: DateTime!
  fiscalYear: Int!
  parentId: Int
  accountId: Int!
  renewalDate: DateTime
  referredOn: DateTime
  latestReferenceId: Int
  _count: CompanyCountAggregate
  _avg: CompanyAvgAggregate
  _sum: CompanySumAggregate
  _min: CompanyMinAggregate
  _max: CompanyMaxAggregate
}

input CompanyOrderByWithAggregationInput {
  id: SortOrder
  leadSourceId: SortOrder
  annualRecurringRevenue: SortOrder
  customerId: SortOrder
  expectedToCloseAt: SortOrder
  fiscalYearStartMonth: SortOrder
  name: SortOrder
  companyType: SortOrder
  primaryContactId: SortOrder
  seatSize: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  fiscalYear: SortOrder
  parentId: SortOrder
  accountId: SortOrder
  renewalDate: SortOrder
  referredOn: SortOrder
  latestReferenceId: SortOrder
  _count: CompanyCountOrderByAggregateInput
  _avg: CompanyAvgOrderByAggregateInput
  _max: CompanyMaxOrderByAggregateInput
  _min: CompanyMinOrderByAggregateInput
  _sum: CompanySumOrderByAggregateInput
}

input CompanyCountOrderByAggregateInput {
  id: SortOrder
  leadSourceId: SortOrder
  annualRecurringRevenue: SortOrder
  customerId: SortOrder
  expectedToCloseAt: SortOrder
  fiscalYearStartMonth: SortOrder
  name: SortOrder
  companyType: SortOrder
  primaryContactId: SortOrder
  seatSize: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  fiscalYear: SortOrder
  parentId: SortOrder
  accountId: SortOrder
  renewalDate: SortOrder
  referredOn: SortOrder
  latestReferenceId: SortOrder
}

input CompanyAvgOrderByAggregateInput {
  id: SortOrder
  leadSourceId: SortOrder
  annualRecurringRevenue: SortOrder
  customerId: SortOrder
  fiscalYearStartMonth: SortOrder
  primaryContactId: SortOrder
  seatSize: SortOrder
  fiscalYear: SortOrder
  parentId: SortOrder
  accountId: SortOrder
  latestReferenceId: SortOrder
}

input CompanyMaxOrderByAggregateInput {
  id: SortOrder
  leadSourceId: SortOrder
  annualRecurringRevenue: SortOrder
  customerId: SortOrder
  expectedToCloseAt: SortOrder
  fiscalYearStartMonth: SortOrder
  name: SortOrder
  companyType: SortOrder
  primaryContactId: SortOrder
  seatSize: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  fiscalYear: SortOrder
  parentId: SortOrder
  accountId: SortOrder
  renewalDate: SortOrder
  referredOn: SortOrder
  latestReferenceId: SortOrder
}

input CompanyMinOrderByAggregateInput {
  id: SortOrder
  leadSourceId: SortOrder
  annualRecurringRevenue: SortOrder
  customerId: SortOrder
  expectedToCloseAt: SortOrder
  fiscalYearStartMonth: SortOrder
  name: SortOrder
  companyType: SortOrder
  primaryContactId: SortOrder
  seatSize: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  fiscalYear: SortOrder
  parentId: SortOrder
  accountId: SortOrder
  renewalDate: SortOrder
  referredOn: SortOrder
  latestReferenceId: SortOrder
}

input CompanySumOrderByAggregateInput {
  id: SortOrder
  leadSourceId: SortOrder
  annualRecurringRevenue: SortOrder
  customerId: SortOrder
  fiscalYearStartMonth: SortOrder
  primaryContactId: SortOrder
  seatSize: SortOrder
  fiscalYear: SortOrder
  parentId: SortOrder
  accountId: SortOrder
  latestReferenceId: SortOrder
}

input CompanyScalarWhereWithAggregatesInput {
  AND: [CompanyScalarWhereWithAggregatesInput!]
  OR: [CompanyScalarWhereWithAggregatesInput!]
  NOT: [CompanyScalarWhereWithAggregatesInput!]
  id: IntWithAggregatesFilter
  leadSourceId: IntNullableWithAggregatesFilter
  annualRecurringRevenue: IntNullableWithAggregatesFilter
  customerId: IntWithAggregatesFilter
  expectedToCloseAt: DateTimeNullableWithAggregatesFilter
  fiscalYearStartMonth: IntNullableWithAggregatesFilter
  name: StringWithAggregatesFilter
  companyType: EnumCompanyTypeWithAggregatesFilter
  primaryContactId: IntNullableWithAggregatesFilter
  seatSize: IntNullableWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
  fiscalYear: IntWithAggregatesFilter
  parentId: IntNullableWithAggregatesFilter
  accountId: IntWithAggregatesFilter
  renewalDate: DateTimeNullableWithAggregatesFilter
  referredOn: DateTimeNullableWithAggregatesFilter
  latestReferenceId: IntNullableWithAggregatesFilter
}

input IntNullableWithAggregatesFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: NestedIntNullableWithAggregatesFilter
  _count: NestedIntNullableFilter
  _avg: NestedFloatNullableFilter
  _sum: NestedIntNullableFilter
  _min: NestedIntNullableFilter
  _max: NestedIntNullableFilter
}

input NestedIntNullableWithAggregatesFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: NestedIntNullableWithAggregatesFilter
  _count: NestedIntNullableFilter
  _avg: NestedFloatNullableFilter
  _sum: NestedIntNullableFilter
  _min: NestedIntNullableFilter
  _max: NestedIntNullableFilter
}

input NestedFloatNullableFilter {
  equals: Float
  in: [Float!]
  notIn: [Float!]
  lt: Float
  lte: Float
  gt: Float
  gte: Float
  not: NestedFloatNullableFilter
}

input DateTimeNullableWithAggregatesFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: NestedDateTimeNullableWithAggregatesFilter
  _count: NestedIntNullableFilter
  _min: NestedDateTimeNullableFilter
  _max: NestedDateTimeNullableFilter
}

input NestedDateTimeNullableWithAggregatesFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: NestedDateTimeNullableWithAggregatesFilter
  _count: NestedIntNullableFilter
  _min: NestedDateTimeNullableFilter
  _max: NestedDateTimeNullableFilter
}

input EnumCompanyTypeWithAggregatesFilter {
  equals: CompanyType
  in: [CompanyType!]
  notIn: [CompanyType!]
  not: NestedEnumCompanyTypeWithAggregatesFilter
  _count: NestedIntFilter
  _min: NestedEnumCompanyTypeFilter
  _max: NestedEnumCompanyTypeFilter
}

input NestedEnumCompanyTypeWithAggregatesFilter {
  equals: CompanyType
  in: [CompanyType!]
  notIn: [CompanyType!]
  not: NestedEnumCompanyTypeWithAggregatesFilter
  _count: NestedIntFilter
  _min: NestedEnumCompanyTypeFilter
  _max: NestedEnumCompanyTypeFilter
}

input DateTimeWithAggregatesFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: NestedDateTimeWithAggregatesFilter
  _count: NestedIntFilter
  _min: NestedDateTimeFilter
  _max: NestedDateTimeFilter
}

input NestedDateTimeWithAggregatesFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: NestedDateTimeWithAggregatesFilter
  _count: NestedIntFilter
  _min: NestedDateTimeFilter
  _max: NestedDateTimeFilter
}

type AggregateCompanyStarred {
  _count: CompanyStarredCountAggregate
  _avg: CompanyStarredAvgAggregate
  _sum: CompanyStarredSumAggregate
  _min: CompanyStarredMinAggregate
  _max: CompanyStarredMaxAggregate
}

type CompanyStarredCountAggregate {
  dummy: Int!
  createdAt: Int!
  companyId: Int!
  userId: Int!
  _all: Int!
}

type CompanyStarredAvgAggregate {
  dummy: Float
  companyId: Float
  userId: Float
}

type CompanyStarredSumAggregate {
  dummy: Int
  companyId: Int
  userId: Int
}

type CompanyStarredMinAggregate {
  dummy: Int
  createdAt: DateTime
  companyId: Int
  userId: Int
}

type CompanyStarredMaxAggregate {
  dummy: Int
  createdAt: DateTime
  companyId: Int
  userId: Int
}

type CompanyStarredGroupBy {
  dummy: Int
  createdAt: DateTime!
  companyId: Int!
  userId: Int!
  _count: CompanyStarredCountAggregate
  _avg: CompanyStarredAvgAggregate
  _sum: CompanyStarredSumAggregate
  _min: CompanyStarredMinAggregate
  _max: CompanyStarredMaxAggregate
}

input CompanyStarredOrderByWithAggregationInput {
  dummy: SortOrder
  createdAt: SortOrder
  companyId: SortOrder
  userId: SortOrder
  _count: CompanyStarredCountOrderByAggregateInput
  _avg: CompanyStarredAvgOrderByAggregateInput
  _max: CompanyStarredMaxOrderByAggregateInput
  _min: CompanyStarredMinOrderByAggregateInput
  _sum: CompanyStarredSumOrderByAggregateInput
}

input CompanyStarredCountOrderByAggregateInput {
  dummy: SortOrder
  createdAt: SortOrder
  companyId: SortOrder
  userId: SortOrder
}

input CompanyStarredAvgOrderByAggregateInput {
  dummy: SortOrder
  companyId: SortOrder
  userId: SortOrder
}

input CompanyStarredMaxOrderByAggregateInput {
  dummy: SortOrder
  createdAt: SortOrder
  companyId: SortOrder
  userId: SortOrder
}

input CompanyStarredMinOrderByAggregateInput {
  dummy: SortOrder
  createdAt: SortOrder
  companyId: SortOrder
  userId: SortOrder
}

input CompanyStarredSumOrderByAggregateInput {
  dummy: SortOrder
  companyId: SortOrder
  userId: SortOrder
}

input CompanyStarredScalarWhereWithAggregatesInput {
  AND: [CompanyStarredScalarWhereWithAggregatesInput!]
  OR: [CompanyStarredScalarWhereWithAggregatesInput!]
  NOT: [CompanyStarredScalarWhereWithAggregatesInput!]
  dummy: IntNullableWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  companyId: IntWithAggregatesFilter
  userId: IntWithAggregatesFilter
}

type AggregateCompetitor {
  _count: CompetitorCountAggregate
  _avg: CompetitorAvgAggregate
  _sum: CompetitorSumAggregate
  _min: CompetitorMinAggregate
  _max: CompetitorMaxAggregate
}

type CompetitorCountAggregate {
  id: Int!
  name: Int!
  createdAt: Int!
  companyId: Int!
  _all: Int!
}

type CompetitorAvgAggregate {
  id: Float
  companyId: Float
}

type CompetitorSumAggregate {
  id: Int
  companyId: Int
}

type CompetitorMinAggregate {
  id: Int
  name: String
  createdAt: DateTime
  companyId: Int
}

type CompetitorMaxAggregate {
  id: Int
  name: String
  createdAt: DateTime
  companyId: Int
}

type CompetitorGroupBy {
  id: Int!
  name: String!
  createdAt: DateTime!
  companyId: Int
  _count: CompetitorCountAggregate
  _avg: CompetitorAvgAggregate
  _sum: CompetitorSumAggregate
  _min: CompetitorMinAggregate
  _max: CompetitorMaxAggregate
}

input CompetitorOrderByWithAggregationInput {
  id: SortOrder
  name: SortOrder
  createdAt: SortOrder
  companyId: SortOrder
  _count: CompetitorCountOrderByAggregateInput
  _avg: CompetitorAvgOrderByAggregateInput
  _max: CompetitorMaxOrderByAggregateInput
  _min: CompetitorMinOrderByAggregateInput
  _sum: CompetitorSumOrderByAggregateInput
}

input CompetitorCountOrderByAggregateInput {
  id: SortOrder
  name: SortOrder
  createdAt: SortOrder
  companyId: SortOrder
}

input CompetitorAvgOrderByAggregateInput {
  id: SortOrder
  companyId: SortOrder
}

input CompetitorMaxOrderByAggregateInput {
  id: SortOrder
  name: SortOrder
  createdAt: SortOrder
  companyId: SortOrder
}

input CompetitorMinOrderByAggregateInput {
  id: SortOrder
  name: SortOrder
  createdAt: SortOrder
  companyId: SortOrder
}

input CompetitorSumOrderByAggregateInput {
  id: SortOrder
  companyId: SortOrder
}

input CompetitorScalarWhereWithAggregatesInput {
  AND: [CompetitorScalarWhereWithAggregatesInput!]
  OR: [CompetitorScalarWhereWithAggregatesInput!]
  NOT: [CompetitorScalarWhereWithAggregatesInput!]
  id: IntWithAggregatesFilter
  name: StringWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  companyId: IntNullableWithAggregatesFilter
}

type AggregateContacts {
  _count: ContactsCountAggregate
  _avg: ContactsAvgAggregate
  _sum: ContactsSumAggregate
  _min: ContactsMinAggregate
  _max: ContactsMaxAggregate
}

type ContactsCountAggregate {
  id: Int!
  email: Int!
  name: Int!
  workPhone: Int!
  mobilePhone: Int!
  createdAt: Int!
  updatedAt: Int!
  primary: Int!
  image: Int!
  companyId: Int!
  _all: Int!
}

type ContactsAvgAggregate {
  id: Float
  companyId: Float
}

type ContactsSumAggregate {
  id: Int
  companyId: Int
}

type ContactsMinAggregate {
  id: Int
  email: String
  name: String
  workPhone: String
  mobilePhone: String
  createdAt: DateTime
  updatedAt: DateTime
  primary: Boolean
  image: String
  companyId: Int
}

type ContactsMaxAggregate {
  id: Int
  email: String
  name: String
  workPhone: String
  mobilePhone: String
  createdAt: DateTime
  updatedAt: DateTime
  primary: Boolean
  image: String
  companyId: Int
}

type ContactsGroupBy {
  id: Int!
  email: String!
  name: String!
  workPhone: String
  mobilePhone: String
  createdAt: DateTime!
  updatedAt: DateTime!
  primary: Boolean!
  image: String
  companyId: Int
  _count: ContactsCountAggregate
  _avg: ContactsAvgAggregate
  _sum: ContactsSumAggregate
  _min: ContactsMinAggregate
  _max: ContactsMaxAggregate
}

input ContactsOrderByWithAggregationInput {
  id: SortOrder
  email: SortOrder
  name: SortOrder
  workPhone: SortOrder
  mobilePhone: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  primary: SortOrder
  image: SortOrder
  companyId: SortOrder
  _count: ContactsCountOrderByAggregateInput
  _avg: ContactsAvgOrderByAggregateInput
  _max: ContactsMaxOrderByAggregateInput
  _min: ContactsMinOrderByAggregateInput
  _sum: ContactsSumOrderByAggregateInput
}

input ContactsCountOrderByAggregateInput {
  id: SortOrder
  email: SortOrder
  name: SortOrder
  workPhone: SortOrder
  mobilePhone: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  primary: SortOrder
  image: SortOrder
  companyId: SortOrder
}

input ContactsAvgOrderByAggregateInput {
  id: SortOrder
  companyId: SortOrder
}

input ContactsMaxOrderByAggregateInput {
  id: SortOrder
  email: SortOrder
  name: SortOrder
  workPhone: SortOrder
  mobilePhone: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  primary: SortOrder
  image: SortOrder
  companyId: SortOrder
}

input ContactsMinOrderByAggregateInput {
  id: SortOrder
  email: SortOrder
  name: SortOrder
  workPhone: SortOrder
  mobilePhone: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  primary: SortOrder
  image: SortOrder
  companyId: SortOrder
}

input ContactsSumOrderByAggregateInput {
  id: SortOrder
  companyId: SortOrder
}

input ContactsScalarWhereWithAggregatesInput {
  AND: [ContactsScalarWhereWithAggregatesInput!]
  OR: [ContactsScalarWhereWithAggregatesInput!]
  NOT: [ContactsScalarWhereWithAggregatesInput!]
  id: IntWithAggregatesFilter
  email: StringWithAggregatesFilter
  name: StringWithAggregatesFilter
  workPhone: StringNullableWithAggregatesFilter
  mobilePhone: StringNullableWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
  primary: BoolWithAggregatesFilter
  image: StringNullableWithAggregatesFilter
  companyId: IntNullableWithAggregatesFilter
}

input StringNullableWithAggregatesFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringNullableWithAggregatesFilter
  _count: NestedIntNullableFilter
  _min: NestedStringNullableFilter
  _max: NestedStringNullableFilter
}

input NestedStringNullableWithAggregatesFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringNullableWithAggregatesFilter
  _count: NestedIntNullableFilter
  _min: NestedStringNullableFilter
  _max: NestedStringNullableFilter
}

input BoolWithAggregatesFilter {
  equals: Boolean
  not: NestedBoolWithAggregatesFilter
  _count: NestedIntFilter
  _min: NestedBoolFilter
  _max: NestedBoolFilter
}

input NestedBoolWithAggregatesFilter {
  equals: Boolean
  not: NestedBoolWithAggregatesFilter
  _count: NestedIntFilter
  _min: NestedBoolFilter
  _max: NestedBoolFilter
}

input CustomerWhereUniqueInput {
  id: Int
}

enum CustomerScalarFieldEnum {
  id
  name
  type
  favoritedAt
  createdAt
  updatedAt
  oktaClientId
  oktaDomain
  oktaClientSecret
  oktaApiKey
}

type AggregateCustomer {
  _count: CustomerCountAggregate
  _avg: CustomerAvgAggregate
  _sum: CustomerSumAggregate
  _min: CustomerMinAggregate
  _max: CustomerMaxAggregate
}

type CustomerCountAggregate {
  id: Int!
  name: Int!
  type: Int!
  favoritedAt: Int!
  createdAt: Int!
  updatedAt: Int!
  oktaClientId: Int!
  oktaDomain: Int!
  oktaClientSecret: Int!
  oktaApiKey: Int!
  _all: Int!
}

type CustomerAvgAggregate {
  id: Float
}

type CustomerSumAggregate {
  id: Int
}

type CustomerMinAggregate {
  id: Int
  name: String
  type: CustomerType
  favoritedAt: DateTime
  createdAt: DateTime
  updatedAt: DateTime
  oktaClientId: String
  oktaDomain: String
  oktaClientSecret: String
  oktaApiKey: String
}

type CustomerMaxAggregate {
  id: Int
  name: String
  type: CustomerType
  favoritedAt: DateTime
  createdAt: DateTime
  updatedAt: DateTime
  oktaClientId: String
  oktaDomain: String
  oktaClientSecret: String
  oktaApiKey: String
}

type CustomerGroupBy {
  id: Int!
  name: String!
  type: CustomerType!
  favoritedAt: DateTime
  createdAt: DateTime!
  updatedAt: DateTime!
  oktaClientId: String
  oktaDomain: String
  oktaClientSecret: String
  oktaApiKey: String
  _count: CustomerCountAggregate
  _avg: CustomerAvgAggregate
  _sum: CustomerSumAggregate
  _min: CustomerMinAggregate
  _max: CustomerMaxAggregate
}

input CustomerOrderByWithAggregationInput {
  id: SortOrder
  name: SortOrder
  type: SortOrder
  favoritedAt: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  oktaClientId: SortOrder
  oktaDomain: SortOrder
  oktaClientSecret: SortOrder
  oktaApiKey: SortOrder
  _count: CustomerCountOrderByAggregateInput
  _avg: CustomerAvgOrderByAggregateInput
  _max: CustomerMaxOrderByAggregateInput
  _min: CustomerMinOrderByAggregateInput
  _sum: CustomerSumOrderByAggregateInput
}

input CustomerCountOrderByAggregateInput {
  id: SortOrder
  name: SortOrder
  type: SortOrder
  favoritedAt: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  oktaClientId: SortOrder
  oktaDomain: SortOrder
  oktaClientSecret: SortOrder
  oktaApiKey: SortOrder
}

input CustomerAvgOrderByAggregateInput {
  id: SortOrder
}

input CustomerMaxOrderByAggregateInput {
  id: SortOrder
  name: SortOrder
  type: SortOrder
  favoritedAt: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  oktaClientId: SortOrder
  oktaDomain: SortOrder
  oktaClientSecret: SortOrder
  oktaApiKey: SortOrder
}

input CustomerMinOrderByAggregateInput {
  id: SortOrder
  name: SortOrder
  type: SortOrder
  favoritedAt: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  oktaClientId: SortOrder
  oktaDomain: SortOrder
  oktaClientSecret: SortOrder
  oktaApiKey: SortOrder
}

input CustomerSumOrderByAggregateInput {
  id: SortOrder
}

input CustomerScalarWhereWithAggregatesInput {
  AND: [CustomerScalarWhereWithAggregatesInput!]
  OR: [CustomerScalarWhereWithAggregatesInput!]
  NOT: [CustomerScalarWhereWithAggregatesInput!]
  id: IntWithAggregatesFilter
  name: StringWithAggregatesFilter
  type: EnumCustomerTypeWithAggregatesFilter
  favoritedAt: DateTimeNullableWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
  oktaClientId: StringNullableWithAggregatesFilter
  oktaDomain: StringNullableWithAggregatesFilter
  oktaClientSecret: StringNullableWithAggregatesFilter
  oktaApiKey: StringNullableWithAggregatesFilter
}

input EnumCustomerTypeWithAggregatesFilter {
  equals: CustomerType
  in: [CustomerType!]
  notIn: [CustomerType!]
  not: NestedEnumCustomerTypeWithAggregatesFilter
  _count: NestedIntFilter
  _min: NestedEnumCustomerTypeFilter
  _max: NestedEnumCustomerTypeFilter
}

input NestedEnumCustomerTypeWithAggregatesFilter {
  equals: CustomerType
  in: [CustomerType!]
  notIn: [CustomerType!]
  not: NestedEnumCustomerTypeWithAggregatesFilter
  _count: NestedIntFilter
  _min: NestedEnumCustomerTypeFilter
  _max: NestedEnumCustomerTypeFilter
}

type AggregateCustomerDataObjects {
  _count: CustomerDataObjectsCountAggregate
  _avg: CustomerDataObjectsAvgAggregate
  _sum: CustomerDataObjectsSumAggregate
  _min: CustomerDataObjectsMinAggregate
  _max: CustomerDataObjectsMaxAggregate
}

type CustomerDataObjectsCountAggregate {
  id: Int!
  name: Int!
  displayName: Int!
  dataSourceId: Int!
  createdAt: Int!
  _all: Int!
}

type CustomerDataObjectsAvgAggregate {
  id: Float
  dataSourceId: Float
}

type CustomerDataObjectsSumAggregate {
  id: Int
  dataSourceId: Int
}

type CustomerDataObjectsMinAggregate {
  id: Int
  name: String
  displayName: String
  dataSourceId: Int
  createdAt: DateTime
}

type CustomerDataObjectsMaxAggregate {
  id: Int
  name: String
  displayName: String
  dataSourceId: Int
  createdAt: DateTime
}

type CustomerDataObjectsGroupBy {
  id: Int!
  name: String!
  displayName: String!
  dataSourceId: Int!
  createdAt: DateTime!
  _count: CustomerDataObjectsCountAggregate
  _avg: CustomerDataObjectsAvgAggregate
  _sum: CustomerDataObjectsSumAggregate
  _min: CustomerDataObjectsMinAggregate
  _max: CustomerDataObjectsMaxAggregate
}

input CustomerDataObjectsOrderByWithAggregationInput {
  id: SortOrder
  name: SortOrder
  displayName: SortOrder
  dataSourceId: SortOrder
  createdAt: SortOrder
  _count: CustomerDataObjectsCountOrderByAggregateInput
  _avg: CustomerDataObjectsAvgOrderByAggregateInput
  _max: CustomerDataObjectsMaxOrderByAggregateInput
  _min: CustomerDataObjectsMinOrderByAggregateInput
  _sum: CustomerDataObjectsSumOrderByAggregateInput
}

input CustomerDataObjectsCountOrderByAggregateInput {
  id: SortOrder
  name: SortOrder
  displayName: SortOrder
  dataSourceId: SortOrder
  createdAt: SortOrder
}

input CustomerDataObjectsAvgOrderByAggregateInput {
  id: SortOrder
  dataSourceId: SortOrder
}

input CustomerDataObjectsMaxOrderByAggregateInput {
  id: SortOrder
  name: SortOrder
  displayName: SortOrder
  dataSourceId: SortOrder
  createdAt: SortOrder
}

input CustomerDataObjectsMinOrderByAggregateInput {
  id: SortOrder
  name: SortOrder
  displayName: SortOrder
  dataSourceId: SortOrder
  createdAt: SortOrder
}

input CustomerDataObjectsSumOrderByAggregateInput {
  id: SortOrder
  dataSourceId: SortOrder
}

input CustomerDataObjectsScalarWhereWithAggregatesInput {
  AND: [CustomerDataObjectsScalarWhereWithAggregatesInput!]
  OR: [CustomerDataObjectsScalarWhereWithAggregatesInput!]
  NOT: [CustomerDataObjectsScalarWhereWithAggregatesInput!]
  id: IntWithAggregatesFilter
  name: StringWithAggregatesFilter
  displayName: StringWithAggregatesFilter
  dataSourceId: IntWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
}

type AggregateCustomerIntegration {
  _count: CustomerIntegrationCountAggregate
  _avg: CustomerIntegrationAvgAggregate
  _sum: CustomerIntegrationSumAggregate
  _min: CustomerIntegrationMinAggregate
  _max: CustomerIntegrationMaxAggregate
}

type CustomerIntegrationCountAggregate {
  id: Int!
  customerId: Int!
  refreshToken: Int!
  token: Int!
  type: Int!
  url: Int!
  createdAt: Int!
  updatedAt: Int!
  _all: Int!
}

type CustomerIntegrationAvgAggregate {
  id: Float
  customerId: Float
}

type CustomerIntegrationSumAggregate {
  id: Int
  customerId: Int
}

type CustomerIntegrationMinAggregate {
  id: Int
  customerId: Int
  refreshToken: String
  token: String
  type: CustomerIntegrationType
  url: String
  createdAt: DateTime
  updatedAt: DateTime
}

type CustomerIntegrationMaxAggregate {
  id: Int
  customerId: Int
  refreshToken: String
  token: String
  type: CustomerIntegrationType
  url: String
  createdAt: DateTime
  updatedAt: DateTime
}

type CustomerIntegrationGroupBy {
  id: Int!
  customerId: Int!
  refreshToken: String
  token: String!
  type: CustomerIntegrationType!
  url: String
  createdAt: DateTime!
  updatedAt: DateTime!
  _count: CustomerIntegrationCountAggregate
  _avg: CustomerIntegrationAvgAggregate
  _sum: CustomerIntegrationSumAggregate
  _min: CustomerIntegrationMinAggregate
  _max: CustomerIntegrationMaxAggregate
}

input CustomerIntegrationOrderByWithAggregationInput {
  id: SortOrder
  customerId: SortOrder
  refreshToken: SortOrder
  token: SortOrder
  type: SortOrder
  url: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  _count: CustomerIntegrationCountOrderByAggregateInput
  _avg: CustomerIntegrationAvgOrderByAggregateInput
  _max: CustomerIntegrationMaxOrderByAggregateInput
  _min: CustomerIntegrationMinOrderByAggregateInput
  _sum: CustomerIntegrationSumOrderByAggregateInput
}

input CustomerIntegrationCountOrderByAggregateInput {
  id: SortOrder
  customerId: SortOrder
  refreshToken: SortOrder
  token: SortOrder
  type: SortOrder
  url: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input CustomerIntegrationAvgOrderByAggregateInput {
  id: SortOrder
  customerId: SortOrder
}

input CustomerIntegrationMaxOrderByAggregateInput {
  id: SortOrder
  customerId: SortOrder
  refreshToken: SortOrder
  token: SortOrder
  type: SortOrder
  url: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input CustomerIntegrationMinOrderByAggregateInput {
  id: SortOrder
  customerId: SortOrder
  refreshToken: SortOrder
  token: SortOrder
  type: SortOrder
  url: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input CustomerIntegrationSumOrderByAggregateInput {
  id: SortOrder
  customerId: SortOrder
}

input CustomerIntegrationScalarWhereWithAggregatesInput {
  AND: [CustomerIntegrationScalarWhereWithAggregatesInput!]
  OR: [CustomerIntegrationScalarWhereWithAggregatesInput!]
  NOT: [CustomerIntegrationScalarWhereWithAggregatesInput!]
  id: IntWithAggregatesFilter
  customerId: IntWithAggregatesFilter
  refreshToken: StringNullableWithAggregatesFilter
  token: StringWithAggregatesFilter
  type: EnumCustomerIntegrationTypeWithAggregatesFilter
  url: StringNullableWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
}

input EnumCustomerIntegrationTypeWithAggregatesFilter {
  equals: CustomerIntegrationType
  in: [CustomerIntegrationType!]
  notIn: [CustomerIntegrationType!]
  not: NestedEnumCustomerIntegrationTypeWithAggregatesFilter
  _count: NestedIntFilter
  _min: NestedEnumCustomerIntegrationTypeFilter
  _max: NestedEnumCustomerIntegrationTypeFilter
}

input NestedEnumCustomerIntegrationTypeWithAggregatesFilter {
  equals: CustomerIntegrationType
  in: [CustomerIntegrationType!]
  notIn: [CustomerIntegrationType!]
  not: NestedEnumCustomerIntegrationTypeWithAggregatesFilter
  _count: NestedIntFilter
  _min: NestedEnumCustomerIntegrationTypeFilter
  _max: NestedEnumCustomerIntegrationTypeFilter
}

type AggregateDataObjectCollectionOnDataObject {
  _count: DataObjectCollectionOnDataObjectCountAggregate
  _avg: DataObjectCollectionOnDataObjectAvgAggregate
  _sum: DataObjectCollectionOnDataObjectSumAggregate
  _min: DataObjectCollectionOnDataObjectMinAggregate
  _max: DataObjectCollectionOnDataObjectMaxAggregate
}

type DataObjectCollectionOnDataObjectCountAggregate {
  id: Int!
  dataObjectCollectionId: Int!
  status: Int!
  dataObjectId: Int!
  createdAt: Int!
  updatedAt: Int!
  _all: Int!
}

type DataObjectCollectionOnDataObjectAvgAggregate {
  id: Float
  dataObjectCollectionId: Float
  dataObjectId: Float
}

type DataObjectCollectionOnDataObjectSumAggregate {
  id: Int
  dataObjectCollectionId: Int
  dataObjectId: Int
}

type DataObjectCollectionOnDataObjectMinAggregate {
  id: Int
  dataObjectCollectionId: Int
  status: Boolean
  dataObjectId: Int
  createdAt: DateTime
  updatedAt: DateTime
}

type DataObjectCollectionOnDataObjectMaxAggregate {
  id: Int
  dataObjectCollectionId: Int
  status: Boolean
  dataObjectId: Int
  createdAt: DateTime
  updatedAt: DateTime
}

type DataObjectCollectionOnDataObjectGroupBy {
  id: Int!
  dataObjectCollectionId: Int!
  status: Boolean!
  dataObjectId: Int!
  createdAt: DateTime!
  updatedAt: DateTime
  _count: DataObjectCollectionOnDataObjectCountAggregate
  _avg: DataObjectCollectionOnDataObjectAvgAggregate
  _sum: DataObjectCollectionOnDataObjectSumAggregate
  _min: DataObjectCollectionOnDataObjectMinAggregate
  _max: DataObjectCollectionOnDataObjectMaxAggregate
}

input DataObjectCollectionOnDataObjectOrderByWithAggregationInput {
  id: SortOrder
  dataObjectCollectionId: SortOrder
  status: SortOrder
  dataObjectId: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  _count: DataObjectCollectionOnDataObjectCountOrderByAggregateInput
  _avg: DataObjectCollectionOnDataObjectAvgOrderByAggregateInput
  _max: DataObjectCollectionOnDataObjectMaxOrderByAggregateInput
  _min: DataObjectCollectionOnDataObjectMinOrderByAggregateInput
  _sum: DataObjectCollectionOnDataObjectSumOrderByAggregateInput
}

input DataObjectCollectionOnDataObjectCountOrderByAggregateInput {
  id: SortOrder
  dataObjectCollectionId: SortOrder
  status: SortOrder
  dataObjectId: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input DataObjectCollectionOnDataObjectAvgOrderByAggregateInput {
  id: SortOrder
  dataObjectCollectionId: SortOrder
  dataObjectId: SortOrder
}

input DataObjectCollectionOnDataObjectMaxOrderByAggregateInput {
  id: SortOrder
  dataObjectCollectionId: SortOrder
  status: SortOrder
  dataObjectId: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input DataObjectCollectionOnDataObjectMinOrderByAggregateInput {
  id: SortOrder
  dataObjectCollectionId: SortOrder
  status: SortOrder
  dataObjectId: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input DataObjectCollectionOnDataObjectSumOrderByAggregateInput {
  id: SortOrder
  dataObjectCollectionId: SortOrder
  dataObjectId: SortOrder
}

input DataObjectCollectionOnDataObjectScalarWhereWithAggregatesInput {
  AND: [DataObjectCollectionOnDataObjectScalarWhereWithAggregatesInput!]
  OR: [DataObjectCollectionOnDataObjectScalarWhereWithAggregatesInput!]
  NOT: [DataObjectCollectionOnDataObjectScalarWhereWithAggregatesInput!]
  id: IntWithAggregatesFilter
  dataObjectCollectionId: IntWithAggregatesFilter
  status: BoolWithAggregatesFilter
  dataObjectId: IntWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  updatedAt: DateTimeNullableWithAggregatesFilter
}

type AggregateDataObjectCollections {
  _count: DataObjectCollectionsCountAggregate
  _avg: DataObjectCollectionsAvgAggregate
  _sum: DataObjectCollectionsSumAggregate
  _min: DataObjectCollectionsMinAggregate
  _max: DataObjectCollectionsMaxAggregate
}

type DataObjectCollectionsCountAggregate {
  id: Int!
  name: Int!
  customerId: Int!
  default: Int!
  isAllAccess: Int!
  createdAt: Int!
  updatedAt: Int!
  _all: Int!
}

type DataObjectCollectionsAvgAggregate {
  id: Float
  customerId: Float
}

type DataObjectCollectionsSumAggregate {
  id: Int
  customerId: Int
}

type DataObjectCollectionsMinAggregate {
  id: Int
  name: String
  customerId: Int
  default: Boolean
  isAllAccess: Boolean
  createdAt: DateTime
  updatedAt: DateTime
}

type DataObjectCollectionsMaxAggregate {
  id: Int
  name: String
  customerId: Int
  default: Boolean
  isAllAccess: Boolean
  createdAt: DateTime
  updatedAt: DateTime
}

type DataObjectCollectionsGroupBy {
  id: Int!
  name: String!
  customerId: Int!
  default: Boolean!
  isAllAccess: Boolean!
  createdAt: DateTime!
  updatedAt: DateTime
  _count: DataObjectCollectionsCountAggregate
  _avg: DataObjectCollectionsAvgAggregate
  _sum: DataObjectCollectionsSumAggregate
  _min: DataObjectCollectionsMinAggregate
  _max: DataObjectCollectionsMaxAggregate
}

input DataObjectCollectionsOrderByWithAggregationInput {
  id: SortOrder
  name: SortOrder
  customerId: SortOrder
  default: SortOrder
  isAllAccess: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  _count: DataObjectCollectionsCountOrderByAggregateInput
  _avg: DataObjectCollectionsAvgOrderByAggregateInput
  _max: DataObjectCollectionsMaxOrderByAggregateInput
  _min: DataObjectCollectionsMinOrderByAggregateInput
  _sum: DataObjectCollectionsSumOrderByAggregateInput
}

input DataObjectCollectionsCountOrderByAggregateInput {
  id: SortOrder
  name: SortOrder
  customerId: SortOrder
  default: SortOrder
  isAllAccess: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input DataObjectCollectionsAvgOrderByAggregateInput {
  id: SortOrder
  customerId: SortOrder
}

input DataObjectCollectionsMaxOrderByAggregateInput {
  id: SortOrder
  name: SortOrder
  customerId: SortOrder
  default: SortOrder
  isAllAccess: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input DataObjectCollectionsMinOrderByAggregateInput {
  id: SortOrder
  name: SortOrder
  customerId: SortOrder
  default: SortOrder
  isAllAccess: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input DataObjectCollectionsSumOrderByAggregateInput {
  id: SortOrder
  customerId: SortOrder
}

input DataObjectCollectionsScalarWhereWithAggregatesInput {
  AND: [DataObjectCollectionsScalarWhereWithAggregatesInput!]
  OR: [DataObjectCollectionsScalarWhereWithAggregatesInput!]
  NOT: [DataObjectCollectionsScalarWhereWithAggregatesInput!]
  id: IntWithAggregatesFilter
  name: StringWithAggregatesFilter
  customerId: IntWithAggregatesFilter
  default: BoolWithAggregatesFilter
  isAllAccess: BoolWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  updatedAt: DateTimeNullableWithAggregatesFilter
}

input DataSourcesWhereUniqueInput {
  id: Int
}

enum DataSourcesScalarFieldEnum {
  id
  name
  icon
  sourceType
  createdAt
}

type AggregateDataSources {
  _count: DataSourcesCountAggregate
  _avg: DataSourcesAvgAggregate
  _sum: DataSourcesSumAggregate
  _min: DataSourcesMinAggregate
  _max: DataSourcesMaxAggregate
}

type DataSourcesCountAggregate {
  id: Int!
  name: Int!
  icon: Int!
  sourceType: Int!
  createdAt: Int!
  _all: Int!
}

type DataSourcesAvgAggregate {
  id: Float
}

type DataSourcesSumAggregate {
  id: Int
}

type DataSourcesMinAggregate {
  id: Int
  name: String
  icon: String
  sourceType: SourceTypes
  createdAt: DateTime
}

type DataSourcesMaxAggregate {
  id: Int
  name: String
  icon: String
  sourceType: SourceTypes
  createdAt: DateTime
}

type DataSourcesGroupBy {
  id: Int!
  name: String!
  icon: String
  sourceType: SourceTypes!
  createdAt: DateTime!
  _count: DataSourcesCountAggregate
  _avg: DataSourcesAvgAggregate
  _sum: DataSourcesSumAggregate
  _min: DataSourcesMinAggregate
  _max: DataSourcesMaxAggregate
}

input DataSourcesOrderByWithAggregationInput {
  id: SortOrder
  name: SortOrder
  icon: SortOrder
  sourceType: SortOrder
  createdAt: SortOrder
  _count: DataSourcesCountOrderByAggregateInput
  _avg: DataSourcesAvgOrderByAggregateInput
  _max: DataSourcesMaxOrderByAggregateInput
  _min: DataSourcesMinOrderByAggregateInput
  _sum: DataSourcesSumOrderByAggregateInput
}

input DataSourcesCountOrderByAggregateInput {
  id: SortOrder
  name: SortOrder
  icon: SortOrder
  sourceType: SortOrder
  createdAt: SortOrder
}

input DataSourcesAvgOrderByAggregateInput {
  id: SortOrder
}

input DataSourcesMaxOrderByAggregateInput {
  id: SortOrder
  name: SortOrder
  icon: SortOrder
  sourceType: SortOrder
  createdAt: SortOrder
}

input DataSourcesMinOrderByAggregateInput {
  id: SortOrder
  name: SortOrder
  icon: SortOrder
  sourceType: SortOrder
  createdAt: SortOrder
}

input DataSourcesSumOrderByAggregateInput {
  id: SortOrder
}

input DataSourcesScalarWhereWithAggregatesInput {
  AND: [DataSourcesScalarWhereWithAggregatesInput!]
  OR: [DataSourcesScalarWhereWithAggregatesInput!]
  NOT: [DataSourcesScalarWhereWithAggregatesInput!]
  id: IntWithAggregatesFilter
  name: StringWithAggregatesFilter
  icon: StringNullableWithAggregatesFilter
  sourceType: EnumSourceTypesWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
}

input EnumSourceTypesWithAggregatesFilter {
  equals: SourceTypes
  in: [SourceTypes!]
  notIn: [SourceTypes!]
  not: NestedEnumSourceTypesWithAggregatesFilter
  _count: NestedIntFilter
  _min: NestedEnumSourceTypesFilter
  _max: NestedEnumSourceTypesFilter
}

input NestedEnumSourceTypesWithAggregatesFilter {
  equals: SourceTypes
  in: [SourceTypes!]
  notIn: [SourceTypes!]
  not: NestedEnumSourceTypesWithAggregatesFilter
  _count: NestedIntFilter
  _min: NestedEnumSourceTypesFilter
  _max: NestedEnumSourceTypesFilter
}

type AggregateDataSourcesOnCustomer {
  _count: DataSourcesOnCustomerCountAggregate
  _avg: DataSourcesOnCustomerAvgAggregate
  _sum: DataSourcesOnCustomerSumAggregate
  _min: DataSourcesOnCustomerMinAggregate
  _max: DataSourcesOnCustomerMaxAggregate
}

type DataSourcesOnCustomerCountAggregate {
  id: Int!
  status: Int!
  dataSourceId: Int!
  customerId: Int!
  createdAt: Int!
  updatedAt: Int!
  _all: Int!
}

type DataSourcesOnCustomerAvgAggregate {
  id: Float
  dataSourceId: Float
  customerId: Float
}

type DataSourcesOnCustomerSumAggregate {
  id: Int
  dataSourceId: Int
  customerId: Int
}

type DataSourcesOnCustomerMinAggregate {
  id: Int
  status: Boolean
  dataSourceId: Int
  customerId: Int
  createdAt: DateTime
  updatedAt: DateTime
}

type DataSourcesOnCustomerMaxAggregate {
  id: Int
  status: Boolean
  dataSourceId: Int
  customerId: Int
  createdAt: DateTime
  updatedAt: DateTime
}

type DataSourcesOnCustomerGroupBy {
  id: Int!
  status: Boolean!
  dataSourceId: Int!
  customerId: Int!
  createdAt: DateTime!
  updatedAt: DateTime
  _count: DataSourcesOnCustomerCountAggregate
  _avg: DataSourcesOnCustomerAvgAggregate
  _sum: DataSourcesOnCustomerSumAggregate
  _min: DataSourcesOnCustomerMinAggregate
  _max: DataSourcesOnCustomerMaxAggregate
}

input DataSourcesOnCustomerOrderByWithAggregationInput {
  id: SortOrder
  status: SortOrder
  dataSourceId: SortOrder
  customerId: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  _count: DataSourcesOnCustomerCountOrderByAggregateInput
  _avg: DataSourcesOnCustomerAvgOrderByAggregateInput
  _max: DataSourcesOnCustomerMaxOrderByAggregateInput
  _min: DataSourcesOnCustomerMinOrderByAggregateInput
  _sum: DataSourcesOnCustomerSumOrderByAggregateInput
}

input DataSourcesOnCustomerCountOrderByAggregateInput {
  id: SortOrder
  status: SortOrder
  dataSourceId: SortOrder
  customerId: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input DataSourcesOnCustomerAvgOrderByAggregateInput {
  id: SortOrder
  dataSourceId: SortOrder
  customerId: SortOrder
}

input DataSourcesOnCustomerMaxOrderByAggregateInput {
  id: SortOrder
  status: SortOrder
  dataSourceId: SortOrder
  customerId: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input DataSourcesOnCustomerMinOrderByAggregateInput {
  id: SortOrder
  status: SortOrder
  dataSourceId: SortOrder
  customerId: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input DataSourcesOnCustomerSumOrderByAggregateInput {
  id: SortOrder
  dataSourceId: SortOrder
  customerId: SortOrder
}

input DataSourcesOnCustomerScalarWhereWithAggregatesInput {
  AND: [DataSourcesOnCustomerScalarWhereWithAggregatesInput!]
  OR: [DataSourcesOnCustomerScalarWhereWithAggregatesInput!]
  NOT: [DataSourcesOnCustomerScalarWhereWithAggregatesInput!]
  id: IntWithAggregatesFilter
  status: BoolWithAggregatesFilter
  dataSourceId: IntWithAggregatesFilter
  customerId: IntWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  updatedAt: DateTimeNullableWithAggregatesFilter
}

type AggregateDynamicUserFields {
  _count: DynamicUserFieldsCountAggregate
  _avg: DynamicUserFieldsAvgAggregate
  _sum: DynamicUserFieldsSumAggregate
  _min: DynamicUserFieldsMinAggregate
  _max: DynamicUserFieldsMaxAggregate
}

type DynamicUserFieldsCountAggregate {
  id: Int!
  fieldName: Int!
  fieldLabel: Int!
  fieldType: Int!
  display: Int!
  allowedValues: Int!
  isDefault: Int!
  customerId: Int!
  order: Int!
  _all: Int!
}

type DynamicUserFieldsAvgAggregate {
  id: Float
  customerId: Float
  order: Float
}

type DynamicUserFieldsSumAggregate {
  id: Int
  customerId: Int
  order: Int
}

type DynamicUserFieldsMinAggregate {
  id: Int
  fieldName: String
  fieldLabel: String
  fieldType: FieldTypes
  display: Boolean
  isDefault: Boolean
  customerId: Int
  order: Int
}

type DynamicUserFieldsMaxAggregate {
  id: Int
  fieldName: String
  fieldLabel: String
  fieldType: FieldTypes
  display: Boolean
  isDefault: Boolean
  customerId: Int
  order: Int
}

type DynamicUserFieldsGroupBy {
  id: Int!
  fieldName: String!
  fieldLabel: String!
  fieldType: FieldTypes
  display: Boolean!
  allowedValues: JSON
  isDefault: Boolean!
  customerId: Int!
  order: Int
  _count: DynamicUserFieldsCountAggregate
  _avg: DynamicUserFieldsAvgAggregate
  _sum: DynamicUserFieldsSumAggregate
  _min: DynamicUserFieldsMinAggregate
  _max: DynamicUserFieldsMaxAggregate
}

input DynamicUserFieldsOrderByWithAggregationInput {
  id: SortOrder
  fieldName: SortOrder
  fieldLabel: SortOrder
  fieldType: SortOrder
  display: SortOrder
  allowedValues: SortOrder
  isDefault: SortOrder
  customerId: SortOrder
  order: SortOrder
  _count: DynamicUserFieldsCountOrderByAggregateInput
  _avg: DynamicUserFieldsAvgOrderByAggregateInput
  _max: DynamicUserFieldsMaxOrderByAggregateInput
  _min: DynamicUserFieldsMinOrderByAggregateInput
  _sum: DynamicUserFieldsSumOrderByAggregateInput
}

input DynamicUserFieldsCountOrderByAggregateInput {
  id: SortOrder
  fieldName: SortOrder
  fieldLabel: SortOrder
  fieldType: SortOrder
  display: SortOrder
  allowedValues: SortOrder
  isDefault: SortOrder
  customerId: SortOrder
  order: SortOrder
}

input DynamicUserFieldsAvgOrderByAggregateInput {
  id: SortOrder
  customerId: SortOrder
  order: SortOrder
}

input DynamicUserFieldsMaxOrderByAggregateInput {
  id: SortOrder
  fieldName: SortOrder
  fieldLabel: SortOrder
  fieldType: SortOrder
  display: SortOrder
  isDefault: SortOrder
  customerId: SortOrder
  order: SortOrder
}

input DynamicUserFieldsMinOrderByAggregateInput {
  id: SortOrder
  fieldName: SortOrder
  fieldLabel: SortOrder
  fieldType: SortOrder
  display: SortOrder
  isDefault: SortOrder
  customerId: SortOrder
  order: SortOrder
}

input DynamicUserFieldsSumOrderByAggregateInput {
  id: SortOrder
  customerId: SortOrder
  order: SortOrder
}

input DynamicUserFieldsScalarWhereWithAggregatesInput {
  AND: [DynamicUserFieldsScalarWhereWithAggregatesInput!]
  OR: [DynamicUserFieldsScalarWhereWithAggregatesInput!]
  NOT: [DynamicUserFieldsScalarWhereWithAggregatesInput!]
  id: IntWithAggregatesFilter
  fieldName: StringWithAggregatesFilter
  fieldLabel: StringWithAggregatesFilter
  fieldType: EnumFieldTypesNullableWithAggregatesFilter
  display: BoolWithAggregatesFilter
  allowedValues: JsonNullableWithAggregatesFilter
  isDefault: BoolWithAggregatesFilter
  customerId: IntWithAggregatesFilter
  order: IntNullableWithAggregatesFilter
}

input EnumFieldTypesNullableWithAggregatesFilter {
  equals: FieldTypes
  in: [FieldTypes!]
  notIn: [FieldTypes!]
  not: NestedEnumFieldTypesNullableWithAggregatesFilter
  _count: NestedIntNullableFilter
  _min: NestedEnumFieldTypesNullableFilter
  _max: NestedEnumFieldTypesNullableFilter
}

input NestedEnumFieldTypesNullableWithAggregatesFilter {
  equals: FieldTypes
  in: [FieldTypes!]
  notIn: [FieldTypes!]
  not: NestedEnumFieldTypesNullableWithAggregatesFilter
  _count: NestedIntNullableFilter
  _min: NestedEnumFieldTypesNullableFilter
  _max: NestedEnumFieldTypesNullableFilter
}

input JsonNullableWithAggregatesFilter {
  equals: JSON
  lt: JSON
  lte: JSON
  gt: JSON
  gte: JSON
  path: [String!]
  string_contains: String
  string_starts_with: String
  string_ends_with: String
  array_contains: JSON
  array_starts_with: JSON
  array_ends_with: JSON
  not: JSON
  _count: NestedIntNullableFilter
  _min: NestedJsonNullableFilter
  _max: NestedJsonNullableFilter
}

input NestedJsonNullableFilter {
  equals: JSON
  lt: JSON
  lte: JSON
  gt: JSON
  gte: JSON
  path: [String!]
  string_contains: String
  string_starts_with: String
  string_ends_with: String
  array_contains: JSON
  array_starts_with: JSON
  array_ends_with: JSON
  not: JSON
}

type AggregateEvent {
  _count: EventCountAggregate
  _avg: EventAvgAggregate
  _sum: EventSumAggregate
  _min: EventMinAggregate
  _max: EventMaxAggregate
}

type EventCountAggregate {
  id: Int!
  customerId: Int!
  data: Int!
  notifiedAt: Int!
  text: Int!
  type: Int!
  companyId: Int!
  needsAttention: Int!
  createdAt: Int!
  parentEventId: Int!
  messageId: Int!
  _all: Int!
}

type EventAvgAggregate {
  id: Float
  customerId: Float
  companyId: Float
  parentEventId: Float
  messageId: Float
}

type EventSumAggregate {
  id: Int
  customerId: Int
  companyId: Int
  parentEventId: Int
  messageId: Int
}

type EventMinAggregate {
  id: Int
  customerId: Int
  notifiedAt: DateTime
  text: String
  type: EventType
  companyId: Int
  needsAttention: EventAttention
  createdAt: DateTime
  parentEventId: Int
  messageId: Int
}

type EventMaxAggregate {
  id: Int
  customerId: Int
  notifiedAt: DateTime
  text: String
  type: EventType
  companyId: Int
  needsAttention: EventAttention
  createdAt: DateTime
  parentEventId: Int
  messageId: Int
}

type EventGroupBy {
  id: Int!
  customerId: Int!
  data: JSON
  notifiedAt: DateTime
  text: String
  type: EventType!
  companyId: Int
  needsAttention: EventAttention
  createdAt: DateTime!
  parentEventId: Int
  messageId: Int
  _count: EventCountAggregate
  _avg: EventAvgAggregate
  _sum: EventSumAggregate
  _min: EventMinAggregate
  _max: EventMaxAggregate
}

input EventOrderByWithAggregationInput {
  id: SortOrder
  customerId: SortOrder
  data: SortOrder
  notifiedAt: SortOrder
  text: SortOrder
  type: SortOrder
  companyId: SortOrder
  needsAttention: SortOrder
  createdAt: SortOrder
  parentEventId: SortOrder
  messageId: SortOrder
  _count: EventCountOrderByAggregateInput
  _avg: EventAvgOrderByAggregateInput
  _max: EventMaxOrderByAggregateInput
  _min: EventMinOrderByAggregateInput
  _sum: EventSumOrderByAggregateInput
}

input EventCountOrderByAggregateInput {
  id: SortOrder
  customerId: SortOrder
  data: SortOrder
  notifiedAt: SortOrder
  text: SortOrder
  type: SortOrder
  companyId: SortOrder
  needsAttention: SortOrder
  createdAt: SortOrder
  parentEventId: SortOrder
  messageId: SortOrder
}

input EventAvgOrderByAggregateInput {
  id: SortOrder
  customerId: SortOrder
  companyId: SortOrder
  parentEventId: SortOrder
  messageId: SortOrder
}

input EventMaxOrderByAggregateInput {
  id: SortOrder
  customerId: SortOrder
  notifiedAt: SortOrder
  text: SortOrder
  type: SortOrder
  companyId: SortOrder
  needsAttention: SortOrder
  createdAt: SortOrder
  parentEventId: SortOrder
  messageId: SortOrder
}

input EventMinOrderByAggregateInput {
  id: SortOrder
  customerId: SortOrder
  notifiedAt: SortOrder
  text: SortOrder
  type: SortOrder
  companyId: SortOrder
  needsAttention: SortOrder
  createdAt: SortOrder
  parentEventId: SortOrder
  messageId: SortOrder
}

input EventSumOrderByAggregateInput {
  id: SortOrder
  customerId: SortOrder
  companyId: SortOrder
  parentEventId: SortOrder
  messageId: SortOrder
}

input EventScalarWhereWithAggregatesInput {
  AND: [EventScalarWhereWithAggregatesInput!]
  OR: [EventScalarWhereWithAggregatesInput!]
  NOT: [EventScalarWhereWithAggregatesInput!]
  id: IntWithAggregatesFilter
  customerId: IntWithAggregatesFilter
  data: JsonNullableWithAggregatesFilter
  notifiedAt: DateTimeNullableWithAggregatesFilter
  text: StringNullableWithAggregatesFilter
  type: EnumEventTypeWithAggregatesFilter
  companyId: IntNullableWithAggregatesFilter
  needsAttention: EnumEventAttentionNullableWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  parentEventId: IntNullableWithAggregatesFilter
  messageId: IntNullableWithAggregatesFilter
}

input EnumEventTypeWithAggregatesFilter {
  equals: EventType
  in: [EventType!]
  notIn: [EventType!]
  not: NestedEnumEventTypeWithAggregatesFilter
  _count: NestedIntFilter
  _min: NestedEnumEventTypeFilter
  _max: NestedEnumEventTypeFilter
}

input NestedEnumEventTypeWithAggregatesFilter {
  equals: EventType
  in: [EventType!]
  notIn: [EventType!]
  not: NestedEnumEventTypeWithAggregatesFilter
  _count: NestedIntFilter
  _min: NestedEnumEventTypeFilter
  _max: NestedEnumEventTypeFilter
}

input EnumEventAttentionNullableWithAggregatesFilter {
  equals: EventAttention
  in: [EventAttention!]
  notIn: [EventAttention!]
  not: NestedEnumEventAttentionNullableWithAggregatesFilter
  _count: NestedIntNullableFilter
  _min: NestedEnumEventAttentionNullableFilter
  _max: NestedEnumEventAttentionNullableFilter
}

input NestedEnumEventAttentionNullableWithAggregatesFilter {
  equals: EventAttention
  in: [EventAttention!]
  notIn: [EventAttention!]
  not: NestedEnumEventAttentionNullableWithAggregatesFilter
  _count: NestedIntNullableFilter
  _min: NestedEnumEventAttentionNullableFilter
  _max: NestedEnumEventAttentionNullableFilter
}

type AggregateExternalGroup {
  _count: ExternalGroupCountAggregate
  _avg: ExternalGroupAvgAggregate
  _sum: ExternalGroupSumAggregate
  _min: ExternalGroupMinAggregate
  _max: ExternalGroupMaxAggregate
}

type ExternalGroupCountAggregate {
  customerId: Int!
  externalId: Int!
  developerName: Int!
  name: Int!
  ownerId: Int!
  source: Int!
  type: Int!
  createdAt: Int!
  updatedAt: Int!
  _all: Int!
}

type ExternalGroupAvgAggregate {
  customerId: Float
}

type ExternalGroupSumAggregate {
  customerId: Int
}

type ExternalGroupMinAggregate {
  customerId: Int
  externalId: String
  developerName: String
  name: String
  ownerId: String
  source: CustomerIntegrationType
  type: String
  createdAt: DateTime
  updatedAt: DateTime
}

type ExternalGroupMaxAggregate {
  customerId: Int
  externalId: String
  developerName: String
  name: String
  ownerId: String
  source: CustomerIntegrationType
  type: String
  createdAt: DateTime
  updatedAt: DateTime
}

type ExternalGroupGroupBy {
  customerId: Int!
  externalId: String!
  developerName: String!
  name: String
  ownerId: String
  source: CustomerIntegrationType!
  type: String
  createdAt: DateTime!
  updatedAt: DateTime!
  _count: ExternalGroupCountAggregate
  _avg: ExternalGroupAvgAggregate
  _sum: ExternalGroupSumAggregate
  _min: ExternalGroupMinAggregate
  _max: ExternalGroupMaxAggregate
}

input ExternalGroupOrderByWithAggregationInput {
  customerId: SortOrder
  externalId: SortOrder
  developerName: SortOrder
  name: SortOrder
  ownerId: SortOrder
  source: SortOrder
  type: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  _count: ExternalGroupCountOrderByAggregateInput
  _avg: ExternalGroupAvgOrderByAggregateInput
  _max: ExternalGroupMaxOrderByAggregateInput
  _min: ExternalGroupMinOrderByAggregateInput
  _sum: ExternalGroupSumOrderByAggregateInput
}

input ExternalGroupCountOrderByAggregateInput {
  customerId: SortOrder
  externalId: SortOrder
  developerName: SortOrder
  name: SortOrder
  ownerId: SortOrder
  source: SortOrder
  type: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input ExternalGroupAvgOrderByAggregateInput {
  customerId: SortOrder
}

input ExternalGroupMaxOrderByAggregateInput {
  customerId: SortOrder
  externalId: SortOrder
  developerName: SortOrder
  name: SortOrder
  ownerId: SortOrder
  source: SortOrder
  type: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input ExternalGroupMinOrderByAggregateInput {
  customerId: SortOrder
  externalId: SortOrder
  developerName: SortOrder
  name: SortOrder
  ownerId: SortOrder
  source: SortOrder
  type: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input ExternalGroupSumOrderByAggregateInput {
  customerId: SortOrder
}

input ExternalGroupScalarWhereWithAggregatesInput {
  AND: [ExternalGroupScalarWhereWithAggregatesInput!]
  OR: [ExternalGroupScalarWhereWithAggregatesInput!]
  NOT: [ExternalGroupScalarWhereWithAggregatesInput!]
  customerId: IntWithAggregatesFilter
  externalId: StringWithAggregatesFilter
  developerName: StringWithAggregatesFilter
  name: StringNullableWithAggregatesFilter
  ownerId: StringNullableWithAggregatesFilter
  source: EnumCustomerIntegrationTypeWithAggregatesFilter
  type: StringNullableWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
}

type AggregateExternalGroupMember {
  _count: ExternalGroupMemberCountAggregate
  _avg: ExternalGroupMemberAvgAggregate
  _sum: ExternalGroupMemberSumAggregate
  _min: ExternalGroupMemberMinAggregate
  _max: ExternalGroupMemberMaxAggregate
}

type ExternalGroupMemberCountAggregate {
  customerId: Int!
  groupId: Int!
  source: Int!
  userId: Int!
  createdAt: Int!
  _all: Int!
}

type ExternalGroupMemberAvgAggregate {
  customerId: Float
}

type ExternalGroupMemberSumAggregate {
  customerId: Int
}

type ExternalGroupMemberMinAggregate {
  customerId: Int
  groupId: String
  source: CustomerIntegrationType
  userId: String
  createdAt: DateTime
}

type ExternalGroupMemberMaxAggregate {
  customerId: Int
  groupId: String
  source: CustomerIntegrationType
  userId: String
  createdAt: DateTime
}

type ExternalGroupMemberGroupBy {
  customerId: Int!
  groupId: String!
  source: CustomerIntegrationType!
  userId: String!
  createdAt: DateTime!
  _count: ExternalGroupMemberCountAggregate
  _avg: ExternalGroupMemberAvgAggregate
  _sum: ExternalGroupMemberSumAggregate
  _min: ExternalGroupMemberMinAggregate
  _max: ExternalGroupMemberMaxAggregate
}

input ExternalGroupMemberOrderByWithAggregationInput {
  customerId: SortOrder
  groupId: SortOrder
  source: SortOrder
  userId: SortOrder
  createdAt: SortOrder
  _count: ExternalGroupMemberCountOrderByAggregateInput
  _avg: ExternalGroupMemberAvgOrderByAggregateInput
  _max: ExternalGroupMemberMaxOrderByAggregateInput
  _min: ExternalGroupMemberMinOrderByAggregateInput
  _sum: ExternalGroupMemberSumOrderByAggregateInput
}

input ExternalGroupMemberCountOrderByAggregateInput {
  customerId: SortOrder
  groupId: SortOrder
  source: SortOrder
  userId: SortOrder
  createdAt: SortOrder
}

input ExternalGroupMemberAvgOrderByAggregateInput {
  customerId: SortOrder
}

input ExternalGroupMemberMaxOrderByAggregateInput {
  customerId: SortOrder
  groupId: SortOrder
  source: SortOrder
  userId: SortOrder
  createdAt: SortOrder
}

input ExternalGroupMemberMinOrderByAggregateInput {
  customerId: SortOrder
  groupId: SortOrder
  source: SortOrder
  userId: SortOrder
  createdAt: SortOrder
}

input ExternalGroupMemberSumOrderByAggregateInput {
  customerId: SortOrder
}

input ExternalGroupMemberScalarWhereWithAggregatesInput {
  AND: [ExternalGroupMemberScalarWhereWithAggregatesInput!]
  OR: [ExternalGroupMemberScalarWhereWithAggregatesInput!]
  NOT: [ExternalGroupMemberScalarWhereWithAggregatesInput!]
  customerId: IntWithAggregatesFilter
  groupId: StringWithAggregatesFilter
  source: EnumCustomerIntegrationTypeWithAggregatesFilter
  userId: StringWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
}

type AggregateExternalUser {
  _count: ExternalUserCountAggregate
  _avg: ExternalUserAvgAggregate
  _sum: ExternalUserSumAggregate
  _min: ExternalUserMinAggregate
  _max: ExternalUserMaxAggregate
}

type ExternalUserCountAggregate {
  customerId: Int!
  department: Int!
  division: Int!
  email: Int!
  employeeNumber: Int!
  externalId: Int!
  name: Int!
  source: Int!
  userId: Int!
  title: Int!
  createdAt: Int!
  updatedAt: Int!
  _all: Int!
}

type ExternalUserAvgAggregate {
  customerId: Float
  userId: Float
}

type ExternalUserSumAggregate {
  customerId: Int
  userId: Int
}

type ExternalUserMinAggregate {
  customerId: Int
  department: String
  division: String
  email: String
  employeeNumber: String
  externalId: String
  name: String
  source: CustomerIntegrationType
  userId: Int
  title: String
  createdAt: DateTime
  updatedAt: DateTime
}

type ExternalUserMaxAggregate {
  customerId: Int
  department: String
  division: String
  email: String
  employeeNumber: String
  externalId: String
  name: String
  source: CustomerIntegrationType
  userId: Int
  title: String
  createdAt: DateTime
  updatedAt: DateTime
}

type ExternalUserGroupBy {
  customerId: Int!
  department: String
  division: String
  email: String
  employeeNumber: String
  externalId: String!
  name: String
  source: CustomerIntegrationType!
  userId: Int
  title: String
  createdAt: DateTime!
  updatedAt: DateTime!
  _count: ExternalUserCountAggregate
  _avg: ExternalUserAvgAggregate
  _sum: ExternalUserSumAggregate
  _min: ExternalUserMinAggregate
  _max: ExternalUserMaxAggregate
}

input ExternalUserOrderByWithAggregationInput {
  customerId: SortOrder
  department: SortOrder
  division: SortOrder
  email: SortOrder
  employeeNumber: SortOrder
  externalId: SortOrder
  name: SortOrder
  source: SortOrder
  userId: SortOrder
  title: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  _count: ExternalUserCountOrderByAggregateInput
  _avg: ExternalUserAvgOrderByAggregateInput
  _max: ExternalUserMaxOrderByAggregateInput
  _min: ExternalUserMinOrderByAggregateInput
  _sum: ExternalUserSumOrderByAggregateInput
}

input ExternalUserCountOrderByAggregateInput {
  customerId: SortOrder
  department: SortOrder
  division: SortOrder
  email: SortOrder
  employeeNumber: SortOrder
  externalId: SortOrder
  name: SortOrder
  source: SortOrder
  userId: SortOrder
  title: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input ExternalUserAvgOrderByAggregateInput {
  customerId: SortOrder
  userId: SortOrder
}

input ExternalUserMaxOrderByAggregateInput {
  customerId: SortOrder
  department: SortOrder
  division: SortOrder
  email: SortOrder
  employeeNumber: SortOrder
  externalId: SortOrder
  name: SortOrder
  source: SortOrder
  userId: SortOrder
  title: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input ExternalUserMinOrderByAggregateInput {
  customerId: SortOrder
  department: SortOrder
  division: SortOrder
  email: SortOrder
  employeeNumber: SortOrder
  externalId: SortOrder
  name: SortOrder
  source: SortOrder
  userId: SortOrder
  title: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input ExternalUserSumOrderByAggregateInput {
  customerId: SortOrder
  userId: SortOrder
}

input ExternalUserScalarWhereWithAggregatesInput {
  AND: [ExternalUserScalarWhereWithAggregatesInput!]
  OR: [ExternalUserScalarWhereWithAggregatesInput!]
  NOT: [ExternalUserScalarWhereWithAggregatesInput!]
  customerId: IntWithAggregatesFilter
  department: StringNullableWithAggregatesFilter
  division: StringNullableWithAggregatesFilter
  email: StringNullableWithAggregatesFilter
  employeeNumber: StringNullableWithAggregatesFilter
  externalId: StringWithAggregatesFilter
  name: StringNullableWithAggregatesFilter
  source: EnumCustomerIntegrationTypeWithAggregatesFilter
  userId: IntNullableWithAggregatesFilter
  title: StringNullableWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
}

type AggregateFeedback {
  _count: FeedbackCountAggregate
  _avg: FeedbackAvgAggregate
  _sum: FeedbackSumAggregate
  _min: FeedbackMinAggregate
  _max: FeedbackMaxAggregate
}

type FeedbackCountAggregate {
  feedbackId: Int!
  feedbackValue: Int!
  feedback: Int!
  userId: Int!
  _all: Int!
}

type FeedbackAvgAggregate {
  feedbackId: Float
  feedbackValue: Float
  userId: Float
}

type FeedbackSumAggregate {
  feedbackId: Int
  feedbackValue: Float
  userId: Int
}

type FeedbackMinAggregate {
  feedbackId: Int
  feedbackValue: Float
  feedback: String
  userId: Int
}

type FeedbackMaxAggregate {
  feedbackId: Int
  feedbackValue: Float
  feedback: String
  userId: Int
}

type FeedbackGroupBy {
  feedbackId: Int!
  feedbackValue: Float!
  feedback: String!
  userId: Int!
  _count: FeedbackCountAggregate
  _avg: FeedbackAvgAggregate
  _sum: FeedbackSumAggregate
  _min: FeedbackMinAggregate
  _max: FeedbackMaxAggregate
}

input FeedbackOrderByWithAggregationInput {
  feedbackId: SortOrder
  feedbackValue: SortOrder
  feedback: SortOrder
  userId: SortOrder
  _count: FeedbackCountOrderByAggregateInput
  _avg: FeedbackAvgOrderByAggregateInput
  _max: FeedbackMaxOrderByAggregateInput
  _min: FeedbackMinOrderByAggregateInput
  _sum: FeedbackSumOrderByAggregateInput
}

input FeedbackCountOrderByAggregateInput {
  feedbackId: SortOrder
  feedbackValue: SortOrder
  feedback: SortOrder
  userId: SortOrder
}

input FeedbackAvgOrderByAggregateInput {
  feedbackId: SortOrder
  feedbackValue: SortOrder
  userId: SortOrder
}

input FeedbackMaxOrderByAggregateInput {
  feedbackId: SortOrder
  feedbackValue: SortOrder
  feedback: SortOrder
  userId: SortOrder
}

input FeedbackMinOrderByAggregateInput {
  feedbackId: SortOrder
  feedbackValue: SortOrder
  feedback: SortOrder
  userId: SortOrder
}

input FeedbackSumOrderByAggregateInput {
  feedbackId: SortOrder
  feedbackValue: SortOrder
  userId: SortOrder
}

input FeedbackScalarWhereWithAggregatesInput {
  AND: [FeedbackScalarWhereWithAggregatesInput!]
  OR: [FeedbackScalarWhereWithAggregatesInput!]
  NOT: [FeedbackScalarWhereWithAggregatesInput!]
  feedbackId: IntWithAggregatesFilter
  feedbackValue: FloatWithAggregatesFilter
  feedback: StringWithAggregatesFilter
  userId: IntWithAggregatesFilter
}

input FloatWithAggregatesFilter {
  equals: Float
  in: [Float!]
  notIn: [Float!]
  lt: Float
  lte: Float
  gt: Float
  gte: Float
  not: NestedFloatWithAggregatesFilter
  _count: NestedIntFilter
  _avg: NestedFloatFilter
  _sum: NestedFloatFilter
  _min: NestedFloatFilter
  _max: NestedFloatFilter
}

input NestedFloatWithAggregatesFilter {
  equals: Float
  in: [Float!]
  notIn: [Float!]
  lt: Float
  lte: Float
  gt: Float
  gte: Float
  not: NestedFloatWithAggregatesFilter
  _count: NestedIntFilter
  _avg: NestedFloatFilter
  _sum: NestedFloatFilter
  _min: NestedFloatFilter
  _max: NestedFloatFilter
}

type AggregateGroup {
  _count: GroupCountAggregate
  _avg: GroupAvgAggregate
  _sum: GroupSumAggregate
  _min: GroupMinAggregate
  _max: GroupMaxAggregate
}

type GroupCountAggregate {
  id: Int!
  customerId: Int!
  name: Int!
  createdAt: Int!
  updatedAt: Int!
  parentId: Int!
  _all: Int!
}

type GroupAvgAggregate {
  id: Float
  customerId: Float
  parentId: Float
}

type GroupSumAggregate {
  id: Int
  customerId: Int
  parentId: Int
}

type GroupMinAggregate {
  id: Int
  customerId: Int
  name: String
  createdAt: DateTime
  updatedAt: DateTime
  parentId: Int
}

type GroupMaxAggregate {
  id: Int
  customerId: Int
  name: String
  createdAt: DateTime
  updatedAt: DateTime
  parentId: Int
}

type GroupGroupBy {
  id: Int!
  customerId: Int!
  name: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  parentId: Int
  _count: GroupCountAggregate
  _avg: GroupAvgAggregate
  _sum: GroupSumAggregate
  _min: GroupMinAggregate
  _max: GroupMaxAggregate
}

input GroupOrderByWithAggregationInput {
  id: SortOrder
  customerId: SortOrder
  name: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  parentId: SortOrder
  _count: GroupCountOrderByAggregateInput
  _avg: GroupAvgOrderByAggregateInput
  _max: GroupMaxOrderByAggregateInput
  _min: GroupMinOrderByAggregateInput
  _sum: GroupSumOrderByAggregateInput
}

input GroupCountOrderByAggregateInput {
  id: SortOrder
  customerId: SortOrder
  name: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  parentId: SortOrder
}

input GroupAvgOrderByAggregateInput {
  id: SortOrder
  customerId: SortOrder
  parentId: SortOrder
}

input GroupMaxOrderByAggregateInput {
  id: SortOrder
  customerId: SortOrder
  name: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  parentId: SortOrder
}

input GroupMinOrderByAggregateInput {
  id: SortOrder
  customerId: SortOrder
  name: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  parentId: SortOrder
}

input GroupSumOrderByAggregateInput {
  id: SortOrder
  customerId: SortOrder
  parentId: SortOrder
}

input GroupScalarWhereWithAggregatesInput {
  AND: [GroupScalarWhereWithAggregatesInput!]
  OR: [GroupScalarWhereWithAggregatesInput!]
  NOT: [GroupScalarWhereWithAggregatesInput!]
  id: IntWithAggregatesFilter
  customerId: IntWithAggregatesFilter
  name: StringWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
  parentId: IntNullableWithAggregatesFilter
}

type AggregateGroupUser {
  _count: GroupUserCountAggregate
  _avg: GroupUserAvgAggregate
  _sum: GroupUserSumAggregate
  _min: GroupUserMinAggregate
  _max: GroupUserMaxAggregate
}

type GroupUserCountAggregate {
  dummy: Int!
  groupId: Int!
  userId: Int!
  _all: Int!
}

type GroupUserAvgAggregate {
  dummy: Float
  groupId: Float
  userId: Float
}

type GroupUserSumAggregate {
  dummy: Int
  groupId: Int
  userId: Int
}

type GroupUserMinAggregate {
  dummy: Int
  groupId: Int
  userId: Int
}

type GroupUserMaxAggregate {
  dummy: Int
  groupId: Int
  userId: Int
}

type GroupUserGroupBy {
  dummy: Int
  groupId: Int!
  userId: Int!
  _count: GroupUserCountAggregate
  _avg: GroupUserAvgAggregate
  _sum: GroupUserSumAggregate
  _min: GroupUserMinAggregate
  _max: GroupUserMaxAggregate
}

input GroupUserOrderByWithAggregationInput {
  dummy: SortOrder
  groupId: SortOrder
  userId: SortOrder
  _count: GroupUserCountOrderByAggregateInput
  _avg: GroupUserAvgOrderByAggregateInput
  _max: GroupUserMaxOrderByAggregateInput
  _min: GroupUserMinOrderByAggregateInput
  _sum: GroupUserSumOrderByAggregateInput
}

input GroupUserCountOrderByAggregateInput {
  dummy: SortOrder
  groupId: SortOrder
  userId: SortOrder
}

input GroupUserAvgOrderByAggregateInput {
  dummy: SortOrder
  groupId: SortOrder
  userId: SortOrder
}

input GroupUserMaxOrderByAggregateInput {
  dummy: SortOrder
  groupId: SortOrder
  userId: SortOrder
}

input GroupUserMinOrderByAggregateInput {
  dummy: SortOrder
  groupId: SortOrder
  userId: SortOrder
}

input GroupUserSumOrderByAggregateInput {
  dummy: SortOrder
  groupId: SortOrder
  userId: SortOrder
}

input GroupUserScalarWhereWithAggregatesInput {
  AND: [GroupUserScalarWhereWithAggregatesInput!]
  OR: [GroupUserScalarWhereWithAggregatesInput!]
  NOT: [GroupUserScalarWhereWithAggregatesInput!]
  dummy: IntNullableWithAggregatesFilter
  groupId: IntWithAggregatesFilter
  userId: IntWithAggregatesFilter
}

type AggregateLaunch {
  _count: LaunchCountAggregate
  _avg: LaunchAvgAggregate
  _sum: LaunchSumAggregate
  _min: LaunchMinAggregate
  _max: LaunchMaxAggregate
}

type LaunchCountAggregate {
  id: Int!
  createdAt: Int!
  companyId: Int!
  eventId: Int!
  messageTemplateId: Int!
  sendToAddress: Int!
  subject: Int!
  text: Int!
  delta: Int!
  customerId: Int!
  _all: Int!
}

type LaunchAvgAggregate {
  id: Float
  companyId: Float
  eventId: Float
  messageTemplateId: Float
  customerId: Float
}

type LaunchSumAggregate {
  id: Int
  companyId: Int
  eventId: Int
  messageTemplateId: Int
  customerId: Int
}

type LaunchMinAggregate {
  id: Int
  createdAt: DateTime
  companyId: Int
  eventId: Int
  messageTemplateId: Int
  sendToAddress: String
  subject: String
  text: String
  customerId: Int
}

type LaunchMaxAggregate {
  id: Int
  createdAt: DateTime
  companyId: Int
  eventId: Int
  messageTemplateId: Int
  sendToAddress: String
  subject: String
  text: String
  customerId: Int
}

type LaunchGroupBy {
  id: Int!
  createdAt: DateTime!
  companyId: Int!
  eventId: Int
  messageTemplateId: Int
  sendToAddress: String
  subject: String!
  text: String!
  delta: JSON
  customerId: Int
  _count: LaunchCountAggregate
  _avg: LaunchAvgAggregate
  _sum: LaunchSumAggregate
  _min: LaunchMinAggregate
  _max: LaunchMaxAggregate
}

input LaunchOrderByWithAggregationInput {
  id: SortOrder
  createdAt: SortOrder
  companyId: SortOrder
  eventId: SortOrder
  messageTemplateId: SortOrder
  sendToAddress: SortOrder
  subject: SortOrder
  text: SortOrder
  delta: SortOrder
  customerId: SortOrder
  _count: LaunchCountOrderByAggregateInput
  _avg: LaunchAvgOrderByAggregateInput
  _max: LaunchMaxOrderByAggregateInput
  _min: LaunchMinOrderByAggregateInput
  _sum: LaunchSumOrderByAggregateInput
}

input LaunchCountOrderByAggregateInput {
  id: SortOrder
  createdAt: SortOrder
  companyId: SortOrder
  eventId: SortOrder
  messageTemplateId: SortOrder
  sendToAddress: SortOrder
  subject: SortOrder
  text: SortOrder
  delta: SortOrder
  customerId: SortOrder
}

input LaunchAvgOrderByAggregateInput {
  id: SortOrder
  companyId: SortOrder
  eventId: SortOrder
  messageTemplateId: SortOrder
  customerId: SortOrder
}

input LaunchMaxOrderByAggregateInput {
  id: SortOrder
  createdAt: SortOrder
  companyId: SortOrder
  eventId: SortOrder
  messageTemplateId: SortOrder
  sendToAddress: SortOrder
  subject: SortOrder
  text: SortOrder
  customerId: SortOrder
}

input LaunchMinOrderByAggregateInput {
  id: SortOrder
  createdAt: SortOrder
  companyId: SortOrder
  eventId: SortOrder
  messageTemplateId: SortOrder
  sendToAddress: SortOrder
  subject: SortOrder
  text: SortOrder
  customerId: SortOrder
}

input LaunchSumOrderByAggregateInput {
  id: SortOrder
  companyId: SortOrder
  eventId: SortOrder
  messageTemplateId: SortOrder
  customerId: SortOrder
}

input LaunchScalarWhereWithAggregatesInput {
  AND: [LaunchScalarWhereWithAggregatesInput!]
  OR: [LaunchScalarWhereWithAggregatesInput!]
  NOT: [LaunchScalarWhereWithAggregatesInput!]
  id: IntWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  companyId: IntWithAggregatesFilter
  eventId: IntNullableWithAggregatesFilter
  messageTemplateId: IntNullableWithAggregatesFilter
  sendToAddress: StringNullableWithAggregatesFilter
  subject: StringWithAggregatesFilter
  text: StringWithAggregatesFilter
  delta: JsonNullableWithAggregatesFilter
  customerId: IntNullableWithAggregatesFilter
}

type AggregateLaunchContacts {
  _count: LaunchContactsCountAggregate
  _avg: LaunchContactsAvgAggregate
  _sum: LaunchContactsSumAggregate
  _min: LaunchContactsMinAggregate
  _max: LaunchContactsMaxAggregate
}

type LaunchContactsCountAggregate {
  id: Int!
  launchId: Int!
  contactId: Int!
  createdAt: Int!
  _all: Int!
}

type LaunchContactsAvgAggregate {
  id: Float
  launchId: Float
  contactId: Float
}

type LaunchContactsSumAggregate {
  id: Int
  launchId: Int
  contactId: Int
}

type LaunchContactsMinAggregate {
  id: Int
  launchId: Int
  contactId: Int
  createdAt: DateTime
}

type LaunchContactsMaxAggregate {
  id: Int
  launchId: Int
  contactId: Int
  createdAt: DateTime
}

type LaunchContactsGroupBy {
  id: Int!
  launchId: Int!
  contactId: Int!
  createdAt: DateTime!
  _count: LaunchContactsCountAggregate
  _avg: LaunchContactsAvgAggregate
  _sum: LaunchContactsSumAggregate
  _min: LaunchContactsMinAggregate
  _max: LaunchContactsMaxAggregate
}

input LaunchContactsOrderByWithAggregationInput {
  id: SortOrder
  launchId: SortOrder
  contactId: SortOrder
  createdAt: SortOrder
  _count: LaunchContactsCountOrderByAggregateInput
  _avg: LaunchContactsAvgOrderByAggregateInput
  _max: LaunchContactsMaxOrderByAggregateInput
  _min: LaunchContactsMinOrderByAggregateInput
  _sum: LaunchContactsSumOrderByAggregateInput
}

input LaunchContactsCountOrderByAggregateInput {
  id: SortOrder
  launchId: SortOrder
  contactId: SortOrder
  createdAt: SortOrder
}

input LaunchContactsAvgOrderByAggregateInput {
  id: SortOrder
  launchId: SortOrder
  contactId: SortOrder
}

input LaunchContactsMaxOrderByAggregateInput {
  id: SortOrder
  launchId: SortOrder
  contactId: SortOrder
  createdAt: SortOrder
}

input LaunchContactsMinOrderByAggregateInput {
  id: SortOrder
  launchId: SortOrder
  contactId: SortOrder
  createdAt: SortOrder
}

input LaunchContactsSumOrderByAggregateInput {
  id: SortOrder
  launchId: SortOrder
  contactId: SortOrder
}

input LaunchContactsScalarWhereWithAggregatesInput {
  AND: [LaunchContactsScalarWhereWithAggregatesInput!]
  OR: [LaunchContactsScalarWhereWithAggregatesInput!]
  NOT: [LaunchContactsScalarWhereWithAggregatesInput!]
  id: IntWithAggregatesFilter
  launchId: IntWithAggregatesFilter
  contactId: IntWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
}

type AggregateList {
  _count: ListCountAggregate
  _avg: ListAvgAggregate
  _sum: ListSumAggregate
  _min: ListMinAggregate
  _max: ListMaxAggregate
}

type ListCountAggregate {
  id: Int!
  customerId: Int!
  name: Int!
  createdAt: Int!
  updatedAt: Int!
  parentId: Int!
  _all: Int!
}

type ListAvgAggregate {
  id: Float
  customerId: Float
  parentId: Float
}

type ListSumAggregate {
  id: Int
  customerId: Int
  parentId: Int
}

type ListMinAggregate {
  id: Int
  customerId: Int
  name: String
  createdAt: DateTime
  updatedAt: DateTime
  parentId: Int
}

type ListMaxAggregate {
  id: Int
  customerId: Int
  name: String
  createdAt: DateTime
  updatedAt: DateTime
  parentId: Int
}

type ListGroupBy {
  id: Int!
  customerId: Int!
  name: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  parentId: Int
  _count: ListCountAggregate
  _avg: ListAvgAggregate
  _sum: ListSumAggregate
  _min: ListMinAggregate
  _max: ListMaxAggregate
}

input ListOrderByWithAggregationInput {
  id: SortOrder
  customerId: SortOrder
  name: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  parentId: SortOrder
  _count: ListCountOrderByAggregateInput
  _avg: ListAvgOrderByAggregateInput
  _max: ListMaxOrderByAggregateInput
  _min: ListMinOrderByAggregateInput
  _sum: ListSumOrderByAggregateInput
}

input ListCountOrderByAggregateInput {
  id: SortOrder
  customerId: SortOrder
  name: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  parentId: SortOrder
}

input ListAvgOrderByAggregateInput {
  id: SortOrder
  customerId: SortOrder
  parentId: SortOrder
}

input ListMaxOrderByAggregateInput {
  id: SortOrder
  customerId: SortOrder
  name: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  parentId: SortOrder
}

input ListMinOrderByAggregateInput {
  id: SortOrder
  customerId: SortOrder
  name: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  parentId: SortOrder
}

input ListSumOrderByAggregateInput {
  id: SortOrder
  customerId: SortOrder
  parentId: SortOrder
}

input ListScalarWhereWithAggregatesInput {
  AND: [ListScalarWhereWithAggregatesInput!]
  OR: [ListScalarWhereWithAggregatesInput!]
  NOT: [ListScalarWhereWithAggregatesInput!]
  id: IntWithAggregatesFilter
  customerId: IntWithAggregatesFilter
  name: StringWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
  parentId: IntNullableWithAggregatesFilter
}

type AggregateListCompany {
  _count: ListCompanyCountAggregate
  _avg: ListCompanyAvgAggregate
  _sum: ListCompanySumAggregate
  _min: ListCompanyMinAggregate
  _max: ListCompanyMaxAggregate
}

type ListCompanyCountAggregate {
  id: Int!
  listId: Int!
  companyId: Int!
  createdAt: Int!
  updatedAt: Int!
  _all: Int!
}

type ListCompanyAvgAggregate {
  id: Float
  listId: Float
  companyId: Float
}

type ListCompanySumAggregate {
  id: Int
  listId: Int
  companyId: Int
}

type ListCompanyMinAggregate {
  id: Int
  listId: Int
  companyId: Int
  createdAt: DateTime
  updatedAt: DateTime
}

type ListCompanyMaxAggregate {
  id: Int
  listId: Int
  companyId: Int
  createdAt: DateTime
  updatedAt: DateTime
}

type ListCompanyGroupBy {
  id: Int!
  listId: Int!
  companyId: Int!
  createdAt: DateTime!
  updatedAt: DateTime!
  _count: ListCompanyCountAggregate
  _avg: ListCompanyAvgAggregate
  _sum: ListCompanySumAggregate
  _min: ListCompanyMinAggregate
  _max: ListCompanyMaxAggregate
}

input ListCompanyOrderByWithAggregationInput {
  id: SortOrder
  listId: SortOrder
  companyId: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  _count: ListCompanyCountOrderByAggregateInput
  _avg: ListCompanyAvgOrderByAggregateInput
  _max: ListCompanyMaxOrderByAggregateInput
  _min: ListCompanyMinOrderByAggregateInput
  _sum: ListCompanySumOrderByAggregateInput
}

input ListCompanyCountOrderByAggregateInput {
  id: SortOrder
  listId: SortOrder
  companyId: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input ListCompanyAvgOrderByAggregateInput {
  id: SortOrder
  listId: SortOrder
  companyId: SortOrder
}

input ListCompanyMaxOrderByAggregateInput {
  id: SortOrder
  listId: SortOrder
  companyId: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input ListCompanyMinOrderByAggregateInput {
  id: SortOrder
  listId: SortOrder
  companyId: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input ListCompanySumOrderByAggregateInput {
  id: SortOrder
  listId: SortOrder
  companyId: SortOrder
}

input ListCompanyScalarWhereWithAggregatesInput {
  AND: [ListCompanyScalarWhereWithAggregatesInput!]
  OR: [ListCompanyScalarWhereWithAggregatesInput!]
  NOT: [ListCompanyScalarWhereWithAggregatesInput!]
  id: IntWithAggregatesFilter
  listId: IntWithAggregatesFilter
  companyId: IntWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
}

type AggregateMessageTemplate {
  _count: MessageTemplateCountAggregate
  _avg: MessageTemplateAvgAggregate
  _sum: MessageTemplateSumAggregate
  _min: MessageTemplateMinAggregate
  _max: MessageTemplateMaxAggregate
}

type MessageTemplateCountAggregate {
  id: Int!
  eventType: Int!
  companyType: Int!
  messageType: Int!
  sendToAddress: Int!
  title: Int!
  subject: Int!
  text: Int!
  customerId: Int!
  userId: Int!
  delta: Int!
  createdAt: Int!
  updatedAt: Int!
  _all: Int!
}

type MessageTemplateAvgAggregate {
  id: Float
  customerId: Float
  userId: Float
}

type MessageTemplateSumAggregate {
  id: Int
  customerId: Int
  userId: Int
}

type MessageTemplateMinAggregate {
  id: Int
  eventType: EventType
  companyType: CompanyType
  messageType: MessageType
  sendToAddress: String
  title: String
  subject: String
  text: String
  customerId: Int
  userId: Int
  createdAt: DateTime
  updatedAt: DateTime
}

type MessageTemplateMaxAggregate {
  id: Int
  eventType: EventType
  companyType: CompanyType
  messageType: MessageType
  sendToAddress: String
  title: String
  subject: String
  text: String
  customerId: Int
  userId: Int
  createdAt: DateTime
  updatedAt: DateTime
}

type MessageTemplateGroupBy {
  id: Int!
  eventType: EventType!
  companyType: CompanyType!
  messageType: MessageType!
  sendToAddress: String
  title: String
  subject: String!
  text: String!
  customerId: Int!
  userId: Int!
  delta: JSON
  createdAt: DateTime!
  updatedAt: DateTime
  _count: MessageTemplateCountAggregate
  _avg: MessageTemplateAvgAggregate
  _sum: MessageTemplateSumAggregate
  _min: MessageTemplateMinAggregate
  _max: MessageTemplateMaxAggregate
}

input MessageTemplateOrderByWithAggregationInput {
  id: SortOrder
  eventType: SortOrder
  companyType: SortOrder
  messageType: SortOrder
  sendToAddress: SortOrder
  title: SortOrder
  subject: SortOrder
  text: SortOrder
  customerId: SortOrder
  userId: SortOrder
  delta: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  _count: MessageTemplateCountOrderByAggregateInput
  _avg: MessageTemplateAvgOrderByAggregateInput
  _max: MessageTemplateMaxOrderByAggregateInput
  _min: MessageTemplateMinOrderByAggregateInput
  _sum: MessageTemplateSumOrderByAggregateInput
}

input MessageTemplateCountOrderByAggregateInput {
  id: SortOrder
  eventType: SortOrder
  companyType: SortOrder
  messageType: SortOrder
  sendToAddress: SortOrder
  title: SortOrder
  subject: SortOrder
  text: SortOrder
  customerId: SortOrder
  userId: SortOrder
  delta: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input MessageTemplateAvgOrderByAggregateInput {
  id: SortOrder
  customerId: SortOrder
  userId: SortOrder
}

input MessageTemplateMaxOrderByAggregateInput {
  id: SortOrder
  eventType: SortOrder
  companyType: SortOrder
  messageType: SortOrder
  sendToAddress: SortOrder
  title: SortOrder
  subject: SortOrder
  text: SortOrder
  customerId: SortOrder
  userId: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input MessageTemplateMinOrderByAggregateInput {
  id: SortOrder
  eventType: SortOrder
  companyType: SortOrder
  messageType: SortOrder
  sendToAddress: SortOrder
  title: SortOrder
  subject: SortOrder
  text: SortOrder
  customerId: SortOrder
  userId: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input MessageTemplateSumOrderByAggregateInput {
  id: SortOrder
  customerId: SortOrder
  userId: SortOrder
}

input MessageTemplateScalarWhereWithAggregatesInput {
  AND: [MessageTemplateScalarWhereWithAggregatesInput!]
  OR: [MessageTemplateScalarWhereWithAggregatesInput!]
  NOT: [MessageTemplateScalarWhereWithAggregatesInput!]
  id: IntWithAggregatesFilter
  eventType: EnumEventTypeWithAggregatesFilter
  companyType: EnumCompanyTypeWithAggregatesFilter
  messageType: EnumMessageTypeWithAggregatesFilter
  sendToAddress: StringNullableWithAggregatesFilter
  title: StringNullableWithAggregatesFilter
  subject: StringWithAggregatesFilter
  text: StringWithAggregatesFilter
  customerId: IntWithAggregatesFilter
  userId: IntWithAggregatesFilter
  delta: JsonNullableWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  updatedAt: DateTimeNullableWithAggregatesFilter
}

input EnumMessageTypeWithAggregatesFilter {
  equals: MessageType
  in: [MessageType!]
  notIn: [MessageType!]
  not: NestedEnumMessageTypeWithAggregatesFilter
  _count: NestedIntFilter
  _min: NestedEnumMessageTypeFilter
  _max: NestedEnumMessageTypeFilter
}

input NestedEnumMessageTypeWithAggregatesFilter {
  equals: MessageType
  in: [MessageType!]
  notIn: [MessageType!]
  not: NestedEnumMessageTypeWithAggregatesFilter
  _count: NestedIntFilter
  _min: NestedEnumMessageTypeFilter
  _max: NestedEnumMessageTypeFilter
}

type AggregateNote {
  _count: NoteCountAggregate
  _avg: NoteAvgAggregate
  _sum: NoteSumAggregate
  _min: NoteMinAggregate
  _max: NoteMaxAggregate
}

type NoteCountAggregate {
  id: Int!
  customerId: Int!
  eventId: Int!
  readAt: Int!
  flaggedAt: Int!
  subject: Int!
  text: Int!
  companyId: Int!
  createdBy: Int!
  allCanView: Int!
  createdAt: Int!
  updatedAt: Int!
  delta: Int!
  _all: Int!
}

type NoteAvgAggregate {
  id: Float
  customerId: Float
  eventId: Float
  companyId: Float
  createdBy: Float
}

type NoteSumAggregate {
  id: Int
  customerId: Int
  eventId: Int
  companyId: Int
  createdBy: Int
}

type NoteMinAggregate {
  id: Int
  customerId: Int
  eventId: Int
  readAt: DateTime
  flaggedAt: DateTime
  subject: String
  text: String
  companyId: Int
  createdBy: Int
  allCanView: Boolean
  createdAt: DateTime
  updatedAt: DateTime
}

type NoteMaxAggregate {
  id: Int
  customerId: Int
  eventId: Int
  readAt: DateTime
  flaggedAt: DateTime
  subject: String
  text: String
  companyId: Int
  createdBy: Int
  allCanView: Boolean
  createdAt: DateTime
  updatedAt: DateTime
}

type NoteGroupBy {
  id: Int!
  customerId: Int
  eventId: Int
  readAt: DateTime
  flaggedAt: DateTime
  subject: String!
  text: String!
  companyId: Int
  createdBy: Int
  allCanView: Boolean!
  createdAt: DateTime!
  updatedAt: DateTime!
  delta: JSON
  _count: NoteCountAggregate
  _avg: NoteAvgAggregate
  _sum: NoteSumAggregate
  _min: NoteMinAggregate
  _max: NoteMaxAggregate
}

input NoteOrderByWithAggregationInput {
  id: SortOrder
  customerId: SortOrder
  eventId: SortOrder
  readAt: SortOrder
  flaggedAt: SortOrder
  subject: SortOrder
  text: SortOrder
  companyId: SortOrder
  createdBy: SortOrder
  allCanView: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  delta: SortOrder
  _count: NoteCountOrderByAggregateInput
  _avg: NoteAvgOrderByAggregateInput
  _max: NoteMaxOrderByAggregateInput
  _min: NoteMinOrderByAggregateInput
  _sum: NoteSumOrderByAggregateInput
}

input NoteCountOrderByAggregateInput {
  id: SortOrder
  customerId: SortOrder
  eventId: SortOrder
  readAt: SortOrder
  flaggedAt: SortOrder
  subject: SortOrder
  text: SortOrder
  companyId: SortOrder
  createdBy: SortOrder
  allCanView: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  delta: SortOrder
}

input NoteAvgOrderByAggregateInput {
  id: SortOrder
  customerId: SortOrder
  eventId: SortOrder
  companyId: SortOrder
  createdBy: SortOrder
}

input NoteMaxOrderByAggregateInput {
  id: SortOrder
  customerId: SortOrder
  eventId: SortOrder
  readAt: SortOrder
  flaggedAt: SortOrder
  subject: SortOrder
  text: SortOrder
  companyId: SortOrder
  createdBy: SortOrder
  allCanView: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input NoteMinOrderByAggregateInput {
  id: SortOrder
  customerId: SortOrder
  eventId: SortOrder
  readAt: SortOrder
  flaggedAt: SortOrder
  subject: SortOrder
  text: SortOrder
  companyId: SortOrder
  createdBy: SortOrder
  allCanView: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input NoteSumOrderByAggregateInput {
  id: SortOrder
  customerId: SortOrder
  eventId: SortOrder
  companyId: SortOrder
  createdBy: SortOrder
}

input NoteScalarWhereWithAggregatesInput {
  AND: [NoteScalarWhereWithAggregatesInput!]
  OR: [NoteScalarWhereWithAggregatesInput!]
  NOT: [NoteScalarWhereWithAggregatesInput!]
  id: IntWithAggregatesFilter
  customerId: IntNullableWithAggregatesFilter
  eventId: IntNullableWithAggregatesFilter
  readAt: DateTimeNullableWithAggregatesFilter
  flaggedAt: DateTimeNullableWithAggregatesFilter
  subject: StringWithAggregatesFilter
  text: StringWithAggregatesFilter
  companyId: IntNullableWithAggregatesFilter
  createdBy: IntNullableWithAggregatesFilter
  allCanView: BoolWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
  delta: JsonNullableWithAggregatesFilter
}

type AggregateNoteGroupTags {
  _count: NoteGroupTagsCountAggregate
  _avg: NoteGroupTagsAvgAggregate
  _sum: NoteGroupTagsSumAggregate
  _min: NoteGroupTagsMinAggregate
  _max: NoteGroupTagsMaxAggregate
}

type NoteGroupTagsCountAggregate {
  noteId: Int!
  groupId: Int!
  createdAt: Int!
  _all: Int!
}

type NoteGroupTagsAvgAggregate {
  noteId: Float
  groupId: Float
}

type NoteGroupTagsSumAggregate {
  noteId: Int
  groupId: Int
}

type NoteGroupTagsMinAggregate {
  noteId: Int
  groupId: Int
  createdAt: DateTime
}

type NoteGroupTagsMaxAggregate {
  noteId: Int
  groupId: Int
  createdAt: DateTime
}

type NoteGroupTagsGroupBy {
  noteId: Int!
  groupId: Int!
  createdAt: DateTime!
  _count: NoteGroupTagsCountAggregate
  _avg: NoteGroupTagsAvgAggregate
  _sum: NoteGroupTagsSumAggregate
  _min: NoteGroupTagsMinAggregate
  _max: NoteGroupTagsMaxAggregate
}

input NoteGroupTagsOrderByWithAggregationInput {
  noteId: SortOrder
  groupId: SortOrder
  createdAt: SortOrder
  _count: NoteGroupTagsCountOrderByAggregateInput
  _avg: NoteGroupTagsAvgOrderByAggregateInput
  _max: NoteGroupTagsMaxOrderByAggregateInput
  _min: NoteGroupTagsMinOrderByAggregateInput
  _sum: NoteGroupTagsSumOrderByAggregateInput
}

input NoteGroupTagsCountOrderByAggregateInput {
  noteId: SortOrder
  groupId: SortOrder
  createdAt: SortOrder
}

input NoteGroupTagsAvgOrderByAggregateInput {
  noteId: SortOrder
  groupId: SortOrder
}

input NoteGroupTagsMaxOrderByAggregateInput {
  noteId: SortOrder
  groupId: SortOrder
  createdAt: SortOrder
}

input NoteGroupTagsMinOrderByAggregateInput {
  noteId: SortOrder
  groupId: SortOrder
  createdAt: SortOrder
}

input NoteGroupTagsSumOrderByAggregateInput {
  noteId: SortOrder
  groupId: SortOrder
}

input NoteGroupTagsScalarWhereWithAggregatesInput {
  AND: [NoteGroupTagsScalarWhereWithAggregatesInput!]
  OR: [NoteGroupTagsScalarWhereWithAggregatesInput!]
  NOT: [NoteGroupTagsScalarWhereWithAggregatesInput!]
  noteId: IntWithAggregatesFilter
  groupId: IntWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
}

type AggregateNoteUserTags {
  _count: NoteUserTagsCountAggregate
  _avg: NoteUserTagsAvgAggregate
  _sum: NoteUserTagsSumAggregate
  _min: NoteUserTagsMinAggregate
  _max: NoteUserTagsMaxAggregate
}

type NoteUserTagsCountAggregate {
  noteId: Int!
  userId: Int!
  createdAt: Int!
  _all: Int!
}

type NoteUserTagsAvgAggregate {
  noteId: Float
  userId: Float
}

type NoteUserTagsSumAggregate {
  noteId: Int
  userId: Int
}

type NoteUserTagsMinAggregate {
  noteId: Int
  userId: Int
  createdAt: DateTime
}

type NoteUserTagsMaxAggregate {
  noteId: Int
  userId: Int
  createdAt: DateTime
}

type NoteUserTagsGroupBy {
  noteId: Int!
  userId: Int!
  createdAt: DateTime!
  _count: NoteUserTagsCountAggregate
  _avg: NoteUserTagsAvgAggregate
  _sum: NoteUserTagsSumAggregate
  _min: NoteUserTagsMinAggregate
  _max: NoteUserTagsMaxAggregate
}

input NoteUserTagsOrderByWithAggregationInput {
  noteId: SortOrder
  userId: SortOrder
  createdAt: SortOrder
  _count: NoteUserTagsCountOrderByAggregateInput
  _avg: NoteUserTagsAvgOrderByAggregateInput
  _max: NoteUserTagsMaxOrderByAggregateInput
  _min: NoteUserTagsMinOrderByAggregateInput
  _sum: NoteUserTagsSumOrderByAggregateInput
}

input NoteUserTagsCountOrderByAggregateInput {
  noteId: SortOrder
  userId: SortOrder
  createdAt: SortOrder
}

input NoteUserTagsAvgOrderByAggregateInput {
  noteId: SortOrder
  userId: SortOrder
}

input NoteUserTagsMaxOrderByAggregateInput {
  noteId: SortOrder
  userId: SortOrder
  createdAt: SortOrder
}

input NoteUserTagsMinOrderByAggregateInput {
  noteId: SortOrder
  userId: SortOrder
  createdAt: SortOrder
}

input NoteUserTagsSumOrderByAggregateInput {
  noteId: SortOrder
  userId: SortOrder
}

input NoteUserTagsScalarWhereWithAggregatesInput {
  AND: [NoteUserTagsScalarWhereWithAggregatesInput!]
  OR: [NoteUserTagsScalarWhereWithAggregatesInput!]
  NOT: [NoteUserTagsScalarWhereWithAggregatesInput!]
  noteId: IntWithAggregatesFilter
  userId: IntWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
}

input OfferOptionWhereUniqueInput {
  id: Int
}

enum OfferOptionScalarFieldEnum {
  id
  offerType
  status
}

type AggregateOfferOption {
  _count: OfferOptionCountAggregate
  _avg: OfferOptionAvgAggregate
  _sum: OfferOptionSumAggregate
  _min: OfferOptionMinAggregate
  _max: OfferOptionMaxAggregate
}

type OfferOptionCountAggregate {
  id: Int!
  offerType: Int!
  status: Int!
  _all: Int!
}

type OfferOptionAvgAggregate {
  id: Float
}

type OfferOptionSumAggregate {
  id: Int
}

type OfferOptionMinAggregate {
  id: Int
  offerType: String
  status: Boolean
}

type OfferOptionMaxAggregate {
  id: Int
  offerType: String
  status: Boolean
}

type OfferOptionGroupBy {
  id: Int!
  offerType: String!
  status: Boolean!
  _count: OfferOptionCountAggregate
  _avg: OfferOptionAvgAggregate
  _sum: OfferOptionSumAggregate
  _min: OfferOptionMinAggregate
  _max: OfferOptionMaxAggregate
}

input OfferOptionOrderByWithAggregationInput {
  id: SortOrder
  offerType: SortOrder
  status: SortOrder
  _count: OfferOptionCountOrderByAggregateInput
  _avg: OfferOptionAvgOrderByAggregateInput
  _max: OfferOptionMaxOrderByAggregateInput
  _min: OfferOptionMinOrderByAggregateInput
  _sum: OfferOptionSumOrderByAggregateInput
}

input OfferOptionCountOrderByAggregateInput {
  id: SortOrder
  offerType: SortOrder
  status: SortOrder
}

input OfferOptionAvgOrderByAggregateInput {
  id: SortOrder
}

input OfferOptionMaxOrderByAggregateInput {
  id: SortOrder
  offerType: SortOrder
  status: SortOrder
}

input OfferOptionMinOrderByAggregateInput {
  id: SortOrder
  offerType: SortOrder
  status: SortOrder
}

input OfferOptionSumOrderByAggregateInput {
  id: SortOrder
}

input OfferOptionScalarWhereWithAggregatesInput {
  AND: [OfferOptionScalarWhereWithAggregatesInput!]
  OR: [OfferOptionScalarWhereWithAggregatesInput!]
  NOT: [OfferOptionScalarWhereWithAggregatesInput!]
  id: IntWithAggregatesFilter
  offerType: StringWithAggregatesFilter
  status: BoolWithAggregatesFilter
}

type AggregateProduct {
  _count: ProductCountAggregate
  _avg: ProductAvgAggregate
  _sum: ProductSumAggregate
  _min: ProductMinAggregate
  _max: ProductMaxAggregate
}

type ProductCountAggregate {
  id: Int!
  name: Int!
  orderStartDate: Int!
  orderEndDate: Int!
  orderTerms: Int!
  monthlyUnitPrice: Int!
  quantity: Int!
  totalPrice: Int!
  createdAt: Int!
  updatedAt: Int!
  companyId: Int!
  _all: Int!
}

type ProductAvgAggregate {
  id: Float
  orderTerms: Float
  monthlyUnitPrice: Float
  quantity: Float
  totalPrice: Float
  companyId: Float
}

type ProductSumAggregate {
  id: Int
  orderTerms: Int
  monthlyUnitPrice: Int
  quantity: Int
  totalPrice: Int
  companyId: Int
}

type ProductMinAggregate {
  id: Int
  name: String
  orderStartDate: DateTime
  orderEndDate: DateTime
  orderTerms: Int
  monthlyUnitPrice: Int
  quantity: Int
  totalPrice: Int
  createdAt: DateTime
  updatedAt: DateTime
  companyId: Int
}

type ProductMaxAggregate {
  id: Int
  name: String
  orderStartDate: DateTime
  orderEndDate: DateTime
  orderTerms: Int
  monthlyUnitPrice: Int
  quantity: Int
  totalPrice: Int
  createdAt: DateTime
  updatedAt: DateTime
  companyId: Int
}

type ProductGroupBy {
  id: Int!
  name: String!
  orderStartDate: DateTime!
  orderEndDate: DateTime!
  orderTerms: Int!
  monthlyUnitPrice: Int!
  quantity: Int!
  totalPrice: Int!
  createdAt: DateTime!
  updatedAt: DateTime!
  companyId: Int!
  _count: ProductCountAggregate
  _avg: ProductAvgAggregate
  _sum: ProductSumAggregate
  _min: ProductMinAggregate
  _max: ProductMaxAggregate
}

input ProductOrderByWithAggregationInput {
  id: SortOrder
  name: SortOrder
  orderStartDate: SortOrder
  orderEndDate: SortOrder
  orderTerms: SortOrder
  monthlyUnitPrice: SortOrder
  quantity: SortOrder
  totalPrice: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  companyId: SortOrder
  _count: ProductCountOrderByAggregateInput
  _avg: ProductAvgOrderByAggregateInput
  _max: ProductMaxOrderByAggregateInput
  _min: ProductMinOrderByAggregateInput
  _sum: ProductSumOrderByAggregateInput
}

input ProductCountOrderByAggregateInput {
  id: SortOrder
  name: SortOrder
  orderStartDate: SortOrder
  orderEndDate: SortOrder
  orderTerms: SortOrder
  monthlyUnitPrice: SortOrder
  quantity: SortOrder
  totalPrice: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  companyId: SortOrder
}

input ProductAvgOrderByAggregateInput {
  id: SortOrder
  orderTerms: SortOrder
  monthlyUnitPrice: SortOrder
  quantity: SortOrder
  totalPrice: SortOrder
  companyId: SortOrder
}

input ProductMaxOrderByAggregateInput {
  id: SortOrder
  name: SortOrder
  orderStartDate: SortOrder
  orderEndDate: SortOrder
  orderTerms: SortOrder
  monthlyUnitPrice: SortOrder
  quantity: SortOrder
  totalPrice: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  companyId: SortOrder
}

input ProductMinOrderByAggregateInput {
  id: SortOrder
  name: SortOrder
  orderStartDate: SortOrder
  orderEndDate: SortOrder
  orderTerms: SortOrder
  monthlyUnitPrice: SortOrder
  quantity: SortOrder
  totalPrice: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  companyId: SortOrder
}

input ProductSumOrderByAggregateInput {
  id: SortOrder
  orderTerms: SortOrder
  monthlyUnitPrice: SortOrder
  quantity: SortOrder
  totalPrice: SortOrder
  companyId: SortOrder
}

input ProductScalarWhereWithAggregatesInput {
  AND: [ProductScalarWhereWithAggregatesInput!]
  OR: [ProductScalarWhereWithAggregatesInput!]
  NOT: [ProductScalarWhereWithAggregatesInput!]
  id: IntWithAggregatesFilter
  name: StringWithAggregatesFilter
  orderStartDate: DateTimeWithAggregatesFilter
  orderEndDate: DateTimeWithAggregatesFilter
  orderTerms: IntWithAggregatesFilter
  monthlyUnitPrice: IntWithAggregatesFilter
  quantity: IntWithAggregatesFilter
  totalPrice: IntWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
  companyId: IntWithAggregatesFilter
}

input RatingWhereUniqueInput {
  id: Int
  status: RatingStatus
}

enum RatingScalarFieldEnum {
  id
  status
  createdAt
  updatedAt
}

type AggregateRating {
  _count: RatingCountAggregate
  _avg: RatingAvgAggregate
  _sum: RatingSumAggregate
  _min: RatingMinAggregate
  _max: RatingMaxAggregate
}

type RatingCountAggregate {
  id: Int!
  status: Int!
  createdAt: Int!
  updatedAt: Int!
  _all: Int!
}

type RatingAvgAggregate {
  id: Float
}

type RatingSumAggregate {
  id: Int
}

type RatingMinAggregate {
  id: Int
  status: RatingStatus
  createdAt: DateTime
  updatedAt: DateTime
}

type RatingMaxAggregate {
  id: Int
  status: RatingStatus
  createdAt: DateTime
  updatedAt: DateTime
}

type RatingGroupBy {
  id: Int!
  status: RatingStatus!
  createdAt: DateTime!
  updatedAt: DateTime!
  _count: RatingCountAggregate
  _avg: RatingAvgAggregate
  _sum: RatingSumAggregate
  _min: RatingMinAggregate
  _max: RatingMaxAggregate
}

input RatingOrderByWithAggregationInput {
  id: SortOrder
  status: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  _count: RatingCountOrderByAggregateInput
  _avg: RatingAvgOrderByAggregateInput
  _max: RatingMaxOrderByAggregateInput
  _min: RatingMinOrderByAggregateInput
  _sum: RatingSumOrderByAggregateInput
}

input RatingCountOrderByAggregateInput {
  id: SortOrder
  status: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input RatingAvgOrderByAggregateInput {
  id: SortOrder
}

input RatingMaxOrderByAggregateInput {
  id: SortOrder
  status: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input RatingMinOrderByAggregateInput {
  id: SortOrder
  status: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input RatingSumOrderByAggregateInput {
  id: SortOrder
}

input RatingScalarWhereWithAggregatesInput {
  AND: [RatingScalarWhereWithAggregatesInput!]
  OR: [RatingScalarWhereWithAggregatesInput!]
  NOT: [RatingScalarWhereWithAggregatesInput!]
  id: IntWithAggregatesFilter
  status: EnumRatingStatusWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
}

input EnumRatingStatusWithAggregatesFilter {
  equals: RatingStatus
  in: [RatingStatus!]
  notIn: [RatingStatus!]
  not: NestedEnumRatingStatusWithAggregatesFilter
  _count: NestedIntFilter
  _min: NestedEnumRatingStatusFilter
  _max: NestedEnumRatingStatusFilter
}

input NestedEnumRatingStatusWithAggregatesFilter {
  equals: RatingStatus
  in: [RatingStatus!]
  notIn: [RatingStatus!]
  not: NestedEnumRatingStatusWithAggregatesFilter
  _count: NestedIntFilter
  _min: NestedEnumRatingStatusFilter
  _max: NestedEnumRatingStatusFilter
}

type AggregateReference {
  _count: ReferenceCountAggregate
  _avg: ReferenceAvgAggregate
  _sum: ReferenceSumAggregate
  _min: ReferenceMinAggregate
  _max: ReferenceMaxAggregate
}

type ReferenceCountAggregate {
  id: Int!
  companyId: Int!
  offeredTo: Int!
  servedAsReferenceBefore: Int!
  servedAsReferenceForId: Int!
  servedAsReferenceAt: Int!
  notes: Int!
  dealClosed: Int!
  createdAt: Int!
  userId: Int!
  _all: Int!
}

type ReferenceAvgAggregate {
  id: Float
  companyId: Float
  servedAsReferenceForId: Float
  userId: Float
}

type ReferenceSumAggregate {
  id: Int
  companyId: Int
  servedAsReferenceForId: Int
  userId: Int
}

type ReferenceMinAggregate {
  id: Int
  companyId: Int
  offeredTo: Boolean
  servedAsReferenceBefore: Boolean
  servedAsReferenceForId: Int
  servedAsReferenceAt: DateTime
  notes: String
  dealClosed: Boolean
  createdAt: DateTime
  userId: Int
}

type ReferenceMaxAggregate {
  id: Int
  companyId: Int
  offeredTo: Boolean
  servedAsReferenceBefore: Boolean
  servedAsReferenceForId: Int
  servedAsReferenceAt: DateTime
  notes: String
  dealClosed: Boolean
  createdAt: DateTime
  userId: Int
}

type ReferenceGroupBy {
  id: Int!
  companyId: Int!
  offeredTo: Boolean!
  servedAsReferenceBefore: Boolean!
  servedAsReferenceForId: Int
  servedAsReferenceAt: DateTime
  notes: String
  dealClosed: Boolean
  createdAt: DateTime!
  userId: Int!
  _count: ReferenceCountAggregate
  _avg: ReferenceAvgAggregate
  _sum: ReferenceSumAggregate
  _min: ReferenceMinAggregate
  _max: ReferenceMaxAggregate
}

input ReferenceOrderByWithAggregationInput {
  id: SortOrder
  companyId: SortOrder
  offeredTo: SortOrder
  servedAsReferenceBefore: SortOrder
  servedAsReferenceForId: SortOrder
  servedAsReferenceAt: SortOrder
  notes: SortOrder
  dealClosed: SortOrder
  createdAt: SortOrder
  userId: SortOrder
  _count: ReferenceCountOrderByAggregateInput
  _avg: ReferenceAvgOrderByAggregateInput
  _max: ReferenceMaxOrderByAggregateInput
  _min: ReferenceMinOrderByAggregateInput
  _sum: ReferenceSumOrderByAggregateInput
}

input ReferenceCountOrderByAggregateInput {
  id: SortOrder
  companyId: SortOrder
  offeredTo: SortOrder
  servedAsReferenceBefore: SortOrder
  servedAsReferenceForId: SortOrder
  servedAsReferenceAt: SortOrder
  notes: SortOrder
  dealClosed: SortOrder
  createdAt: SortOrder
  userId: SortOrder
}

input ReferenceAvgOrderByAggregateInput {
  id: SortOrder
  companyId: SortOrder
  servedAsReferenceForId: SortOrder
  userId: SortOrder
}

input ReferenceMaxOrderByAggregateInput {
  id: SortOrder
  companyId: SortOrder
  offeredTo: SortOrder
  servedAsReferenceBefore: SortOrder
  servedAsReferenceForId: SortOrder
  servedAsReferenceAt: SortOrder
  notes: SortOrder
  dealClosed: SortOrder
  createdAt: SortOrder
  userId: SortOrder
}

input ReferenceMinOrderByAggregateInput {
  id: SortOrder
  companyId: SortOrder
  offeredTo: SortOrder
  servedAsReferenceBefore: SortOrder
  servedAsReferenceForId: SortOrder
  servedAsReferenceAt: SortOrder
  notes: SortOrder
  dealClosed: SortOrder
  createdAt: SortOrder
  userId: SortOrder
}

input ReferenceSumOrderByAggregateInput {
  id: SortOrder
  companyId: SortOrder
  servedAsReferenceForId: SortOrder
  userId: SortOrder
}

input ReferenceScalarWhereWithAggregatesInput {
  AND: [ReferenceScalarWhereWithAggregatesInput!]
  OR: [ReferenceScalarWhereWithAggregatesInput!]
  NOT: [ReferenceScalarWhereWithAggregatesInput!]
  id: IntWithAggregatesFilter
  companyId: IntWithAggregatesFilter
  offeredTo: BoolWithAggregatesFilter
  servedAsReferenceBefore: BoolWithAggregatesFilter
  servedAsReferenceForId: IntNullableWithAggregatesFilter
  servedAsReferenceAt: DateTimeNullableWithAggregatesFilter
  notes: StringNullableWithAggregatesFilter
  dealClosed: BoolNullableWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  userId: IntWithAggregatesFilter
}

input BoolNullableWithAggregatesFilter {
  equals: Boolean
  not: NestedBoolNullableWithAggregatesFilter
  _count: NestedIntNullableFilter
  _min: NestedBoolNullableFilter
  _max: NestedBoolNullableFilter
}

input NestedBoolNullableWithAggregatesFilter {
  equals: Boolean
  not: NestedBoolNullableWithAggregatesFilter
  _count: NestedIntNullableFilter
  _min: NestedBoolNullableFilter
  _max: NestedBoolNullableFilter
}

type AggregateReferenceOnOfferOptions {
  _count: ReferenceOnOfferOptionsCountAggregate
  _avg: ReferenceOnOfferOptionsAvgAggregate
  _sum: ReferenceOnOfferOptionsSumAggregate
  _min: ReferenceOnOfferOptionsMinAggregate
  _max: ReferenceOnOfferOptionsMaxAggregate
}

type ReferenceOnOfferOptionsCountAggregate {
  createdAt: Int!
  referenceId: Int!
  offerOptionId: Int!
  _all: Int!
}

type ReferenceOnOfferOptionsAvgAggregate {
  referenceId: Float
  offerOptionId: Float
}

type ReferenceOnOfferOptionsSumAggregate {
  referenceId: Int
  offerOptionId: Int
}

type ReferenceOnOfferOptionsMinAggregate {
  createdAt: DateTime
  referenceId: Int
  offerOptionId: Int
}

type ReferenceOnOfferOptionsMaxAggregate {
  createdAt: DateTime
  referenceId: Int
  offerOptionId: Int
}

type ReferenceOnOfferOptionsGroupBy {
  createdAt: DateTime!
  referenceId: Int!
  offerOptionId: Int!
  _count: ReferenceOnOfferOptionsCountAggregate
  _avg: ReferenceOnOfferOptionsAvgAggregate
  _sum: ReferenceOnOfferOptionsSumAggregate
  _min: ReferenceOnOfferOptionsMinAggregate
  _max: ReferenceOnOfferOptionsMaxAggregate
}

input ReferenceOnOfferOptionsOrderByWithAggregationInput {
  createdAt: SortOrder
  referenceId: SortOrder
  offerOptionId: SortOrder
  _count: ReferenceOnOfferOptionsCountOrderByAggregateInput
  _avg: ReferenceOnOfferOptionsAvgOrderByAggregateInput
  _max: ReferenceOnOfferOptionsMaxOrderByAggregateInput
  _min: ReferenceOnOfferOptionsMinOrderByAggregateInput
  _sum: ReferenceOnOfferOptionsSumOrderByAggregateInput
}

input ReferenceOnOfferOptionsCountOrderByAggregateInput {
  createdAt: SortOrder
  referenceId: SortOrder
  offerOptionId: SortOrder
}

input ReferenceOnOfferOptionsAvgOrderByAggregateInput {
  referenceId: SortOrder
  offerOptionId: SortOrder
}

input ReferenceOnOfferOptionsMaxOrderByAggregateInput {
  createdAt: SortOrder
  referenceId: SortOrder
  offerOptionId: SortOrder
}

input ReferenceOnOfferOptionsMinOrderByAggregateInput {
  createdAt: SortOrder
  referenceId: SortOrder
  offerOptionId: SortOrder
}

input ReferenceOnOfferOptionsSumOrderByAggregateInput {
  referenceId: SortOrder
  offerOptionId: SortOrder
}

input ReferenceOnOfferOptionsScalarWhereWithAggregatesInput {
  AND: [ReferenceOnOfferOptionsScalarWhereWithAggregatesInput!]
  OR: [ReferenceOnOfferOptionsScalarWhereWithAggregatesInput!]
  NOT: [ReferenceOnOfferOptionsScalarWhereWithAggregatesInput!]
  createdAt: DateTimeWithAggregatesFilter
  referenceId: IntWithAggregatesFilter
  offerOptionId: IntWithAggregatesFilter
}

type AggregateRole {
  _count: RoleCountAggregate
  _avg: RoleAvgAggregate
  _sum: RoleSumAggregate
  _min: RoleMinAggregate
  _max: RoleMaxAggregate
}

type RoleCountAggregate {
  id: Int!
  name: Int!
  capabilities: Int!
  customerId: Int!
  createdAt: Int!
  updatedAt: Int!
  _all: Int!
}

type RoleAvgAggregate {
  id: Float
  capabilities: Float
  customerId: Float
}

type RoleSumAggregate {
  id: Int
  capabilities: [Int!]
  customerId: Int
}

type RoleMinAggregate {
  id: Int
  name: String
  customerId: Int
  createdAt: DateTime
  updatedAt: DateTime
}

type RoleMaxAggregate {
  id: Int
  name: String
  customerId: Int
  createdAt: DateTime
  updatedAt: DateTime
}

type RoleGroupBy {
  id: Int!
  name: String!
  capabilities: [Int!]
  customerId: Int!
  createdAt: DateTime!
  updatedAt: DateTime!
  _count: RoleCountAggregate
  _avg: RoleAvgAggregate
  _sum: RoleSumAggregate
  _min: RoleMinAggregate
  _max: RoleMaxAggregate
}

input RoleOrderByWithAggregationInput {
  id: SortOrder
  name: SortOrder
  capabilities: SortOrder
  customerId: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  _count: RoleCountOrderByAggregateInput
  _avg: RoleAvgOrderByAggregateInput
  _max: RoleMaxOrderByAggregateInput
  _min: RoleMinOrderByAggregateInput
  _sum: RoleSumOrderByAggregateInput
}

input RoleCountOrderByAggregateInput {
  id: SortOrder
  name: SortOrder
  capabilities: SortOrder
  customerId: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input RoleAvgOrderByAggregateInput {
  id: SortOrder
  capabilities: SortOrder
  customerId: SortOrder
}

input RoleMaxOrderByAggregateInput {
  id: SortOrder
  name: SortOrder
  customerId: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input RoleMinOrderByAggregateInput {
  id: SortOrder
  name: SortOrder
  customerId: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input RoleSumOrderByAggregateInput {
  id: SortOrder
  capabilities: SortOrder
  customerId: SortOrder
}

input RoleScalarWhereWithAggregatesInput {
  AND: [RoleScalarWhereWithAggregatesInput!]
  OR: [RoleScalarWhereWithAggregatesInput!]
  NOT: [RoleScalarWhereWithAggregatesInput!]
  id: IntWithAggregatesFilter
  name: StringWithAggregatesFilter
  capabilities: IntNullableListFilter
  customerId: IntWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
}

type AggregateSalesLead {
  _count: SalesLeadCountAggregate
  _avg: SalesLeadAvgAggregate
  _sum: SalesLeadSumAggregate
  _min: SalesLeadMinAggregate
  _max: SalesLeadMaxAggregate
}

type SalesLeadCountAggregate {
  id: Int!
  company: Int!
  customerId: Int!
  description: Int!
  email: Int!
  name: Int!
  processedAt: Int!
  source: Int!
  status: Int!
  createdAt: Int!
  updatedAt: Int!
  _all: Int!
}

type SalesLeadAvgAggregate {
  id: Float
  customerId: Float
}

type SalesLeadSumAggregate {
  id: Int
  customerId: Int
}

type SalesLeadMinAggregate {
  id: Int
  company: String
  customerId: Int
  description: String
  email: String
  name: String
  processedAt: DateTime
  source: String
  status: String
  createdAt: DateTime
  updatedAt: DateTime
}

type SalesLeadMaxAggregate {
  id: Int
  company: String
  customerId: Int
  description: String
  email: String
  name: String
  processedAt: DateTime
  source: String
  status: String
  createdAt: DateTime
  updatedAt: DateTime
}

type SalesLeadGroupBy {
  id: Int!
  company: String!
  customerId: Int!
  description: String
  email: String
  name: String!
  processedAt: DateTime
  source: String!
  status: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  _count: SalesLeadCountAggregate
  _avg: SalesLeadAvgAggregate
  _sum: SalesLeadSumAggregate
  _min: SalesLeadMinAggregate
  _max: SalesLeadMaxAggregate
}

input SalesLeadOrderByWithAggregationInput {
  id: SortOrder
  company: SortOrder
  customerId: SortOrder
  description: SortOrder
  email: SortOrder
  name: SortOrder
  processedAt: SortOrder
  source: SortOrder
  status: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  _count: SalesLeadCountOrderByAggregateInput
  _avg: SalesLeadAvgOrderByAggregateInput
  _max: SalesLeadMaxOrderByAggregateInput
  _min: SalesLeadMinOrderByAggregateInput
  _sum: SalesLeadSumOrderByAggregateInput
}

input SalesLeadCountOrderByAggregateInput {
  id: SortOrder
  company: SortOrder
  customerId: SortOrder
  description: SortOrder
  email: SortOrder
  name: SortOrder
  processedAt: SortOrder
  source: SortOrder
  status: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input SalesLeadAvgOrderByAggregateInput {
  id: SortOrder
  customerId: SortOrder
}

input SalesLeadMaxOrderByAggregateInput {
  id: SortOrder
  company: SortOrder
  customerId: SortOrder
  description: SortOrder
  email: SortOrder
  name: SortOrder
  processedAt: SortOrder
  source: SortOrder
  status: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input SalesLeadMinOrderByAggregateInput {
  id: SortOrder
  company: SortOrder
  customerId: SortOrder
  description: SortOrder
  email: SortOrder
  name: SortOrder
  processedAt: SortOrder
  source: SortOrder
  status: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input SalesLeadSumOrderByAggregateInput {
  id: SortOrder
  customerId: SortOrder
}

input SalesLeadScalarWhereWithAggregatesInput {
  AND: [SalesLeadScalarWhereWithAggregatesInput!]
  OR: [SalesLeadScalarWhereWithAggregatesInput!]
  NOT: [SalesLeadScalarWhereWithAggregatesInput!]
  id: IntWithAggregatesFilter
  company: StringWithAggregatesFilter
  customerId: IntWithAggregatesFilter
  description: StringNullableWithAggregatesFilter
  email: StringNullableWithAggregatesFilter
  name: StringWithAggregatesFilter
  processedAt: DateTimeNullableWithAggregatesFilter
  source: StringWithAggregatesFilter
  status: StringWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
}

type AggregateSyncEvent {
  _count: SyncEventCountAggregate
  _avg: SyncEventAvgAggregate
  _sum: SyncEventSumAggregate
  _min: SyncEventMinAggregate
  _max: SyncEventMaxAggregate
}

type SyncEventCountAggregate {
  id: Int!
  completedAt: Int!
  customerId: Int!
  entityType: Int!
  recordsCreated: Int!
  recordsDeleted: Int!
  recordsUpdated: Int!
  replayId: Int!
  startedAt: Int!
  type: Int!
  _all: Int!
}

type SyncEventAvgAggregate {
  id: Float
  customerId: Float
  recordsCreated: Float
  recordsDeleted: Float
  recordsUpdated: Float
}

type SyncEventSumAggregate {
  id: Int
  customerId: Int
  recordsCreated: Int
  recordsDeleted: Int
  recordsUpdated: Int
}

type SyncEventMinAggregate {
  id: Int
  completedAt: DateTime
  customerId: Int
  entityType: SyncEventEntityType
  recordsCreated: Int
  recordsDeleted: Int
  recordsUpdated: Int
  replayId: String
  startedAt: DateTime
  type: SyncEventType
}

type SyncEventMaxAggregate {
  id: Int
  completedAt: DateTime
  customerId: Int
  entityType: SyncEventEntityType
  recordsCreated: Int
  recordsDeleted: Int
  recordsUpdated: Int
  replayId: String
  startedAt: DateTime
  type: SyncEventType
}

type SyncEventGroupBy {
  id: Int!
  completedAt: DateTime
  customerId: Int!
  entityType: SyncEventEntityType!
  recordsCreated: Int!
  recordsDeleted: Int!
  recordsUpdated: Int!
  replayId: String
  startedAt: DateTime!
  type: SyncEventType!
  _count: SyncEventCountAggregate
  _avg: SyncEventAvgAggregate
  _sum: SyncEventSumAggregate
  _min: SyncEventMinAggregate
  _max: SyncEventMaxAggregate
}

input SyncEventOrderByWithAggregationInput {
  id: SortOrder
  completedAt: SortOrder
  customerId: SortOrder
  entityType: SortOrder
  recordsCreated: SortOrder
  recordsDeleted: SortOrder
  recordsUpdated: SortOrder
  replayId: SortOrder
  startedAt: SortOrder
  type: SortOrder
  _count: SyncEventCountOrderByAggregateInput
  _avg: SyncEventAvgOrderByAggregateInput
  _max: SyncEventMaxOrderByAggregateInput
  _min: SyncEventMinOrderByAggregateInput
  _sum: SyncEventSumOrderByAggregateInput
}

input SyncEventCountOrderByAggregateInput {
  id: SortOrder
  completedAt: SortOrder
  customerId: SortOrder
  entityType: SortOrder
  recordsCreated: SortOrder
  recordsDeleted: SortOrder
  recordsUpdated: SortOrder
  replayId: SortOrder
  startedAt: SortOrder
  type: SortOrder
}

input SyncEventAvgOrderByAggregateInput {
  id: SortOrder
  customerId: SortOrder
  recordsCreated: SortOrder
  recordsDeleted: SortOrder
  recordsUpdated: SortOrder
}

input SyncEventMaxOrderByAggregateInput {
  id: SortOrder
  completedAt: SortOrder
  customerId: SortOrder
  entityType: SortOrder
  recordsCreated: SortOrder
  recordsDeleted: SortOrder
  recordsUpdated: SortOrder
  replayId: SortOrder
  startedAt: SortOrder
  type: SortOrder
}

input SyncEventMinOrderByAggregateInput {
  id: SortOrder
  completedAt: SortOrder
  customerId: SortOrder
  entityType: SortOrder
  recordsCreated: SortOrder
  recordsDeleted: SortOrder
  recordsUpdated: SortOrder
  replayId: SortOrder
  startedAt: SortOrder
  type: SortOrder
}

input SyncEventSumOrderByAggregateInput {
  id: SortOrder
  customerId: SortOrder
  recordsCreated: SortOrder
  recordsDeleted: SortOrder
  recordsUpdated: SortOrder
}

input SyncEventScalarWhereWithAggregatesInput {
  AND: [SyncEventScalarWhereWithAggregatesInput!]
  OR: [SyncEventScalarWhereWithAggregatesInput!]
  NOT: [SyncEventScalarWhereWithAggregatesInput!]
  id: IntWithAggregatesFilter
  completedAt: DateTimeNullableWithAggregatesFilter
  customerId: IntWithAggregatesFilter
  entityType: EnumSyncEventEntityTypeWithAggregatesFilter
  recordsCreated: IntWithAggregatesFilter
  recordsDeleted: IntWithAggregatesFilter
  recordsUpdated: IntWithAggregatesFilter
  replayId: StringNullableWithAggregatesFilter
  startedAt: DateTimeWithAggregatesFilter
  type: EnumSyncEventTypeWithAggregatesFilter
}

input EnumSyncEventEntityTypeWithAggregatesFilter {
  equals: SyncEventEntityType
  in: [SyncEventEntityType!]
  notIn: [SyncEventEntityType!]
  not: NestedEnumSyncEventEntityTypeWithAggregatesFilter
  _count: NestedIntFilter
  _min: NestedEnumSyncEventEntityTypeFilter
  _max: NestedEnumSyncEventEntityTypeFilter
}

input NestedEnumSyncEventEntityTypeWithAggregatesFilter {
  equals: SyncEventEntityType
  in: [SyncEventEntityType!]
  notIn: [SyncEventEntityType!]
  not: NestedEnumSyncEventEntityTypeWithAggregatesFilter
  _count: NestedIntFilter
  _min: NestedEnumSyncEventEntityTypeFilter
  _max: NestedEnumSyncEventEntityTypeFilter
}

input EnumSyncEventTypeWithAggregatesFilter {
  equals: SyncEventType
  in: [SyncEventType!]
  notIn: [SyncEventType!]
  not: NestedEnumSyncEventTypeWithAggregatesFilter
  _count: NestedIntFilter
  _min: NestedEnumSyncEventTypeFilter
  _max: NestedEnumSyncEventTypeFilter
}

input NestedEnumSyncEventTypeWithAggregatesFilter {
  equals: SyncEventType
  in: [SyncEventType!]
  notIn: [SyncEventType!]
  not: NestedEnumSyncEventTypeWithAggregatesFilter
  _count: NestedIntFilter
  _min: NestedEnumSyncEventTypeFilter
  _max: NestedEnumSyncEventTypeFilter
}

type TemplateShortCodes {
  id: Int!
  shortcode: String!
  icon: String!
  label: String!
  createdAt: DateTime!
}

input TemplateShortCodesWhereUniqueInput {
  id: Int
}

input TemplateShortCodesWhereInput {
  AND: [TemplateShortCodesWhereInput!]
  OR: [TemplateShortCodesWhereInput!]
  NOT: [TemplateShortCodesWhereInput!]
  id: IntFilter
  shortcode: StringFilter
  icon: StringFilter
  label: StringFilter
  createdAt: DateTimeFilter
}

input TemplateShortCodesOrderByWithRelationInput {
  id: SortOrder
  shortcode: SortOrder
  icon: SortOrder
  label: SortOrder
  createdAt: SortOrder
}

enum TemplateShortCodesScalarFieldEnum {
  id
  shortcode
  icon
  label
  createdAt
}

type AggregateTemplateShortCodes {
  _count: TemplateShortCodesCountAggregate
  _avg: TemplateShortCodesAvgAggregate
  _sum: TemplateShortCodesSumAggregate
  _min: TemplateShortCodesMinAggregate
  _max: TemplateShortCodesMaxAggregate
}

type TemplateShortCodesCountAggregate {
  id: Int!
  shortcode: Int!
  icon: Int!
  label: Int!
  createdAt: Int!
  _all: Int!
}

type TemplateShortCodesAvgAggregate {
  id: Float
}

type TemplateShortCodesSumAggregate {
  id: Int
}

type TemplateShortCodesMinAggregate {
  id: Int
  shortcode: String
  icon: String
  label: String
  createdAt: DateTime
}

type TemplateShortCodesMaxAggregate {
  id: Int
  shortcode: String
  icon: String
  label: String
  createdAt: DateTime
}

type TemplateShortCodesGroupBy {
  id: Int!
  shortcode: String!
  icon: String!
  label: String!
  createdAt: DateTime!
  _count: TemplateShortCodesCountAggregate
  _avg: TemplateShortCodesAvgAggregate
  _sum: TemplateShortCodesSumAggregate
  _min: TemplateShortCodesMinAggregate
  _max: TemplateShortCodesMaxAggregate
}

input TemplateShortCodesOrderByWithAggregationInput {
  id: SortOrder
  shortcode: SortOrder
  icon: SortOrder
  label: SortOrder
  createdAt: SortOrder
  _count: TemplateShortCodesCountOrderByAggregateInput
  _avg: TemplateShortCodesAvgOrderByAggregateInput
  _max: TemplateShortCodesMaxOrderByAggregateInput
  _min: TemplateShortCodesMinOrderByAggregateInput
  _sum: TemplateShortCodesSumOrderByAggregateInput
}

input TemplateShortCodesCountOrderByAggregateInput {
  id: SortOrder
  shortcode: SortOrder
  icon: SortOrder
  label: SortOrder
  createdAt: SortOrder
}

input TemplateShortCodesAvgOrderByAggregateInput {
  id: SortOrder
}

input TemplateShortCodesMaxOrderByAggregateInput {
  id: SortOrder
  shortcode: SortOrder
  icon: SortOrder
  label: SortOrder
  createdAt: SortOrder
}

input TemplateShortCodesMinOrderByAggregateInput {
  id: SortOrder
  shortcode: SortOrder
  icon: SortOrder
  label: SortOrder
  createdAt: SortOrder
}

input TemplateShortCodesSumOrderByAggregateInput {
  id: SortOrder
}

input TemplateShortCodesScalarWhereWithAggregatesInput {
  AND: [TemplateShortCodesScalarWhereWithAggregatesInput!]
  OR: [TemplateShortCodesScalarWhereWithAggregatesInput!]
  NOT: [TemplateShortCodesScalarWhereWithAggregatesInput!]
  id: IntWithAggregatesFilter
  shortcode: StringWithAggregatesFilter
  icon: StringWithAggregatesFilter
  label: StringWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
}

type AggregateUseCaseCollections {
  _count: UseCaseCollectionsCountAggregate
  _avg: UseCaseCollectionsAvgAggregate
  _sum: UseCaseCollectionsSumAggregate
  _min: UseCaseCollectionsMinAggregate
  _max: UseCaseCollectionsMaxAggregate
}

type UseCaseCollectionsCountAggregate {
  id: Int!
  name: Int!
  customerId: Int!
  default: Int!
  createdAt: Int!
  updatedAt: Int!
  _all: Int!
}

type UseCaseCollectionsAvgAggregate {
  id: Float
  customerId: Float
}

type UseCaseCollectionsSumAggregate {
  id: Int
  customerId: Int
}

type UseCaseCollectionsMinAggregate {
  id: Int
  name: String
  customerId: Int
  default: Boolean
  createdAt: DateTime
  updatedAt: DateTime
}

type UseCaseCollectionsMaxAggregate {
  id: Int
  name: String
  customerId: Int
  default: Boolean
  createdAt: DateTime
  updatedAt: DateTime
}

type UseCaseCollectionsGroupBy {
  id: Int!
  name: String!
  customerId: Int!
  default: Boolean!
  createdAt: DateTime!
  updatedAt: DateTime
  _count: UseCaseCollectionsCountAggregate
  _avg: UseCaseCollectionsAvgAggregate
  _sum: UseCaseCollectionsSumAggregate
  _min: UseCaseCollectionsMinAggregate
  _max: UseCaseCollectionsMaxAggregate
}

input UseCaseCollectionsOrderByWithAggregationInput {
  id: SortOrder
  name: SortOrder
  customerId: SortOrder
  default: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  _count: UseCaseCollectionsCountOrderByAggregateInput
  _avg: UseCaseCollectionsAvgOrderByAggregateInput
  _max: UseCaseCollectionsMaxOrderByAggregateInput
  _min: UseCaseCollectionsMinOrderByAggregateInput
  _sum: UseCaseCollectionsSumOrderByAggregateInput
}

input UseCaseCollectionsCountOrderByAggregateInput {
  id: SortOrder
  name: SortOrder
  customerId: SortOrder
  default: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input UseCaseCollectionsAvgOrderByAggregateInput {
  id: SortOrder
  customerId: SortOrder
}

input UseCaseCollectionsMaxOrderByAggregateInput {
  id: SortOrder
  name: SortOrder
  customerId: SortOrder
  default: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input UseCaseCollectionsMinOrderByAggregateInput {
  id: SortOrder
  name: SortOrder
  customerId: SortOrder
  default: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input UseCaseCollectionsSumOrderByAggregateInput {
  id: SortOrder
  customerId: SortOrder
}

input UseCaseCollectionsScalarWhereWithAggregatesInput {
  AND: [UseCaseCollectionsScalarWhereWithAggregatesInput!]
  OR: [UseCaseCollectionsScalarWhereWithAggregatesInput!]
  NOT: [UseCaseCollectionsScalarWhereWithAggregatesInput!]
  id: IntWithAggregatesFilter
  name: StringWithAggregatesFilter
  customerId: IntWithAggregatesFilter
  default: BoolWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  updatedAt: DateTimeNullableWithAggregatesFilter
}

input UseCasesWhereUniqueInput {
  id: Int
}

enum UseCasesScalarFieldEnum {
  id
  name
  displayName
  createdAt
  updatedAt
}

type AggregateUseCases {
  _count: UseCasesCountAggregate
  _avg: UseCasesAvgAggregate
  _sum: UseCasesSumAggregate
  _min: UseCasesMinAggregate
  _max: UseCasesMaxAggregate
}

type UseCasesCountAggregate {
  id: Int!
  name: Int!
  displayName: Int!
  createdAt: Int!
  updatedAt: Int!
  _all: Int!
}

type UseCasesAvgAggregate {
  id: Float
}

type UseCasesSumAggregate {
  id: Int
}

type UseCasesMinAggregate {
  id: Int
  name: String
  displayName: String
  createdAt: DateTime
  updatedAt: DateTime
}

type UseCasesMaxAggregate {
  id: Int
  name: String
  displayName: String
  createdAt: DateTime
  updatedAt: DateTime
}

type UseCasesGroupBy {
  id: Int!
  name: String!
  displayName: String!
  createdAt: DateTime!
  updatedAt: DateTime
  _count: UseCasesCountAggregate
  _avg: UseCasesAvgAggregate
  _sum: UseCasesSumAggregate
  _min: UseCasesMinAggregate
  _max: UseCasesMaxAggregate
}

input UseCasesOrderByWithAggregationInput {
  id: SortOrder
  name: SortOrder
  displayName: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  _count: UseCasesCountOrderByAggregateInput
  _avg: UseCasesAvgOrderByAggregateInput
  _max: UseCasesMaxOrderByAggregateInput
  _min: UseCasesMinOrderByAggregateInput
  _sum: UseCasesSumOrderByAggregateInput
}

input UseCasesCountOrderByAggregateInput {
  id: SortOrder
  name: SortOrder
  displayName: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input UseCasesAvgOrderByAggregateInput {
  id: SortOrder
}

input UseCasesMaxOrderByAggregateInput {
  id: SortOrder
  name: SortOrder
  displayName: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input UseCasesMinOrderByAggregateInput {
  id: SortOrder
  name: SortOrder
  displayName: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input UseCasesSumOrderByAggregateInput {
  id: SortOrder
}

input UseCasesScalarWhereWithAggregatesInput {
  AND: [UseCasesScalarWhereWithAggregatesInput!]
  OR: [UseCasesScalarWhereWithAggregatesInput!]
  NOT: [UseCasesScalarWhereWithAggregatesInput!]
  id: IntWithAggregatesFilter
  name: StringWithAggregatesFilter
  displayName: StringWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  updatedAt: DateTimeNullableWithAggregatesFilter
}

type AggregateUseCasesOnCollections {
  _count: UseCasesOnCollectionsCountAggregate
  _avg: UseCasesOnCollectionsAvgAggregate
  _sum: UseCasesOnCollectionsSumAggregate
  _min: UseCasesOnCollectionsMinAggregate
  _max: UseCasesOnCollectionsMaxAggregate
}

type UseCasesOnCollectionsCountAggregate {
  id: Int!
  status: Int!
  useCaseId: Int!
  collectionId: Int!
  createdAt: Int!
  updatedAt: Int!
  _all: Int!
}

type UseCasesOnCollectionsAvgAggregate {
  id: Float
  useCaseId: Float
  collectionId: Float
}

type UseCasesOnCollectionsSumAggregate {
  id: Int
  useCaseId: Int
  collectionId: Int
}

type UseCasesOnCollectionsMinAggregate {
  id: Int
  status: Boolean
  useCaseId: Int
  collectionId: Int
  createdAt: DateTime
  updatedAt: DateTime
}

type UseCasesOnCollectionsMaxAggregate {
  id: Int
  status: Boolean
  useCaseId: Int
  collectionId: Int
  createdAt: DateTime
  updatedAt: DateTime
}

type UseCasesOnCollectionsGroupBy {
  id: Int!
  status: Boolean!
  useCaseId: Int!
  collectionId: Int!
  createdAt: DateTime!
  updatedAt: DateTime
  _count: UseCasesOnCollectionsCountAggregate
  _avg: UseCasesOnCollectionsAvgAggregate
  _sum: UseCasesOnCollectionsSumAggregate
  _min: UseCasesOnCollectionsMinAggregate
  _max: UseCasesOnCollectionsMaxAggregate
}

input UseCasesOnCollectionsOrderByWithAggregationInput {
  id: SortOrder
  status: SortOrder
  useCaseId: SortOrder
  collectionId: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  _count: UseCasesOnCollectionsCountOrderByAggregateInput
  _avg: UseCasesOnCollectionsAvgOrderByAggregateInput
  _max: UseCasesOnCollectionsMaxOrderByAggregateInput
  _min: UseCasesOnCollectionsMinOrderByAggregateInput
  _sum: UseCasesOnCollectionsSumOrderByAggregateInput
}

input UseCasesOnCollectionsCountOrderByAggregateInput {
  id: SortOrder
  status: SortOrder
  useCaseId: SortOrder
  collectionId: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input UseCasesOnCollectionsAvgOrderByAggregateInput {
  id: SortOrder
  useCaseId: SortOrder
  collectionId: SortOrder
}

input UseCasesOnCollectionsMaxOrderByAggregateInput {
  id: SortOrder
  status: SortOrder
  useCaseId: SortOrder
  collectionId: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input UseCasesOnCollectionsMinOrderByAggregateInput {
  id: SortOrder
  status: SortOrder
  useCaseId: SortOrder
  collectionId: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input UseCasesOnCollectionsSumOrderByAggregateInput {
  id: SortOrder
  useCaseId: SortOrder
  collectionId: SortOrder
}

input UseCasesOnCollectionsScalarWhereWithAggregatesInput {
  AND: [UseCasesOnCollectionsScalarWhereWithAggregatesInput!]
  OR: [UseCasesOnCollectionsScalarWhereWithAggregatesInput!]
  NOT: [UseCasesOnCollectionsScalarWhereWithAggregatesInput!]
  id: IntWithAggregatesFilter
  status: BoolWithAggregatesFilter
  useCaseId: IntWithAggregatesFilter
  collectionId: IntWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  updatedAt: DateTimeNullableWithAggregatesFilter
}

type AggregateUser {
  _count: UserCountAggregate
  _avg: UserAvgAggregate
  _sum: UserSumAggregate
  _min: UserMinAggregate
  _max: UserMaxAggregate
}

type UserCountAggregate {
  id: Int!
  admin: Int!
  customerId: Int!
  email: Int!
  name: Int!
  passwordHash: Int!
  passwordSalt: Int!
  workPhone: Int!
  mobilePhone: Int!
  title: Int!
  token: Int!
  notificationSettings: Int!
  createdAt: Int!
  updatedAt: Int!
  dynamicFields: Int!
  active: Int!
  oktaUserId: Int!
  oktaManagerId: Int!
  forgetPassword: Int!
  csmStatus: Int!
  crmStatus: Int!
  _all: Int!
}

type UserAvgAggregate {
  id: Float
  customerId: Float
  oktaUserId: Float
  oktaManagerId: Float
}

type UserSumAggregate {
  id: Int
  customerId: Int
  oktaUserId: Int
  oktaManagerId: Int
}

type UserMinAggregate {
  id: Int
  admin: Boolean
  customerId: Int
  email: String
  name: String
  passwordHash: String
  passwordSalt: String
  workPhone: String
  mobilePhone: String
  title: String
  token: String
  createdAt: DateTime
  updatedAt: DateTime
  active: Boolean
  oktaUserId: Int
  oktaManagerId: Int
  forgetPassword: String
  csmStatus: Boolean
  crmStatus: Boolean
}

type UserMaxAggregate {
  id: Int
  admin: Boolean
  customerId: Int
  email: String
  name: String
  passwordHash: String
  passwordSalt: String
  workPhone: String
  mobilePhone: String
  title: String
  token: String
  createdAt: DateTime
  updatedAt: DateTime
  active: Boolean
  oktaUserId: Int
  oktaManagerId: Int
  forgetPassword: String
  csmStatus: Boolean
  crmStatus: Boolean
}

type UserGroupBy {
  id: Int!
  admin: Boolean!
  customerId: Int!
  email: String!
  name: String!
  passwordHash: String
  passwordSalt: String
  workPhone: String
  mobilePhone: String
  title: String
  token: String
  notificationSettings: JSON
  createdAt: DateTime!
  updatedAt: DateTime!
  dynamicFields: JSON
  active: Boolean!
  oktaUserId: Int
  oktaManagerId: Int
  forgetPassword: String
  csmStatus: Boolean!
  crmStatus: Boolean!
  _count: UserCountAggregate
  _avg: UserAvgAggregate
  _sum: UserSumAggregate
  _min: UserMinAggregate
  _max: UserMaxAggregate
}

input UserOrderByWithAggregationInput {
  id: SortOrder
  admin: SortOrder
  customerId: SortOrder
  email: SortOrder
  name: SortOrder
  passwordHash: SortOrder
  passwordSalt: SortOrder
  workPhone: SortOrder
  mobilePhone: SortOrder
  title: SortOrder
  token: SortOrder
  notificationSettings: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  dynamicFields: SortOrder
  active: SortOrder
  oktaUserId: SortOrder
  oktaManagerId: SortOrder
  forgetPassword: SortOrder
  csmStatus: SortOrder
  crmStatus: SortOrder
  _count: UserCountOrderByAggregateInput
  _avg: UserAvgOrderByAggregateInput
  _max: UserMaxOrderByAggregateInput
  _min: UserMinOrderByAggregateInput
  _sum: UserSumOrderByAggregateInput
}

input UserCountOrderByAggregateInput {
  id: SortOrder
  admin: SortOrder
  customerId: SortOrder
  email: SortOrder
  name: SortOrder
  passwordHash: SortOrder
  passwordSalt: SortOrder
  workPhone: SortOrder
  mobilePhone: SortOrder
  title: SortOrder
  token: SortOrder
  notificationSettings: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  dynamicFields: SortOrder
  active: SortOrder
  oktaUserId: SortOrder
  oktaManagerId: SortOrder
  forgetPassword: SortOrder
  csmStatus: SortOrder
  crmStatus: SortOrder
}

input UserAvgOrderByAggregateInput {
  id: SortOrder
  customerId: SortOrder
  oktaUserId: SortOrder
  oktaManagerId: SortOrder
}

input UserMaxOrderByAggregateInput {
  id: SortOrder
  admin: SortOrder
  customerId: SortOrder
  email: SortOrder
  name: SortOrder
  passwordHash: SortOrder
  passwordSalt: SortOrder
  workPhone: SortOrder
  mobilePhone: SortOrder
  title: SortOrder
  token: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  active: SortOrder
  oktaUserId: SortOrder
  oktaManagerId: SortOrder
  forgetPassword: SortOrder
  csmStatus: SortOrder
  crmStatus: SortOrder
}

input UserMinOrderByAggregateInput {
  id: SortOrder
  admin: SortOrder
  customerId: SortOrder
  email: SortOrder
  name: SortOrder
  passwordHash: SortOrder
  passwordSalt: SortOrder
  workPhone: SortOrder
  mobilePhone: SortOrder
  title: SortOrder
  token: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  active: SortOrder
  oktaUserId: SortOrder
  oktaManagerId: SortOrder
  forgetPassword: SortOrder
  csmStatus: SortOrder
  crmStatus: SortOrder
}

input UserSumOrderByAggregateInput {
  id: SortOrder
  customerId: SortOrder
  oktaUserId: SortOrder
  oktaManagerId: SortOrder
}

input UserScalarWhereWithAggregatesInput {
  AND: [UserScalarWhereWithAggregatesInput!]
  OR: [UserScalarWhereWithAggregatesInput!]
  NOT: [UserScalarWhereWithAggregatesInput!]
  id: IntWithAggregatesFilter
  admin: BoolWithAggregatesFilter
  customerId: IntWithAggregatesFilter
  email: StringWithAggregatesFilter
  name: StringWithAggregatesFilter
  passwordHash: StringNullableWithAggregatesFilter
  passwordSalt: StringNullableWithAggregatesFilter
  workPhone: StringNullableWithAggregatesFilter
  mobilePhone: StringNullableWithAggregatesFilter
  title: StringNullableWithAggregatesFilter
  token: StringNullableWithAggregatesFilter
  notificationSettings: JsonNullableWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
  dynamicFields: JsonNullableWithAggregatesFilter
  active: BoolWithAggregatesFilter
  oktaUserId: IntNullableWithAggregatesFilter
  oktaManagerId: IntNullableWithAggregatesFilter
  forgetPassword: StringNullableWithAggregatesFilter
  csmStatus: BoolWithAggregatesFilter
  crmStatus: BoolWithAggregatesFilter
}

type AggregateUserCompanyRatings {
  _count: UserCompanyRatingsCountAggregate
  _avg: UserCompanyRatingsAvgAggregate
  _sum: UserCompanyRatingsSumAggregate
  _min: UserCompanyRatingsMinAggregate
  _max: UserCompanyRatingsMaxAggregate
}

type UserCompanyRatingsCountAggregate {
  id: Int!
  userId: Int!
  ratingId: Int!
  companyId: Int!
  createdAt: Int!
  updatedAt: Int!
  _all: Int!
}

type UserCompanyRatingsAvgAggregate {
  id: Float
  userId: Float
  ratingId: Float
  companyId: Float
}

type UserCompanyRatingsSumAggregate {
  id: Int
  userId: Int
  ratingId: Int
  companyId: Int
}

type UserCompanyRatingsMinAggregate {
  id: Int
  userId: Int
  ratingId: Int
  companyId: Int
  createdAt: DateTime
  updatedAt: DateTime
}

type UserCompanyRatingsMaxAggregate {
  id: Int
  userId: Int
  ratingId: Int
  companyId: Int
  createdAt: DateTime
  updatedAt: DateTime
}

type UserCompanyRatingsGroupBy {
  id: Int!
  userId: Int!
  ratingId: Int!
  companyId: Int!
  createdAt: DateTime!
  updatedAt: DateTime!
  _count: UserCompanyRatingsCountAggregate
  _avg: UserCompanyRatingsAvgAggregate
  _sum: UserCompanyRatingsSumAggregate
  _min: UserCompanyRatingsMinAggregate
  _max: UserCompanyRatingsMaxAggregate
}

input UserCompanyRatingsOrderByWithAggregationInput {
  id: SortOrder
  userId: SortOrder
  ratingId: SortOrder
  companyId: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
  _count: UserCompanyRatingsCountOrderByAggregateInput
  _avg: UserCompanyRatingsAvgOrderByAggregateInput
  _max: UserCompanyRatingsMaxOrderByAggregateInput
  _min: UserCompanyRatingsMinOrderByAggregateInput
  _sum: UserCompanyRatingsSumOrderByAggregateInput
}

input UserCompanyRatingsCountOrderByAggregateInput {
  id: SortOrder
  userId: SortOrder
  ratingId: SortOrder
  companyId: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input UserCompanyRatingsAvgOrderByAggregateInput {
  id: SortOrder
  userId: SortOrder
  ratingId: SortOrder
  companyId: SortOrder
}

input UserCompanyRatingsMaxOrderByAggregateInput {
  id: SortOrder
  userId: SortOrder
  ratingId: SortOrder
  companyId: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input UserCompanyRatingsMinOrderByAggregateInput {
  id: SortOrder
  userId: SortOrder
  ratingId: SortOrder
  companyId: SortOrder
  createdAt: SortOrder
  updatedAt: SortOrder
}

input UserCompanyRatingsSumOrderByAggregateInput {
  id: SortOrder
  userId: SortOrder
  ratingId: SortOrder
  companyId: SortOrder
}

input UserCompanyRatingsScalarWhereWithAggregatesInput {
  AND: [UserCompanyRatingsScalarWhereWithAggregatesInput!]
  OR: [UserCompanyRatingsScalarWhereWithAggregatesInput!]
  NOT: [UserCompanyRatingsScalarWhereWithAggregatesInput!]
  id: IntWithAggregatesFilter
  userId: IntWithAggregatesFilter
  ratingId: IntWithAggregatesFilter
  companyId: IntWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
}

type AggregateUserEvents {
  _count: UserEventsCountAggregate
  _avg: UserEventsAvgAggregate
  _sum: UserEventsSumAggregate
  _min: UserEventsMinAggregate
  _max: UserEventsMaxAggregate
}

type UserEventsCountAggregate {
  id: Int!
  userId: Int!
  readAt: Int!
  flaggedAt: Int!
  hideAt: Int!
  eventId: Int!
  createdAt: Int!
  _all: Int!
}

type UserEventsAvgAggregate {
  id: Float
  userId: Float
  flaggedAt: Float
  eventId: Float
}

type UserEventsSumAggregate {
  id: Int
  userId: Int
  flaggedAt: Int
  eventId: Int
}

type UserEventsMinAggregate {
  id: Int
  userId: Int
  readAt: DateTime
  flaggedAt: Int
  hideAt: DateTime
  eventId: Int
  createdAt: DateTime
}

type UserEventsMaxAggregate {
  id: Int
  userId: Int
  readAt: DateTime
  flaggedAt: Int
  hideAt: DateTime
  eventId: Int
  createdAt: DateTime
}

type UserEventsGroupBy {
  id: Int!
  userId: Int!
  readAt: DateTime
  flaggedAt: Int
  hideAt: DateTime
  eventId: Int!
  createdAt: DateTime!
  _count: UserEventsCountAggregate
  _avg: UserEventsAvgAggregate
  _sum: UserEventsSumAggregate
  _min: UserEventsMinAggregate
  _max: UserEventsMaxAggregate
}

input UserEventsOrderByWithAggregationInput {
  id: SortOrder
  userId: SortOrder
  readAt: SortOrder
  flaggedAt: SortOrder
  hideAt: SortOrder
  eventId: SortOrder
  createdAt: SortOrder
  _count: UserEventsCountOrderByAggregateInput
  _avg: UserEventsAvgOrderByAggregateInput
  _max: UserEventsMaxOrderByAggregateInput
  _min: UserEventsMinOrderByAggregateInput
  _sum: UserEventsSumOrderByAggregateInput
}

input UserEventsCountOrderByAggregateInput {
  id: SortOrder
  userId: SortOrder
  readAt: SortOrder
  flaggedAt: SortOrder
  hideAt: SortOrder
  eventId: SortOrder
  createdAt: SortOrder
}

input UserEventsAvgOrderByAggregateInput {
  id: SortOrder
  userId: SortOrder
  flaggedAt: SortOrder
  eventId: SortOrder
}

input UserEventsMaxOrderByAggregateInput {
  id: SortOrder
  userId: SortOrder
  readAt: SortOrder
  flaggedAt: SortOrder
  hideAt: SortOrder
  eventId: SortOrder
  createdAt: SortOrder
}

input UserEventsMinOrderByAggregateInput {
  id: SortOrder
  userId: SortOrder
  readAt: SortOrder
  flaggedAt: SortOrder
  hideAt: SortOrder
  eventId: SortOrder
  createdAt: SortOrder
}

input UserEventsSumOrderByAggregateInput {
  id: SortOrder
  userId: SortOrder
  flaggedAt: SortOrder
  eventId: SortOrder
}

input UserEventsScalarWhereWithAggregatesInput {
  AND: [UserEventsScalarWhereWithAggregatesInput!]
  OR: [UserEventsScalarWhereWithAggregatesInput!]
  NOT: [UserEventsScalarWhereWithAggregatesInput!]
  id: IntWithAggregatesFilter
  userId: IntWithAggregatesFilter
  readAt: DateTimeNullableWithAggregatesFilter
  flaggedAt: IntNullableWithAggregatesFilter
  hideAt: DateTimeNullableWithAggregatesFilter
  eventId: IntWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
}

type AggregateUserManager {
  _count: UserManagerCountAggregate
  _avg: UserManagerAvgAggregate
  _sum: UserManagerSumAggregate
  _min: UserManagerMinAggregate
  _max: UserManagerMaxAggregate
}

type UserManagerCountAggregate {
  id: Int!
  userId: Int!
  managerId: Int!
  createdAt: Int!
  _all: Int!
}

type UserManagerAvgAggregate {
  id: Float
  userId: Float
  managerId: Float
}

type UserManagerSumAggregate {
  id: Int
  userId: Int
  managerId: Int
}

type UserManagerMinAggregate {
  id: Int
  userId: Int
  managerId: Int
  createdAt: DateTime
}

type UserManagerMaxAggregate {
  id: Int
  userId: Int
  managerId: Int
  createdAt: DateTime
}

type UserManagerGroupBy {
  id: Int!
  userId: Int!
  managerId: Int!
  createdAt: DateTime!
  _count: UserManagerCountAggregate
  _avg: UserManagerAvgAggregate
  _sum: UserManagerSumAggregate
  _min: UserManagerMinAggregate
  _max: UserManagerMaxAggregate
}

input UserManagerOrderByWithAggregationInput {
  id: SortOrder
  userId: SortOrder
  managerId: SortOrder
  createdAt: SortOrder
  _count: UserManagerCountOrderByAggregateInput
  _avg: UserManagerAvgOrderByAggregateInput
  _max: UserManagerMaxOrderByAggregateInput
  _min: UserManagerMinOrderByAggregateInput
  _sum: UserManagerSumOrderByAggregateInput
}

input UserManagerCountOrderByAggregateInput {
  id: SortOrder
  userId: SortOrder
  managerId: SortOrder
  createdAt: SortOrder
}

input UserManagerAvgOrderByAggregateInput {
  id: SortOrder
  userId: SortOrder
  managerId: SortOrder
}

input UserManagerMaxOrderByAggregateInput {
  id: SortOrder
  userId: SortOrder
  managerId: SortOrder
  createdAt: SortOrder
}

input UserManagerMinOrderByAggregateInput {
  id: SortOrder
  userId: SortOrder
  managerId: SortOrder
  createdAt: SortOrder
}

input UserManagerSumOrderByAggregateInput {
  id: SortOrder
  userId: SortOrder
  managerId: SortOrder
}

input UserManagerScalarWhereWithAggregatesInput {
  AND: [UserManagerScalarWhereWithAggregatesInput!]
  OR: [UserManagerScalarWhereWithAggregatesInput!]
  NOT: [UserManagerScalarWhereWithAggregatesInput!]
  id: IntWithAggregatesFilter
  userId: IntWithAggregatesFilter
  managerId: IntWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
}

type AggregateUserRole {
  _count: UserRoleCountAggregate
  _avg: UserRoleAvgAggregate
  _sum: UserRoleSumAggregate
  _min: UserRoleMinAggregate
  _max: UserRoleMaxAggregate
}

type UserRoleCountAggregate {
  id: Int!
  roleId: Int!
  userId: Int!
  createdAt: Int!
  _all: Int!
}

type UserRoleAvgAggregate {
  id: Float
  roleId: Float
  userId: Float
}

type UserRoleSumAggregate {
  id: Int
  roleId: Int
  userId: Int
}

type UserRoleMinAggregate {
  id: Int
  roleId: Int
  userId: Int
  createdAt: DateTime
}

type UserRoleMaxAggregate {
  id: Int
  roleId: Int
  userId: Int
  createdAt: DateTime
}

type UserRoleGroupBy {
  id: Int!
  roleId: Int!
  userId: Int!
  createdAt: DateTime!
  _count: UserRoleCountAggregate
  _avg: UserRoleAvgAggregate
  _sum: UserRoleSumAggregate
  _min: UserRoleMinAggregate
  _max: UserRoleMaxAggregate
}

input UserRoleOrderByWithAggregationInput {
  id: SortOrder
  roleId: SortOrder
  userId: SortOrder
  createdAt: SortOrder
  _count: UserRoleCountOrderByAggregateInput
  _avg: UserRoleAvgOrderByAggregateInput
  _max: UserRoleMaxOrderByAggregateInput
  _min: UserRoleMinOrderByAggregateInput
  _sum: UserRoleSumOrderByAggregateInput
}

input UserRoleCountOrderByAggregateInput {
  id: SortOrder
  roleId: SortOrder
  userId: SortOrder
  createdAt: SortOrder
}

input UserRoleAvgOrderByAggregateInput {
  id: SortOrder
  roleId: SortOrder
  userId: SortOrder
}

input UserRoleMaxOrderByAggregateInput {
  id: SortOrder
  roleId: SortOrder
  userId: SortOrder
  createdAt: SortOrder
}

input UserRoleMinOrderByAggregateInput {
  id: SortOrder
  roleId: SortOrder
  userId: SortOrder
  createdAt: SortOrder
}

input UserRoleSumOrderByAggregateInput {
  id: SortOrder
  roleId: SortOrder
  userId: SortOrder
}

input UserRoleScalarWhereWithAggregatesInput {
  AND: [UserRoleScalarWhereWithAggregatesInput!]
  OR: [UserRoleScalarWhereWithAggregatesInput!]
  NOT: [UserRoleScalarWhereWithAggregatesInput!]
  id: IntWithAggregatesFilter
  roleId: IntWithAggregatesFilter
  userId: IntWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
}

# The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
scalar JSONObject

# The basic order types
enum OrderType {
  DESC
  ASC
}

input PretaaGroupWhereInput {
  AND: [PretaaGroupWhereInput!]
  OR: [PretaaGroupWhereInput!]
  NOT: [PretaaGroupWhereInput!]
  id: IntFilter
  name: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  users: GroupUserListRelationFilter
  parentId: IntNullableFilter
  parent: GroupRelationFilter
  children: GroupListRelationFilter
  noteGroupTags: NoteGroupTagsListRelationFilter
}

input PretaaDataObjectCollectionsWhereInput {
  AND: [PretaaDataObjectCollectionsWhereInput!]
  OR: [PretaaDataObjectCollectionsWhereInput!]
  NOT: [PretaaDataObjectCollectionsWhereInput!]
  id: IntFilter
  name: StringFilter
  dataObjectCollectionOnDataObject: DataObjectCollectionOnDataObjectListRelationFilter
  default: BoolFilter
  isAllAccess: BoolFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeNullableFilter
}

type Mutation {
  createAccount(data: AccountCreateInput!): Account!
  createManyAccount(
    data: [AccountCreateManyInput!]!
    skipDuplicates: Boolean
  ): AffectedRowsOutput!
  deleteAccount(where: AccountWhereUniqueInput!): Account
  updateAccount(
    data: AccountUpdateInput!
    where: AccountWhereUniqueInput!
  ): Account
  deleteManyAccount(where: AccountWhereInput): AffectedRowsOutput!
  updateManyAccount(
    data: AccountUpdateManyMutationInput!
    where: AccountWhereInput
  ): AffectedRowsOutput!
  upsertAccount(
    where: AccountWhereUniqueInput!
    create: AccountCreateInput!
    update: AccountUpdateInput!
  ): Account!
  createCompany(data: CompanyCreateInput!): Company!
  createManyCompany(
    data: [CompanyCreateManyInput!]!
    skipDuplicates: Boolean
  ): AffectedRowsOutput!
  deleteCompany(where: CompanyWhereUniqueInput!): Company
  updateCompany(
    data: CompanyUpdateInput!
    where: CompanyWhereUniqueInput!
  ): Company
  deleteManyCompany(where: CompanyWhereInput): AffectedRowsOutput!
  updateManyCompany(
    data: CompanyUpdateManyMutationInput!
    where: CompanyWhereInput
  ): AffectedRowsOutput!
  upsertCompany(
    where: CompanyWhereUniqueInput!
    create: CompanyCreateInput!
    update: CompanyUpdateInput!
  ): Company!
  createCompanyStarred(data: CompanyStarredCreateInput!): CompanyStarred!
  createManyCompanyStarred(
    data: [CompanyStarredCreateManyInput!]!
    skipDuplicates: Boolean
  ): AffectedRowsOutput!
  deleteCompanyStarred(where: CompanyStarredWhereUniqueInput!): CompanyStarred
  updateCompanyStarred(
    data: CompanyStarredUpdateInput!
    where: CompanyStarredWhereUniqueInput!
  ): CompanyStarred
  deleteManyCompanyStarred(where: CompanyStarredWhereInput): AffectedRowsOutput!
  updateManyCompanyStarred(
    data: CompanyStarredUpdateManyMutationInput!
    where: CompanyStarredWhereInput
  ): AffectedRowsOutput!
  upsertCompanyStarred(
    where: CompanyStarredWhereUniqueInput!
    create: CompanyStarredCreateInput!
    update: CompanyStarredUpdateInput!
  ): CompanyStarred!
  createCompetitor(data: CompetitorCreateInput!): Competitor!
  createManyCompetitor(
    data: [CompetitorCreateManyInput!]!
    skipDuplicates: Boolean
  ): AffectedRowsOutput!
  deleteCompetitor(where: CompetitorWhereUniqueInput!): Competitor
  updateCompetitor(
    data: CompetitorUpdateInput!
    where: CompetitorWhereUniqueInput!
  ): Competitor
  deleteManyCompetitor(where: CompetitorWhereInput): AffectedRowsOutput!
  updateManyCompetitor(
    data: CompetitorUpdateManyMutationInput!
    where: CompetitorWhereInput
  ): AffectedRowsOutput!
  upsertCompetitor(
    where: CompetitorWhereUniqueInput!
    create: CompetitorCreateInput!
    update: CompetitorUpdateInput!
  ): Competitor!
  createContacts(data: ContactsCreateInput!): Contacts!
  createManyContacts(
    data: [ContactsCreateManyInput!]!
    skipDuplicates: Boolean
  ): AffectedRowsOutput!
  deleteContacts(where: ContactsWhereUniqueInput!): Contacts
  updateContacts(
    data: ContactsUpdateInput!
    where: ContactsWhereUniqueInput!
  ): Contacts
  deleteManyContacts(where: ContactsWhereInput): AffectedRowsOutput!
  updateManyContacts(
    data: ContactsUpdateManyMutationInput!
    where: ContactsWhereInput
  ): AffectedRowsOutput!
  upsertContacts(
    where: ContactsWhereUniqueInput!
    create: ContactsCreateInput!
    update: ContactsUpdateInput!
  ): Contacts!
  createCustomer(data: CustomerCreateInput!): Customer!
  createManyCustomer(
    data: [CustomerCreateManyInput!]!
    skipDuplicates: Boolean
  ): AffectedRowsOutput!
  deleteCustomer(where: CustomerWhereUniqueInput!): Customer
  updateCustomer(
    data: CustomerUpdateInput!
    where: CustomerWhereUniqueInput!
  ): Customer
  deleteManyCustomer(where: CustomerWhereInput): AffectedRowsOutput!
  updateManyCustomer(
    data: CustomerUpdateManyMutationInput!
    where: CustomerWhereInput
  ): AffectedRowsOutput!
  upsertCustomer(
    where: CustomerWhereUniqueInput!
    create: CustomerCreateInput!
    update: CustomerUpdateInput!
  ): Customer!
  createCustomerDataObjects(
    data: CustomerDataObjectsCreateInput!
  ): CustomerDataObjects!
  createManyCustomerDataObjects(
    data: [CustomerDataObjectsCreateManyInput!]!
    skipDuplicates: Boolean
  ): AffectedRowsOutput!
  deleteCustomerDataObjects(
    where: CustomerDataObjectsWhereUniqueInput!
  ): CustomerDataObjects
  updateCustomerDataObjects(
    data: CustomerDataObjectsUpdateInput!
    where: CustomerDataObjectsWhereUniqueInput!
  ): CustomerDataObjects
  deleteManyCustomerDataObjects(
    where: CustomerDataObjectsWhereInput
  ): AffectedRowsOutput!
  updateManyCustomerDataObjects(
    data: CustomerDataObjectsUpdateManyMutationInput!
    where: CustomerDataObjectsWhereInput
  ): AffectedRowsOutput!
  upsertCustomerDataObjects(
    where: CustomerDataObjectsWhereUniqueInput!
    create: CustomerDataObjectsCreateInput!
    update: CustomerDataObjectsUpdateInput!
  ): CustomerDataObjects!
  createCustomerIntegration(
    data: CustomerIntegrationCreateInput!
  ): CustomerIntegration!
  createManyCustomerIntegration(
    data: [CustomerIntegrationCreateManyInput!]!
    skipDuplicates: Boolean
  ): AffectedRowsOutput!
  deleteCustomerIntegration(
    where: CustomerIntegrationWhereUniqueInput!
  ): CustomerIntegration
  updateCustomerIntegration(
    data: CustomerIntegrationUpdateInput!
    where: CustomerIntegrationWhereUniqueInput!
  ): CustomerIntegration
  deleteManyCustomerIntegration(
    where: CustomerIntegrationWhereInput
  ): AffectedRowsOutput!
  updateManyCustomerIntegration(
    data: CustomerIntegrationUpdateManyMutationInput!
    where: CustomerIntegrationWhereInput
  ): AffectedRowsOutput!
  upsertCustomerIntegration(
    where: CustomerIntegrationWhereUniqueInput!
    create: CustomerIntegrationCreateInput!
    update: CustomerIntegrationUpdateInput!
  ): CustomerIntegration!
  createDataObjectCollectionOnDataObject(
    data: DataObjectCollectionOnDataObjectCreateInput!
  ): DataObjectCollectionOnDataObject!
  createManyDataObjectCollectionOnDataObject(
    data: [DataObjectCollectionOnDataObjectCreateManyInput!]!
    skipDuplicates: Boolean
  ): AffectedRowsOutput!
  deleteDataObjectCollectionOnDataObject(
    where: DataObjectCollectionOnDataObjectWhereUniqueInput!
  ): DataObjectCollectionOnDataObject
  updateDataObjectCollectionOnDataObject(
    data: DataObjectCollectionOnDataObjectUpdateInput!
    where: DataObjectCollectionOnDataObjectWhereUniqueInput!
  ): DataObjectCollectionOnDataObject
  deleteManyDataObjectCollectionOnDataObject(
    where: DataObjectCollectionOnDataObjectWhereInput
  ): AffectedRowsOutput!
  updateManyDataObjectCollectionOnDataObject(
    data: DataObjectCollectionOnDataObjectUpdateManyMutationInput!
    where: DataObjectCollectionOnDataObjectWhereInput
  ): AffectedRowsOutput!
  upsertDataObjectCollectionOnDataObject(
    where: DataObjectCollectionOnDataObjectWhereUniqueInput!
    create: DataObjectCollectionOnDataObjectCreateInput!
    update: DataObjectCollectionOnDataObjectUpdateInput!
  ): DataObjectCollectionOnDataObject!
  createDataObjectCollections(
    data: DataObjectCollectionsCreateInput!
  ): DataObjectCollections!
  createManyDataObjectCollections(
    data: [DataObjectCollectionsCreateManyInput!]!
    skipDuplicates: Boolean
  ): AffectedRowsOutput!
  deleteDataObjectCollections(
    where: DataObjectCollectionsWhereUniqueInput!
  ): DataObjectCollections
  updateDataObjectCollections(
    data: DataObjectCollectionsUpdateInput!
    where: DataObjectCollectionsWhereUniqueInput!
  ): DataObjectCollections
  deleteManyDataObjectCollections(
    where: DataObjectCollectionsWhereInput
  ): AffectedRowsOutput!
  updateManyDataObjectCollections(
    data: DataObjectCollectionsUpdateManyMutationInput!
    where: DataObjectCollectionsWhereInput
  ): AffectedRowsOutput!
  upsertDataObjectCollections(
    where: DataObjectCollectionsWhereUniqueInput!
    create: DataObjectCollectionsCreateInput!
    update: DataObjectCollectionsUpdateInput!
  ): DataObjectCollections!
  createDataSources(data: DataSourcesCreateInput!): DataSources!
  createManyDataSources(
    data: [DataSourcesCreateManyInput!]!
    skipDuplicates: Boolean
  ): AffectedRowsOutput!
  deleteDataSources(where: DataSourcesWhereUniqueInput!): DataSources
  updateDataSources(
    data: DataSourcesUpdateInput!
    where: DataSourcesWhereUniqueInput!
  ): DataSources
  deleteManyDataSources(where: DataSourcesWhereInput): AffectedRowsOutput!
  updateManyDataSources(
    data: DataSourcesUpdateManyMutationInput!
    where: DataSourcesWhereInput
  ): AffectedRowsOutput!
  upsertDataSources(
    where: DataSourcesWhereUniqueInput!
    create: DataSourcesCreateInput!
    update: DataSourcesUpdateInput!
  ): DataSources!
  createDataSourcesOnCustomer(
    data: DataSourcesOnCustomerCreateInput!
  ): DataSourcesOnCustomer!
  createManyDataSourcesOnCustomer(
    data: [DataSourcesOnCustomerCreateManyInput!]!
    skipDuplicates: Boolean
  ): AffectedRowsOutput!
  deleteDataSourcesOnCustomer(
    where: DataSourcesOnCustomerWhereUniqueInput!
  ): DataSourcesOnCustomer
  updateDataSourcesOnCustomer(
    data: DataSourcesOnCustomerUpdateInput!
    where: DataSourcesOnCustomerWhereUniqueInput!
  ): DataSourcesOnCustomer
  deleteManyDataSourcesOnCustomer(
    where: DataSourcesOnCustomerWhereInput
  ): AffectedRowsOutput!
  updateManyDataSourcesOnCustomer(
    data: DataSourcesOnCustomerUpdateManyMutationInput!
    where: DataSourcesOnCustomerWhereInput
  ): AffectedRowsOutput!
  upsertDataSourcesOnCustomer(
    where: DataSourcesOnCustomerWhereUniqueInput!
    create: DataSourcesOnCustomerCreateInput!
    update: DataSourcesOnCustomerUpdateInput!
  ): DataSourcesOnCustomer!
  createDynamicUserFields(
    data: DynamicUserFieldsCreateInput!
  ): DynamicUserFields!
  createManyDynamicUserFields(
    data: [DynamicUserFieldsCreateManyInput!]!
    skipDuplicates: Boolean
  ): AffectedRowsOutput!
  deleteDynamicUserFields(
    where: DynamicUserFieldsWhereUniqueInput!
  ): DynamicUserFields
  updateDynamicUserFields(
    data: DynamicUserFieldsUpdateInput!
    where: DynamicUserFieldsWhereUniqueInput!
  ): DynamicUserFields
  deleteManyDynamicUserFields(
    where: DynamicUserFieldsWhereInput
  ): AffectedRowsOutput!
  updateManyDynamicUserFields(
    data: DynamicUserFieldsUpdateManyMutationInput!
    where: DynamicUserFieldsWhereInput
  ): AffectedRowsOutput!
  upsertDynamicUserFields(
    where: DynamicUserFieldsWhereUniqueInput!
    create: DynamicUserFieldsCreateInput!
    update: DynamicUserFieldsUpdateInput!
  ): DynamicUserFields!
  createEvent(data: EventCreateInput!): Event!
  createManyEvent(
    data: [EventCreateManyInput!]!
    skipDuplicates: Boolean
  ): AffectedRowsOutput!
  deleteEvent(where: EventWhereUniqueInput!): Event
  updateEvent(data: EventUpdateInput!, where: EventWhereUniqueInput!): Event
  deleteManyEvent(where: EventWhereInput): AffectedRowsOutput!
  updateManyEvent(
    data: EventUpdateManyMutationInput!
    where: EventWhereInput
  ): AffectedRowsOutput!
  upsertEvent(
    where: EventWhereUniqueInput!
    create: EventCreateInput!
    update: EventUpdateInput!
  ): Event!
  createExternalGroup(data: ExternalGroupCreateInput!): ExternalGroup!
  createManyExternalGroup(
    data: [ExternalGroupCreateManyInput!]!
    skipDuplicates: Boolean
  ): AffectedRowsOutput!
  deleteExternalGroup(where: ExternalGroupWhereUniqueInput!): ExternalGroup
  updateExternalGroup(
    data: ExternalGroupUpdateInput!
    where: ExternalGroupWhereUniqueInput!
  ): ExternalGroup
  deleteManyExternalGroup(where: ExternalGroupWhereInput): AffectedRowsOutput!
  updateManyExternalGroup(
    data: ExternalGroupUpdateManyMutationInput!
    where: ExternalGroupWhereInput
  ): AffectedRowsOutput!
  upsertExternalGroup(
    where: ExternalGroupWhereUniqueInput!
    create: ExternalGroupCreateInput!
    update: ExternalGroupUpdateInput!
  ): ExternalGroup!
  createExternalGroupMember(
    data: ExternalGroupMemberCreateInput!
  ): ExternalGroupMember!
  createManyExternalGroupMember(
    data: [ExternalGroupMemberCreateManyInput!]!
    skipDuplicates: Boolean
  ): AffectedRowsOutput!
  deleteExternalGroupMember(
    where: ExternalGroupMemberWhereUniqueInput!
  ): ExternalGroupMember
  updateExternalGroupMember(
    data: ExternalGroupMemberUpdateInput!
    where: ExternalGroupMemberWhereUniqueInput!
  ): ExternalGroupMember
  deleteManyExternalGroupMember(
    where: ExternalGroupMemberWhereInput
  ): AffectedRowsOutput!
  updateManyExternalGroupMember(
    data: ExternalGroupMemberUpdateManyMutationInput!
    where: ExternalGroupMemberWhereInput
  ): AffectedRowsOutput!
  upsertExternalGroupMember(
    where: ExternalGroupMemberWhereUniqueInput!
    create: ExternalGroupMemberCreateInput!
    update: ExternalGroupMemberUpdateInput!
  ): ExternalGroupMember!
  createExternalUser(data: ExternalUserCreateInput!): ExternalUser!
  createManyExternalUser(
    data: [ExternalUserCreateManyInput!]!
    skipDuplicates: Boolean
  ): AffectedRowsOutput!
  deleteExternalUser(where: ExternalUserWhereUniqueInput!): ExternalUser
  updateExternalUser(
    data: ExternalUserUpdateInput!
    where: ExternalUserWhereUniqueInput!
  ): ExternalUser
  deleteManyExternalUser(where: ExternalUserWhereInput): AffectedRowsOutput!
  updateManyExternalUser(
    data: ExternalUserUpdateManyMutationInput!
    where: ExternalUserWhereInput
  ): AffectedRowsOutput!
  upsertExternalUser(
    where: ExternalUserWhereUniqueInput!
    create: ExternalUserCreateInput!
    update: ExternalUserUpdateInput!
  ): ExternalUser!
  createFeedback(data: FeedbackCreateInput!): Feedback!
  createManyFeedback(
    data: [FeedbackCreateManyInput!]!
    skipDuplicates: Boolean
  ): AffectedRowsOutput!
  deleteFeedback(where: FeedbackWhereUniqueInput!): Feedback
  updateFeedback(
    data: FeedbackUpdateInput!
    where: FeedbackWhereUniqueInput!
  ): Feedback
  deleteManyFeedback(where: FeedbackWhereInput): AffectedRowsOutput!
  updateManyFeedback(
    data: FeedbackUpdateManyMutationInput!
    where: FeedbackWhereInput
  ): AffectedRowsOutput!
  upsertFeedback(
    where: FeedbackWhereUniqueInput!
    create: FeedbackCreateInput!
    update: FeedbackUpdateInput!
  ): Feedback!
  createGroup(data: GroupCreateInput!): Group!
  createManyGroup(
    data: [GroupCreateManyInput!]!
    skipDuplicates: Boolean
  ): AffectedRowsOutput!
  deleteGroup(where: GroupWhereUniqueInput!): Group
  updateGroup(data: GroupUpdateInput!, where: GroupWhereUniqueInput!): Group
  deleteManyGroup(where: GroupWhereInput): AffectedRowsOutput!
  updateManyGroup(
    data: GroupUpdateManyMutationInput!
    where: GroupWhereInput
  ): AffectedRowsOutput!
  upsertGroup(
    where: GroupWhereUniqueInput!
    create: GroupCreateInput!
    update: GroupUpdateInput!
  ): Group!
  createGroupUser(data: GroupUserCreateInput!): GroupUser!
  createManyGroupUser(
    data: [GroupUserCreateManyInput!]!
    skipDuplicates: Boolean
  ): AffectedRowsOutput!
  deleteGroupUser(where: GroupUserWhereUniqueInput!): GroupUser
  updateGroupUser(
    data: GroupUserUpdateInput!
    where: GroupUserWhereUniqueInput!
  ): GroupUser
  deleteManyGroupUser(where: GroupUserWhereInput): AffectedRowsOutput!
  updateManyGroupUser(
    data: GroupUserUpdateManyMutationInput!
    where: GroupUserWhereInput
  ): AffectedRowsOutput!
  upsertGroupUser(
    where: GroupUserWhereUniqueInput!
    create: GroupUserCreateInput!
    update: GroupUserUpdateInput!
  ): GroupUser!
  createLaunch(data: LaunchCreateInput!): Launch!
  createManyLaunch(
    data: [LaunchCreateManyInput!]!
    skipDuplicates: Boolean
  ): AffectedRowsOutput!
  deleteLaunch(where: LaunchWhereUniqueInput!): Launch
  updateLaunch(data: LaunchUpdateInput!, where: LaunchWhereUniqueInput!): Launch
  deleteManyLaunch(where: LaunchWhereInput): AffectedRowsOutput!
  updateManyLaunch(
    data: LaunchUpdateManyMutationInput!
    where: LaunchWhereInput
  ): AffectedRowsOutput!
  upsertLaunch(
    where: LaunchWhereUniqueInput!
    create: LaunchCreateInput!
    update: LaunchUpdateInput!
  ): Launch!
  createLaunchContacts(data: LaunchContactsCreateInput!): LaunchContacts!
  createManyLaunchContacts(
    data: [LaunchContactsCreateManyInput!]!
    skipDuplicates: Boolean
  ): AffectedRowsOutput!
  deleteLaunchContacts(where: LaunchContactsWhereUniqueInput!): LaunchContacts
  updateLaunchContacts(
    data: LaunchContactsUpdateInput!
    where: LaunchContactsWhereUniqueInput!
  ): LaunchContacts
  deleteManyLaunchContacts(where: LaunchContactsWhereInput): AffectedRowsOutput!
  updateManyLaunchContacts(
    data: LaunchContactsUpdateManyMutationInput!
    where: LaunchContactsWhereInput
  ): AffectedRowsOutput!
  upsertLaunchContacts(
    where: LaunchContactsWhereUniqueInput!
    create: LaunchContactsCreateInput!
    update: LaunchContactsUpdateInput!
  ): LaunchContacts!
  createList(data: ListCreateInput!): List!
  createManyList(
    data: [ListCreateManyInput!]!
    skipDuplicates: Boolean
  ): AffectedRowsOutput!
  deleteList(where: ListWhereUniqueInput!): List
  updateList(data: ListUpdateInput!, where: ListWhereUniqueInput!): List
  deleteManyList(where: ListWhereInput): AffectedRowsOutput!
  updateManyList(
    data: ListUpdateManyMutationInput!
    where: ListWhereInput
  ): AffectedRowsOutput!
  upsertList(
    where: ListWhereUniqueInput!
    create: ListCreateInput!
    update: ListUpdateInput!
  ): List!
  createListCompany(data: ListCompanyCreateInput!): ListCompany!
  createManyListCompany(
    data: [ListCompanyCreateManyInput!]!
    skipDuplicates: Boolean
  ): AffectedRowsOutput!
  deleteListCompany(where: ListCompanyWhereUniqueInput!): ListCompany
  updateListCompany(
    data: ListCompanyUpdateInput!
    where: ListCompanyWhereUniqueInput!
  ): ListCompany
  deleteManyListCompany(where: ListCompanyWhereInput): AffectedRowsOutput!
  updateManyListCompany(
    data: ListCompanyUpdateManyMutationInput!
    where: ListCompanyWhereInput
  ): AffectedRowsOutput!
  upsertListCompany(
    where: ListCompanyWhereUniqueInput!
    create: ListCompanyCreateInput!
    update: ListCompanyUpdateInput!
  ): ListCompany!
  createMessageTemplate(data: MessageTemplateCreateInput!): MessageTemplate!
  createManyMessageTemplate(
    data: [MessageTemplateCreateManyInput!]!
    skipDuplicates: Boolean
  ): AffectedRowsOutput!
  deleteMessageTemplate(
    where: MessageTemplateWhereUniqueInput!
  ): MessageTemplate
  updateMessageTemplate(
    data: MessageTemplateUpdateInput!
    where: MessageTemplateWhereUniqueInput!
  ): MessageTemplate
  deleteManyMessageTemplate(
    where: MessageTemplateWhereInput
  ): AffectedRowsOutput!
  updateManyMessageTemplate(
    data: MessageTemplateUpdateManyMutationInput!
    where: MessageTemplateWhereInput
  ): AffectedRowsOutput!
  upsertMessageTemplate(
    where: MessageTemplateWhereUniqueInput!
    create: MessageTemplateCreateInput!
    update: MessageTemplateUpdateInput!
  ): MessageTemplate!
  createNote(data: NoteCreateInput!): Note!
  createManyNote(
    data: [NoteCreateManyInput!]!
    skipDuplicates: Boolean
  ): AffectedRowsOutput!
  deleteNote(where: NoteWhereUniqueInput!): Note
  updateNote(data: NoteUpdateInput!, where: NoteWhereUniqueInput!): Note
  deleteManyNote(where: NoteWhereInput): AffectedRowsOutput!
  updateManyNote(
    data: NoteUpdateManyMutationInput!
    where: NoteWhereInput
  ): AffectedRowsOutput!
  upsertNote(
    where: NoteWhereUniqueInput!
    create: NoteCreateInput!
    update: NoteUpdateInput!
  ): Note!
  createNoteGroupTags(data: NoteGroupTagsCreateInput!): NoteGroupTags!
  createManyNoteGroupTags(
    data: [NoteGroupTagsCreateManyInput!]!
    skipDuplicates: Boolean
  ): AffectedRowsOutput!
  deleteNoteGroupTags(where: NoteGroupTagsWhereUniqueInput!): NoteGroupTags
  updateNoteGroupTags(
    data: NoteGroupTagsUpdateInput!
    where: NoteGroupTagsWhereUniqueInput!
  ): NoteGroupTags
  deleteManyNoteGroupTags(where: NoteGroupTagsWhereInput): AffectedRowsOutput!
  updateManyNoteGroupTags(
    data: NoteGroupTagsUpdateManyMutationInput!
    where: NoteGroupTagsWhereInput
  ): AffectedRowsOutput!
  upsertNoteGroupTags(
    where: NoteGroupTagsWhereUniqueInput!
    create: NoteGroupTagsCreateInput!
    update: NoteGroupTagsUpdateInput!
  ): NoteGroupTags!
  createNoteUserTags(data: NoteUserTagsCreateInput!): NoteUserTags!
  createManyNoteUserTags(
    data: [NoteUserTagsCreateManyInput!]!
    skipDuplicates: Boolean
  ): AffectedRowsOutput!
  deleteNoteUserTags(where: NoteUserTagsWhereUniqueInput!): NoteUserTags
  updateNoteUserTags(
    data: NoteUserTagsUpdateInput!
    where: NoteUserTagsWhereUniqueInput!
  ): NoteUserTags
  deleteManyNoteUserTags(where: NoteUserTagsWhereInput): AffectedRowsOutput!
  updateManyNoteUserTags(
    data: NoteUserTagsUpdateManyMutationInput!
    where: NoteUserTagsWhereInput
  ): AffectedRowsOutput!
  upsertNoteUserTags(
    where: NoteUserTagsWhereUniqueInput!
    create: NoteUserTagsCreateInput!
    update: NoteUserTagsUpdateInput!
  ): NoteUserTags!
  createOfferOption(data: OfferOptionCreateInput!): OfferOption!
  createManyOfferOption(
    data: [OfferOptionCreateManyInput!]!
    skipDuplicates: Boolean
  ): AffectedRowsOutput!
  deleteOfferOption(where: OfferOptionWhereUniqueInput!): OfferOption
  updateOfferOption(
    data: OfferOptionUpdateInput!
    where: OfferOptionWhereUniqueInput!
  ): OfferOption
  deleteManyOfferOption(where: OfferOptionWhereInput): AffectedRowsOutput!
  updateManyOfferOption(
    data: OfferOptionUpdateManyMutationInput!
    where: OfferOptionWhereInput
  ): AffectedRowsOutput!
  upsertOfferOption(
    where: OfferOptionWhereUniqueInput!
    create: OfferOptionCreateInput!
    update: OfferOptionUpdateInput!
  ): OfferOption!
  createProduct(data: ProductCreateInput!): Product!
  createManyProduct(
    data: [ProductCreateManyInput!]!
    skipDuplicates: Boolean
  ): AffectedRowsOutput!
  deleteProduct(where: ProductWhereUniqueInput!): Product
  updateProduct(
    data: ProductUpdateInput!
    where: ProductWhereUniqueInput!
  ): Product
  deleteManyProduct(where: ProductWhereInput): AffectedRowsOutput!
  updateManyProduct(
    data: ProductUpdateManyMutationInput!
    where: ProductWhereInput
  ): AffectedRowsOutput!
  upsertProduct(
    where: ProductWhereUniqueInput!
    create: ProductCreateInput!
    update: ProductUpdateInput!
  ): Product!
  createRating(data: RatingCreateInput!): Rating!
  createManyRating(
    data: [RatingCreateManyInput!]!
    skipDuplicates: Boolean
  ): AffectedRowsOutput!
  deleteRating(where: RatingWhereUniqueInput!): Rating
  updateRating(data: RatingUpdateInput!, where: RatingWhereUniqueInput!): Rating
  deleteManyRating(where: RatingWhereInput): AffectedRowsOutput!
  updateManyRating(
    data: RatingUpdateManyMutationInput!
    where: RatingWhereInput
  ): AffectedRowsOutput!
  upsertRating(
    where: RatingWhereUniqueInput!
    create: RatingCreateInput!
    update: RatingUpdateInput!
  ): Rating!
  createReference(data: ReferenceCreateInput!): Reference!
  createManyReference(
    data: [ReferenceCreateManyInput!]!
    skipDuplicates: Boolean
  ): AffectedRowsOutput!
  deleteReference(where: ReferenceWhereUniqueInput!): Reference
  updateReference(
    data: ReferenceUpdateInput!
    where: ReferenceWhereUniqueInput!
  ): Reference
  deleteManyReference(where: ReferenceWhereInput): AffectedRowsOutput!
  updateManyReference(
    data: ReferenceUpdateManyMutationInput!
    where: ReferenceWhereInput
  ): AffectedRowsOutput!
  upsertReference(
    where: ReferenceWhereUniqueInput!
    create: ReferenceCreateInput!
    update: ReferenceUpdateInput!
  ): Reference!
  createReferenceOnOfferOptions(
    data: ReferenceOnOfferOptionsCreateInput!
  ): ReferenceOnOfferOptions!
  createManyReferenceOnOfferOptions(
    data: [ReferenceOnOfferOptionsCreateManyInput!]!
    skipDuplicates: Boolean
  ): AffectedRowsOutput!
  deleteReferenceOnOfferOptions(
    where: ReferenceOnOfferOptionsWhereUniqueInput!
  ): ReferenceOnOfferOptions
  updateReferenceOnOfferOptions(
    data: ReferenceOnOfferOptionsUpdateInput!
    where: ReferenceOnOfferOptionsWhereUniqueInput!
  ): ReferenceOnOfferOptions
  deleteManyReferenceOnOfferOptions(
    where: ReferenceOnOfferOptionsWhereInput
  ): AffectedRowsOutput!
  updateManyReferenceOnOfferOptions(
    data: ReferenceOnOfferOptionsUpdateManyMutationInput!
    where: ReferenceOnOfferOptionsWhereInput
  ): AffectedRowsOutput!
  upsertReferenceOnOfferOptions(
    where: ReferenceOnOfferOptionsWhereUniqueInput!
    create: ReferenceOnOfferOptionsCreateInput!
    update: ReferenceOnOfferOptionsUpdateInput!
  ): ReferenceOnOfferOptions!
  createRole(data: RoleCreateInput!): Role!
  createManyRole(
    data: [RoleCreateManyInput!]!
    skipDuplicates: Boolean
  ): AffectedRowsOutput!
  deleteRole(where: RoleWhereUniqueInput!): Role
  updateRole(data: RoleUpdateInput!, where: RoleWhereUniqueInput!): Role
  deleteManyRole(where: RoleWhereInput): AffectedRowsOutput!
  updateManyRole(
    data: RoleUpdateManyMutationInput!
    where: RoleWhereInput
  ): AffectedRowsOutput!
  upsertRole(
    where: RoleWhereUniqueInput!
    create: RoleCreateInput!
    update: RoleUpdateInput!
  ): Role!
  createSalesLead(data: SalesLeadCreateInput!): SalesLead!
  createManySalesLead(
    data: [SalesLeadCreateManyInput!]!
    skipDuplicates: Boolean
  ): AffectedRowsOutput!
  deleteSalesLead(where: SalesLeadWhereUniqueInput!): SalesLead
  updateSalesLead(
    data: SalesLeadUpdateInput!
    where: SalesLeadWhereUniqueInput!
  ): SalesLead
  deleteManySalesLead(where: SalesLeadWhereInput): AffectedRowsOutput!
  updateManySalesLead(
    data: SalesLeadUpdateManyMutationInput!
    where: SalesLeadWhereInput
  ): AffectedRowsOutput!
  upsertSalesLead(
    where: SalesLeadWhereUniqueInput!
    create: SalesLeadCreateInput!
    update: SalesLeadUpdateInput!
  ): SalesLead!
  createSyncEvent(data: SyncEventCreateInput!): SyncEvent!
  createManySyncEvent(
    data: [SyncEventCreateManyInput!]!
    skipDuplicates: Boolean
  ): AffectedRowsOutput!
  deleteSyncEvent(where: SyncEventWhereUniqueInput!): SyncEvent
  updateSyncEvent(
    data: SyncEventUpdateInput!
    where: SyncEventWhereUniqueInput!
  ): SyncEvent
  deleteManySyncEvent(where: SyncEventWhereInput): AffectedRowsOutput!
  updateManySyncEvent(
    data: SyncEventUpdateManyMutationInput!
    where: SyncEventWhereInput
  ): AffectedRowsOutput!
  upsertSyncEvent(
    where: SyncEventWhereUniqueInput!
    create: SyncEventCreateInput!
    update: SyncEventUpdateInput!
  ): SyncEvent!
  createTemplateShortCodes(
    data: TemplateShortCodesCreateInput!
  ): TemplateShortCodes!
  createManyTemplateShortCodes(
    data: [TemplateShortCodesCreateManyInput!]!
    skipDuplicates: Boolean
  ): AffectedRowsOutput!
  deleteTemplateShortCodes(
    where: TemplateShortCodesWhereUniqueInput!
  ): TemplateShortCodes
  updateTemplateShortCodes(
    data: TemplateShortCodesUpdateInput!
    where: TemplateShortCodesWhereUniqueInput!
  ): TemplateShortCodes
  deleteManyTemplateShortCodes(
    where: TemplateShortCodesWhereInput
  ): AffectedRowsOutput!
  updateManyTemplateShortCodes(
    data: TemplateShortCodesUpdateManyMutationInput!
    where: TemplateShortCodesWhereInput
  ): AffectedRowsOutput!
  upsertTemplateShortCodes(
    where: TemplateShortCodesWhereUniqueInput!
    create: TemplateShortCodesCreateInput!
    update: TemplateShortCodesUpdateInput!
  ): TemplateShortCodes!
  createUseCaseCollections(
    data: UseCaseCollectionsCreateInput!
  ): UseCaseCollections!
  createManyUseCaseCollections(
    data: [UseCaseCollectionsCreateManyInput!]!
    skipDuplicates: Boolean
  ): AffectedRowsOutput!
  deleteUseCaseCollections(
    where: UseCaseCollectionsWhereUniqueInput!
  ): UseCaseCollections
  updateUseCaseCollections(
    data: UseCaseCollectionsUpdateInput!
    where: UseCaseCollectionsWhereUniqueInput!
  ): UseCaseCollections
  deleteManyUseCaseCollections(
    where: UseCaseCollectionsWhereInput
  ): AffectedRowsOutput!
  updateManyUseCaseCollections(
    data: UseCaseCollectionsUpdateManyMutationInput!
    where: UseCaseCollectionsWhereInput
  ): AffectedRowsOutput!
  upsertUseCaseCollections(
    where: UseCaseCollectionsWhereUniqueInput!
    create: UseCaseCollectionsCreateInput!
    update: UseCaseCollectionsUpdateInput!
  ): UseCaseCollections!
  createUseCases(data: UseCasesCreateInput!): UseCases!
  createManyUseCases(
    data: [UseCasesCreateManyInput!]!
    skipDuplicates: Boolean
  ): AffectedRowsOutput!
  deleteUseCases(where: UseCasesWhereUniqueInput!): UseCases
  updateUseCases(
    data: UseCasesUpdateInput!
    where: UseCasesWhereUniqueInput!
  ): UseCases
  deleteManyUseCases(where: UseCasesWhereInput): AffectedRowsOutput!
  updateManyUseCases(
    data: UseCasesUpdateManyMutationInput!
    where: UseCasesWhereInput
  ): AffectedRowsOutput!
  upsertUseCases(
    where: UseCasesWhereUniqueInput!
    create: UseCasesCreateInput!
    update: UseCasesUpdateInput!
  ): UseCases!
  createUseCasesOnCollections(
    data: UseCasesOnCollectionsCreateInput!
  ): UseCasesOnCollections!
  createManyUseCasesOnCollections(
    data: [UseCasesOnCollectionsCreateManyInput!]!
    skipDuplicates: Boolean
  ): AffectedRowsOutput!
  deleteUseCasesOnCollections(
    where: UseCasesOnCollectionsWhereUniqueInput!
  ): UseCasesOnCollections
  updateUseCasesOnCollections(
    data: UseCasesOnCollectionsUpdateInput!
    where: UseCasesOnCollectionsWhereUniqueInput!
  ): UseCasesOnCollections
  deleteManyUseCasesOnCollections(
    where: UseCasesOnCollectionsWhereInput
  ): AffectedRowsOutput!
  updateManyUseCasesOnCollections(
    data: UseCasesOnCollectionsUpdateManyMutationInput!
    where: UseCasesOnCollectionsWhereInput
  ): AffectedRowsOutput!
  upsertUseCasesOnCollections(
    where: UseCasesOnCollectionsWhereUniqueInput!
    create: UseCasesOnCollectionsCreateInput!
    update: UseCasesOnCollectionsUpdateInput!
  ): UseCasesOnCollections!
  createUser(data: UserCreateInput!): User!
  createManyUser(
    data: [UserCreateManyInput!]!
    skipDuplicates: Boolean
  ): AffectedRowsOutput!
  deleteUser(where: UserWhereUniqueInput!): User
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  deleteManyUser(where: UserWhereInput): AffectedRowsOutput!
  updateManyUser(
    data: UserUpdateManyMutationInput!
    where: UserWhereInput
  ): AffectedRowsOutput!
  upsertUser(
    where: UserWhereUniqueInput!
    create: UserCreateInput!
    update: UserUpdateInput!
  ): User!
  createUserCompanyRatings(
    data: UserCompanyRatingsCreateInput!
  ): UserCompanyRatings!
  createManyUserCompanyRatings(
    data: [UserCompanyRatingsCreateManyInput!]!
    skipDuplicates: Boolean
  ): AffectedRowsOutput!
  deleteUserCompanyRatings(
    where: UserCompanyRatingsWhereUniqueInput!
  ): UserCompanyRatings
  updateUserCompanyRatings(
    data: UserCompanyRatingsUpdateInput!
    where: UserCompanyRatingsWhereUniqueInput!
  ): UserCompanyRatings
  deleteManyUserCompanyRatings(
    where: UserCompanyRatingsWhereInput
  ): AffectedRowsOutput!
  updateManyUserCompanyRatings(
    data: UserCompanyRatingsUpdateManyMutationInput!
    where: UserCompanyRatingsWhereInput
  ): AffectedRowsOutput!
  upsertUserCompanyRatings(
    where: UserCompanyRatingsWhereUniqueInput!
    create: UserCompanyRatingsCreateInput!
    update: UserCompanyRatingsUpdateInput!
  ): UserCompanyRatings!
  createUserEvents(data: UserEventsCreateInput!): UserEvents!
  createManyUserEvents(
    data: [UserEventsCreateManyInput!]!
    skipDuplicates: Boolean
  ): AffectedRowsOutput!
  deleteUserEvents(where: UserEventsWhereUniqueInput!): UserEvents
  updateUserEvents(
    data: UserEventsUpdateInput!
    where: UserEventsWhereUniqueInput!
  ): UserEvents
  deleteManyUserEvents(where: UserEventsWhereInput): AffectedRowsOutput!
  updateManyUserEvents(
    data: UserEventsUpdateManyMutationInput!
    where: UserEventsWhereInput
  ): AffectedRowsOutput!
  upsertUserEvents(
    where: UserEventsWhereUniqueInput!
    create: UserEventsCreateInput!
    update: UserEventsUpdateInput!
  ): UserEvents!
  createUserManager(data: UserManagerCreateInput!): UserManager!
  createManyUserManager(
    data: [UserManagerCreateManyInput!]!
    skipDuplicates: Boolean
  ): AffectedRowsOutput!
  deleteUserManager(where: UserManagerWhereUniqueInput!): UserManager
  updateUserManager(
    data: UserManagerUpdateInput!
    where: UserManagerWhereUniqueInput!
  ): UserManager
  deleteManyUserManager(where: UserManagerWhereInput): AffectedRowsOutput!
  updateManyUserManager(
    data: UserManagerUpdateManyMutationInput!
    where: UserManagerWhereInput
  ): AffectedRowsOutput!
  upsertUserManager(
    where: UserManagerWhereUniqueInput!
    create: UserManagerCreateInput!
    update: UserManagerUpdateInput!
  ): UserManager!
  createUserRole(data: UserRoleCreateInput!): UserRole!
  createManyUserRole(
    data: [UserRoleCreateManyInput!]!
    skipDuplicates: Boolean
  ): AffectedRowsOutput!
  deleteUserRole(where: UserRoleWhereUniqueInput!): UserRole
  updateUserRole(
    data: UserRoleUpdateInput!
    where: UserRoleWhereUniqueInput!
  ): UserRole
  deleteManyUserRole(where: UserRoleWhereInput): AffectedRowsOutput!
  updateManyUserRole(
    data: UserRoleUpdateManyMutationInput!
    where: UserRoleWhereInput
  ): AffectedRowsOutput!
  upsertUserRole(
    where: UserRoleWhereUniqueInput!
    create: UserRoleCreateInput!
    update: UserRoleUpdateInput!
  ): UserRole!
  pretaaChangeUserStatus(userId: Float!): User!
  pretaaDeleteManyUser(userIds: [Float!]!): String!
  pretaaForgotPasswordLink(email: String!): String!
  pretaaForgotPassword(forgotPwToken: String!, newPassword: String!): String!
  pretaaResetPassword(newPassword: String!): String!
  pretaaUpdateDynamicUserFields(
    columns: [Float!]!
    order: [Float!]
    display: [Boolean!]
    type: String!
  ): [DynamicUserFields!]!
  noteFlagToggle(id: Float!): Note!
  noteDelete(id: Float!): Note!
  noteCreate(
    text: String!
    subject: String!
    eventId: Float
    companyId: Float
    taggedUsers: NoteUserTagsCreateNestedManyWithoutNoteInput
    taggedGroups: NoteGroupTagsCreateNestedManyWithoutNoteInput
    delta: JSON!
    allCanView: Boolean = false
  ): Note!
  noteUpdate(
    text: String!
    subject: String!
    eventId: Float
    companyId: Float
    taggedUsers: NoteUserTagsUpdateManyWithoutNoteInput
    taggedGroups: NoteGroupTagsUpdateManyWithoutNoteInput
    delta: JSON!
    allCanView: Boolean = false
    id: Float!
  ): Note!
  companyToggleStar(companyId: Float!): String!
  updateReadAtEvent(id: Float!): Event!
  flagUserEvent(id: Float!): Event!
  hideUserEvent(id: Float!): Event!
  getEventDetails(id: Float!): Event!
  pretaaCreateCompanyReference(
    offeredTo: Boolean
    servedAsReferenceBefore: Boolean!
    companyId: Int!
    servedAsReferenceForId: Int!
    servedAsReferenceAt: DateTime
    notes: String
    offerOptions: [Float!]!
    dealClosed: Boolean
  ): Reference!
  pretaaUpdateCompanyReference(
    offeredTo: Boolean
    servedAsReferenceBefore: Boolean!
    companyId: Int!
    servedAsReferenceForId: Int!
    servedAsReferenceAt: DateTime
    notes: String
    offerOptions: [Float!]!
    dealClosed: Boolean
    id: Float!
  ): Reference!
  pretaaResetReferredCompany(id: Float!): Reference
  pretaaCreateEmailTemplate(
    eventType: String!
    companyType: String!
    messageType: String = "EMAIL"
    text: String!
    subject: String!
    title: String
    sendToAddress: String
    delta: JSON!
  ): MessageTemplate!
  pretaaUpdateEmailTemplate(
    eventType: String!
    companyType: String!
    messageType: String = "EMAIL"
    text: String!
    subject: String!
    title: String
    sendToAddress: String
    delta: JSON!
    id: Float!
  ): EmailCreateArgs!
  pretaaCloneEmailTemplate(id: Float!): MessageTemplate!
  pretaaDeleteEmailTemplate(id: Float!): MessageTemplate!
  pretaaAddCompanyRatings(
    ratingId: Float!
    companyId: Float!
  ): UserCompanyRatings!
  pretaaCreateFeedback(
    feedback: String = ""
    feedbackValue: Float = 0
    feedbackId: Float
  ): Feedback!
  pretaaCreateLaunchAction(
    eventId: Float!
    messageTemplateId: Float!
    text: String!
    companyId: Float!
    subject: String!
    launchContacts: LaunchContactsCreateNestedManyWithoutLaunchInput!
    delta: JSON!
  ): Launch!
  pretaaCreateList(
    name: String!
    parentId: Float
    listCompanies: ListCompanyCreateNestedManyWithoutListInput!
  ): List!
  pretaaDeleteList(id: Float!): String!
  pretaaUpdateList(
    parentId: Float
    name: String
    listCompanies: ListCompanyUpdateManyWithoutListInput
    id: Float!
  ): List!
  pretaaCreateGroup(
    name: String!
    users: GroupUserCreateNestedManyWithoutGroupInput
    parentId: Float
  ): Group!
  pretaaUpdateGroup(
    id: Float!
    name: StringFieldUpdateOperationsInput
    users: GroupUserUpdateManyWithoutGroupInput
    parentId: Float
  ): Group!
  pretaaDeleteGroup(id: Float!): Group!
  pretaaCreateUseCaseCollection(
    name: String!
    default: Boolean
    useCasesOnCollections: UseCasesOnCollectionsCreateNestedManyWithoutCollectionInput
  ): UseCaseCollections
  pretaaUpdateUseCaseCollection(
    name: String
    default: Boolean
    useCasesOnCollections: UseCasesOnCollectionsUpdateManyWithoutCollectionInput
    id: Int!
  ): UseCaseCollections!
  pretaaCreateDataObjectCollection(
    name: String!
    dataObjectCollectionOnDataObject: DataObjectCollectionOnDataObjectCreateNestedManyWithoutDataObjectCollectionsInput
  ): DataObjectCollections
  pretaaUpdateDataObjectsCollection(
    name: String!
    dataObjectCollectionOnDataObject: DataObjectCollectionOnDataObjectUpdateManyWithoutDataObjectCollectionsInput
    id: Int
  ): DataObjectCollections
  pretaaUpdateOktaClientDetails(
    apikey: String!
    clientSecret: String!
    domain: String!
    clientId: String!
  ): Customer!
}

input AccountCreateInput {
  accountName: String!
  AccountUUID: String
  company: CompanyCreateNestedManyWithoutAccountInput
}

input CompanyCreateNestedManyWithoutAccountInput {
  create: [CompanyCreateWithoutAccountInput!]
  connectOrCreate: [CompanyCreateOrConnectWithoutAccountInput!]
  createMany: CompanyCreateManyAccountInputEnvelope
  connect: [CompanyWhereUniqueInput!]
}

input CompanyCreateWithoutAccountInput {
  annualRecurringRevenue: Int
  expectedToCloseAt: DateTime
  fiscalYearStartMonth: Int
  name: String!
  companyType: CompanyType!
  seatSize: Int
  createdAt: DateTime
  updatedAt: DateTime
  fiscalYear: Int
  renewalDate: DateTime
  referredOn: DateTime
  latestReferenceId: Int
  customer: CustomerCreateNestedOneWithoutCompaniesInput!
  leadSource: UserCreateNestedOneWithoutLeadSourceForInput
  companyParent: CompanyCreateNestedOneWithoutSubsidiaryInput
  primaryContact: UserCreateNestedOneWithoutPrimaryContactForInput
  references: ReferenceCreateNestedManyWithoutCompanyInput
  referencesServedFor: ReferenceCreateNestedManyWithoutServedAsReferenceForInput
  subsidiary: CompanyCreateNestedManyWithoutCompanyParentInput
  starredBy: CompanyStarredCreateNestedManyWithoutCompanyInput
  events: EventCreateNestedManyWithoutCompanyInput
  notes: NoteCreateNestedManyWithoutCompanyInput
  competitors: CompetitorCreateNestedManyWithoutCompanyInput
  products: ProductCreateNestedManyWithoutCompanyInput
  contacts: ContactsCreateNestedManyWithoutCompanyInput
  UserCompanyRatings: UserCompanyRatingsCreateNestedManyWithoutCompanyInput
  listCompanies: ListCompanyCreateNestedManyWithoutCompanyInput
  Launch: LaunchCreateNestedManyWithoutCompanyInput
}

input CustomerCreateNestedOneWithoutCompaniesInput {
  create: CustomerCreateWithoutCompaniesInput
  connectOrCreate: CustomerCreateOrConnectWithoutCompaniesInput
  connect: CustomerWhereUniqueInput
}

input CustomerCreateWithoutCompaniesInput {
  name: String!
  type: CustomerType!
  favoritedAt: DateTime
  createdAt: DateTime
  updatedAt: DateTime
  oktaClientId: String
  oktaDomain: String
  oktaClientSecret: String
  oktaApiKey: String
  launch: LaunchCreateNestedManyWithoutCustomerInput
  integrations: CustomerIntegrationCreateNestedManyWithoutCustomerInput
  events: EventCreateNestedManyWithoutCustomerInput
  externalGroups: ExternalGroupCreateNestedManyWithoutCustomerInput
  externalUsers: ExternalUserCreateNestedManyWithoutCustomerInput
  groups: GroupCreateNestedManyWithoutCustomerInput
  notes: NoteCreateNestedManyWithoutCustomerInput
  roles: RoleCreateNestedManyWithoutCustomerInput
  salesLeads: SalesLeadCreateNestedManyWithoutCustomerInput
  syncEvents: SyncEventCreateNestedManyWithoutCustomerInput
  users: UserCreateNestedManyWithoutCustomerInput
  messageTemplate: MessageTemplateCreateNestedManyWithoutCustomerInput
  dynamicFields: DynamicUserFieldsCreateNestedManyWithoutCustomerInput
  lists: ListCreateNestedManyWithoutCustomerInput
  useCaseCollections: UseCaseCollectionsCreateNestedManyWithoutCustomerInput
  customerDataSources: DataSourcesOnCustomerCreateNestedManyWithoutCustomerInput
  dataObjectCollections: DataObjectCollectionsCreateNestedManyWithoutCustomerInput
}

input LaunchCreateNestedManyWithoutCustomerInput {
  create: [LaunchCreateWithoutCustomerInput!]
  connectOrCreate: [LaunchCreateOrConnectWithoutCustomerInput!]
  createMany: LaunchCreateManyCustomerInputEnvelope
  connect: [LaunchWhereUniqueInput!]
}

input LaunchCreateWithoutCustomerInput {
  createdAt: DateTime
  sendToAddress: String
  subject: String!
  text: String!
  delta: JSON
  company: CompanyCreateNestedOneWithoutLaunchInput!
  events: EventCreateNestedOneWithoutLaunchInput
  messageTempate: MessageTemplateCreateNestedOneWithoutLaunchInput
  launchContacts: LaunchContactsCreateNestedManyWithoutLaunchInput
}

input CompanyCreateNestedOneWithoutLaunchInput {
  create: CompanyCreateWithoutLaunchInput
  connectOrCreate: CompanyCreateOrConnectWithoutLaunchInput
  connect: CompanyWhereUniqueInput
}

input CompanyCreateWithoutLaunchInput {
  annualRecurringRevenue: Int
  expectedToCloseAt: DateTime
  fiscalYearStartMonth: Int
  name: String!
  companyType: CompanyType!
  seatSize: Int
  createdAt: DateTime
  updatedAt: DateTime
  fiscalYear: Int
  renewalDate: DateTime
  referredOn: DateTime
  latestReferenceId: Int
  customer: CustomerCreateNestedOneWithoutCompaniesInput!
  leadSource: UserCreateNestedOneWithoutLeadSourceForInput
  companyParent: CompanyCreateNestedOneWithoutSubsidiaryInput
  primaryContact: UserCreateNestedOneWithoutPrimaryContactForInput
  references: ReferenceCreateNestedManyWithoutCompanyInput
  referencesServedFor: ReferenceCreateNestedManyWithoutServedAsReferenceForInput
  subsidiary: CompanyCreateNestedManyWithoutCompanyParentInput
  starredBy: CompanyStarredCreateNestedManyWithoutCompanyInput
  events: EventCreateNestedManyWithoutCompanyInput
  notes: NoteCreateNestedManyWithoutCompanyInput
  account: AccountCreateNestedOneWithoutCompanyInput!
  competitors: CompetitorCreateNestedManyWithoutCompanyInput
  products: ProductCreateNestedManyWithoutCompanyInput
  contacts: ContactsCreateNestedManyWithoutCompanyInput
  UserCompanyRatings: UserCompanyRatingsCreateNestedManyWithoutCompanyInput
  listCompanies: ListCompanyCreateNestedManyWithoutCompanyInput
}

input UserCreateNestedOneWithoutLeadSourceForInput {
  create: UserCreateWithoutLeadSourceForInput
  connectOrCreate: UserCreateOrConnectWithoutLeadSourceForInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutLeadSourceForInput {
  admin: Boolean
  email: String!
  name: String!
  passwordHash: String
  passwordSalt: String
  workPhone: String
  mobilePhone: String
  title: String
  token: String
  notificationSettings: JSON
  createdAt: DateTime
  updatedAt: DateTime
  dynamicFields: JSON
  active: Boolean
  oktaUserId: Int
  oktaManagerId: Int
  forgetPassword: String
  csmStatus: Boolean
  crmStatus: Boolean
  customer: CustomerCreateNestedOneWithoutUsersInput!
  primaryContactFor: CompanyCreateNestedManyWithoutPrimaryContactInput
  starred: CompanyStarredCreateNestedManyWithoutUserInput
  externalUser: ExternalUserCreateNestedManyWithoutUserInput
  groups: GroupUserCreateNestedManyWithoutUserInput
  Note: NoteCreateNestedManyWithoutUserInput
  roles: UserRoleCreateNestedManyWithoutUserInput
  userEvents: UserEventsCreateNestedManyWithoutUserInput
  UserCompanyRatings: UserCompanyRatingsCreateNestedManyWithoutUserInput
  noteUserTags: NoteUserTagsCreateNestedManyWithoutUserInput
  messageTemplate: MessageTemplateCreateNestedManyWithoutUserInput
  Feedback: FeedbackCreateNestedManyWithoutUserInput
  references: ReferenceCreateNestedManyWithoutUserInput
  userManager: UserManagerCreateNestedManyWithoutUserInput
  userReportee: UserManagerCreateNestedManyWithoutManagerInput
}

input CustomerCreateNestedOneWithoutUsersInput {
  create: CustomerCreateWithoutUsersInput
  connectOrCreate: CustomerCreateOrConnectWithoutUsersInput
  connect: CustomerWhereUniqueInput
}

input CustomerCreateWithoutUsersInput {
  name: String!
  type: CustomerType!
  favoritedAt: DateTime
  createdAt: DateTime
  updatedAt: DateTime
  oktaClientId: String
  oktaDomain: String
  oktaClientSecret: String
  oktaApiKey: String
  launch: LaunchCreateNestedManyWithoutCustomerInput
  companies: CompanyCreateNestedManyWithoutCustomerInput
  integrations: CustomerIntegrationCreateNestedManyWithoutCustomerInput
  events: EventCreateNestedManyWithoutCustomerInput
  externalGroups: ExternalGroupCreateNestedManyWithoutCustomerInput
  externalUsers: ExternalUserCreateNestedManyWithoutCustomerInput
  groups: GroupCreateNestedManyWithoutCustomerInput
  notes: NoteCreateNestedManyWithoutCustomerInput
  roles: RoleCreateNestedManyWithoutCustomerInput
  salesLeads: SalesLeadCreateNestedManyWithoutCustomerInput
  syncEvents: SyncEventCreateNestedManyWithoutCustomerInput
  messageTemplate: MessageTemplateCreateNestedManyWithoutCustomerInput
  dynamicFields: DynamicUserFieldsCreateNestedManyWithoutCustomerInput
  lists: ListCreateNestedManyWithoutCustomerInput
  useCaseCollections: UseCaseCollectionsCreateNestedManyWithoutCustomerInput
  customerDataSources: DataSourcesOnCustomerCreateNestedManyWithoutCustomerInput
  dataObjectCollections: DataObjectCollectionsCreateNestedManyWithoutCustomerInput
}

input CompanyCreateNestedManyWithoutCustomerInput {
  create: [CompanyCreateWithoutCustomerInput!]
  connectOrCreate: [CompanyCreateOrConnectWithoutCustomerInput!]
  createMany: CompanyCreateManyCustomerInputEnvelope
  connect: [CompanyWhereUniqueInput!]
}

input CompanyCreateWithoutCustomerInput {
  annualRecurringRevenue: Int
  expectedToCloseAt: DateTime
  fiscalYearStartMonth: Int
  name: String!
  companyType: CompanyType!
  seatSize: Int
  createdAt: DateTime
  updatedAt: DateTime
  fiscalYear: Int
  renewalDate: DateTime
  referredOn: DateTime
  latestReferenceId: Int
  leadSource: UserCreateNestedOneWithoutLeadSourceForInput
  companyParent: CompanyCreateNestedOneWithoutSubsidiaryInput
  primaryContact: UserCreateNestedOneWithoutPrimaryContactForInput
  references: ReferenceCreateNestedManyWithoutCompanyInput
  referencesServedFor: ReferenceCreateNestedManyWithoutServedAsReferenceForInput
  subsidiary: CompanyCreateNestedManyWithoutCompanyParentInput
  starredBy: CompanyStarredCreateNestedManyWithoutCompanyInput
  events: EventCreateNestedManyWithoutCompanyInput
  notes: NoteCreateNestedManyWithoutCompanyInput
  account: AccountCreateNestedOneWithoutCompanyInput!
  competitors: CompetitorCreateNestedManyWithoutCompanyInput
  products: ProductCreateNestedManyWithoutCompanyInput
  contacts: ContactsCreateNestedManyWithoutCompanyInput
  UserCompanyRatings: UserCompanyRatingsCreateNestedManyWithoutCompanyInput
  listCompanies: ListCompanyCreateNestedManyWithoutCompanyInput
  Launch: LaunchCreateNestedManyWithoutCompanyInput
}

input CompanyCreateNestedOneWithoutSubsidiaryInput {
  create: CompanyCreateWithoutSubsidiaryInput
  connectOrCreate: CompanyCreateOrConnectWithoutSubsidiaryInput
  connect: CompanyWhereUniqueInput
}

input CompanyCreateWithoutSubsidiaryInput {
  annualRecurringRevenue: Int
  expectedToCloseAt: DateTime
  fiscalYearStartMonth: Int
  name: String!
  companyType: CompanyType!
  seatSize: Int
  createdAt: DateTime
  updatedAt: DateTime
  fiscalYear: Int
  renewalDate: DateTime
  referredOn: DateTime
  latestReferenceId: Int
  customer: CustomerCreateNestedOneWithoutCompaniesInput!
  leadSource: UserCreateNestedOneWithoutLeadSourceForInput
  companyParent: CompanyCreateNestedOneWithoutSubsidiaryInput
  primaryContact: UserCreateNestedOneWithoutPrimaryContactForInput
  references: ReferenceCreateNestedManyWithoutCompanyInput
  referencesServedFor: ReferenceCreateNestedManyWithoutServedAsReferenceForInput
  starredBy: CompanyStarredCreateNestedManyWithoutCompanyInput
  events: EventCreateNestedManyWithoutCompanyInput
  notes: NoteCreateNestedManyWithoutCompanyInput
  account: AccountCreateNestedOneWithoutCompanyInput!
  competitors: CompetitorCreateNestedManyWithoutCompanyInput
  products: ProductCreateNestedManyWithoutCompanyInput
  contacts: ContactsCreateNestedManyWithoutCompanyInput
  UserCompanyRatings: UserCompanyRatingsCreateNestedManyWithoutCompanyInput
  listCompanies: ListCompanyCreateNestedManyWithoutCompanyInput
  Launch: LaunchCreateNestedManyWithoutCompanyInput
}

input UserCreateNestedOneWithoutPrimaryContactForInput {
  create: UserCreateWithoutPrimaryContactForInput
  connectOrCreate: UserCreateOrConnectWithoutPrimaryContactForInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutPrimaryContactForInput {
  admin: Boolean
  email: String!
  name: String!
  passwordHash: String
  passwordSalt: String
  workPhone: String
  mobilePhone: String
  title: String
  token: String
  notificationSettings: JSON
  createdAt: DateTime
  updatedAt: DateTime
  dynamicFields: JSON
  active: Boolean
  oktaUserId: Int
  oktaManagerId: Int
  forgetPassword: String
  csmStatus: Boolean
  crmStatus: Boolean
  customer: CustomerCreateNestedOneWithoutUsersInput!
  leadSourceFor: CompanyCreateNestedManyWithoutLeadSourceInput
  starred: CompanyStarredCreateNestedManyWithoutUserInput
  externalUser: ExternalUserCreateNestedManyWithoutUserInput
  groups: GroupUserCreateNestedManyWithoutUserInput
  Note: NoteCreateNestedManyWithoutUserInput
  roles: UserRoleCreateNestedManyWithoutUserInput
  userEvents: UserEventsCreateNestedManyWithoutUserInput
  UserCompanyRatings: UserCompanyRatingsCreateNestedManyWithoutUserInput
  noteUserTags: NoteUserTagsCreateNestedManyWithoutUserInput
  messageTemplate: MessageTemplateCreateNestedManyWithoutUserInput
  Feedback: FeedbackCreateNestedManyWithoutUserInput
  references: ReferenceCreateNestedManyWithoutUserInput
  userManager: UserManagerCreateNestedManyWithoutUserInput
  userReportee: UserManagerCreateNestedManyWithoutManagerInput
}

input CompanyCreateNestedManyWithoutLeadSourceInput {
  create: [CompanyCreateWithoutLeadSourceInput!]
  connectOrCreate: [CompanyCreateOrConnectWithoutLeadSourceInput!]
  createMany: CompanyCreateManyLeadSourceInputEnvelope
  connect: [CompanyWhereUniqueInput!]
}

input CompanyCreateWithoutLeadSourceInput {
  annualRecurringRevenue: Int
  expectedToCloseAt: DateTime
  fiscalYearStartMonth: Int
  name: String!
  companyType: CompanyType!
  seatSize: Int
  createdAt: DateTime
  updatedAt: DateTime
  fiscalYear: Int
  renewalDate: DateTime
  referredOn: DateTime
  latestReferenceId: Int
  customer: CustomerCreateNestedOneWithoutCompaniesInput!
  companyParent: CompanyCreateNestedOneWithoutSubsidiaryInput
  primaryContact: UserCreateNestedOneWithoutPrimaryContactForInput
  references: ReferenceCreateNestedManyWithoutCompanyInput
  referencesServedFor: ReferenceCreateNestedManyWithoutServedAsReferenceForInput
  subsidiary: CompanyCreateNestedManyWithoutCompanyParentInput
  starredBy: CompanyStarredCreateNestedManyWithoutCompanyInput
  events: EventCreateNestedManyWithoutCompanyInput
  notes: NoteCreateNestedManyWithoutCompanyInput
  account: AccountCreateNestedOneWithoutCompanyInput!
  competitors: CompetitorCreateNestedManyWithoutCompanyInput
  products: ProductCreateNestedManyWithoutCompanyInput
  contacts: ContactsCreateNestedManyWithoutCompanyInput
  UserCompanyRatings: UserCompanyRatingsCreateNestedManyWithoutCompanyInput
  listCompanies: ListCompanyCreateNestedManyWithoutCompanyInput
  Launch: LaunchCreateNestedManyWithoutCompanyInput
}

input ReferenceCreateNestedManyWithoutCompanyInput {
  create: [ReferenceCreateWithoutCompanyInput!]
  connectOrCreate: [ReferenceCreateOrConnectWithoutCompanyInput!]
  createMany: ReferenceCreateManyCompanyInputEnvelope
  connect: [ReferenceWhereUniqueInput!]
}

input ReferenceCreateWithoutCompanyInput {
  offeredTo: Boolean!
  servedAsReferenceBefore: Boolean!
  servedAsReferenceAt: DateTime
  notes: String
  dealClosed: Boolean
  createdAt: DateTime
  servedAsReferenceFor: CompanyCreateNestedOneWithoutReferencesServedForInput
  offerOptions: ReferenceOnOfferOptionsCreateNestedManyWithoutReferenceInput
  user: UserCreateNestedOneWithoutReferencesInput
}

input CompanyCreateNestedOneWithoutReferencesServedForInput {
  create: CompanyCreateWithoutReferencesServedForInput
  connectOrCreate: CompanyCreateOrConnectWithoutReferencesServedForInput
  connect: CompanyWhereUniqueInput
}

input CompanyCreateWithoutReferencesServedForInput {
  annualRecurringRevenue: Int
  expectedToCloseAt: DateTime
  fiscalYearStartMonth: Int
  name: String!
  companyType: CompanyType!
  seatSize: Int
  createdAt: DateTime
  updatedAt: DateTime
  fiscalYear: Int
  renewalDate: DateTime
  referredOn: DateTime
  latestReferenceId: Int
  customer: CustomerCreateNestedOneWithoutCompaniesInput!
  leadSource: UserCreateNestedOneWithoutLeadSourceForInput
  companyParent: CompanyCreateNestedOneWithoutSubsidiaryInput
  primaryContact: UserCreateNestedOneWithoutPrimaryContactForInput
  references: ReferenceCreateNestedManyWithoutCompanyInput
  subsidiary: CompanyCreateNestedManyWithoutCompanyParentInput
  starredBy: CompanyStarredCreateNestedManyWithoutCompanyInput
  events: EventCreateNestedManyWithoutCompanyInput
  notes: NoteCreateNestedManyWithoutCompanyInput
  account: AccountCreateNestedOneWithoutCompanyInput!
  competitors: CompetitorCreateNestedManyWithoutCompanyInput
  products: ProductCreateNestedManyWithoutCompanyInput
  contacts: ContactsCreateNestedManyWithoutCompanyInput
  UserCompanyRatings: UserCompanyRatingsCreateNestedManyWithoutCompanyInput
  listCompanies: ListCompanyCreateNestedManyWithoutCompanyInput
  Launch: LaunchCreateNestedManyWithoutCompanyInput
}

input CompanyCreateNestedManyWithoutCompanyParentInput {
  create: [CompanyCreateWithoutCompanyParentInput!]
  connectOrCreate: [CompanyCreateOrConnectWithoutCompanyParentInput!]
  createMany: CompanyCreateManyCompanyParentInputEnvelope
  connect: [CompanyWhereUniqueInput!]
}

input CompanyCreateWithoutCompanyParentInput {
  annualRecurringRevenue: Int
  expectedToCloseAt: DateTime
  fiscalYearStartMonth: Int
  name: String!
  companyType: CompanyType!
  seatSize: Int
  createdAt: DateTime
  updatedAt: DateTime
  fiscalYear: Int
  renewalDate: DateTime
  referredOn: DateTime
  latestReferenceId: Int
  customer: CustomerCreateNestedOneWithoutCompaniesInput!
  leadSource: UserCreateNestedOneWithoutLeadSourceForInput
  primaryContact: UserCreateNestedOneWithoutPrimaryContactForInput
  references: ReferenceCreateNestedManyWithoutCompanyInput
  referencesServedFor: ReferenceCreateNestedManyWithoutServedAsReferenceForInput
  subsidiary: CompanyCreateNestedManyWithoutCompanyParentInput
  starredBy: CompanyStarredCreateNestedManyWithoutCompanyInput
  events: EventCreateNestedManyWithoutCompanyInput
  notes: NoteCreateNestedManyWithoutCompanyInput
  account: AccountCreateNestedOneWithoutCompanyInput!
  competitors: CompetitorCreateNestedManyWithoutCompanyInput
  products: ProductCreateNestedManyWithoutCompanyInput
  contacts: ContactsCreateNestedManyWithoutCompanyInput
  UserCompanyRatings: UserCompanyRatingsCreateNestedManyWithoutCompanyInput
  listCompanies: ListCompanyCreateNestedManyWithoutCompanyInput
  Launch: LaunchCreateNestedManyWithoutCompanyInput
}

input ReferenceCreateNestedManyWithoutServedAsReferenceForInput {
  create: [ReferenceCreateWithoutServedAsReferenceForInput!]
  connectOrCreate: [ReferenceCreateOrConnectWithoutServedAsReferenceForInput!]
  createMany: ReferenceCreateManyServedAsReferenceForInputEnvelope
  connect: [ReferenceWhereUniqueInput!]
}

input ReferenceCreateWithoutServedAsReferenceForInput {
  offeredTo: Boolean!
  servedAsReferenceBefore: Boolean!
  servedAsReferenceAt: DateTime
  notes: String
  dealClosed: Boolean
  createdAt: DateTime
  company: CompanyCreateNestedOneWithoutReferencesInput!
  offerOptions: ReferenceOnOfferOptionsCreateNestedManyWithoutReferenceInput
  user: UserCreateNestedOneWithoutReferencesInput
}

input CompanyCreateNestedOneWithoutReferencesInput {
  create: CompanyCreateWithoutReferencesInput
  connectOrCreate: CompanyCreateOrConnectWithoutReferencesInput
  connect: CompanyWhereUniqueInput
}

input CompanyCreateWithoutReferencesInput {
  annualRecurringRevenue: Int
  expectedToCloseAt: DateTime
  fiscalYearStartMonth: Int
  name: String!
  companyType: CompanyType!
  seatSize: Int
  createdAt: DateTime
  updatedAt: DateTime
  fiscalYear: Int
  renewalDate: DateTime
  referredOn: DateTime
  latestReferenceId: Int
  customer: CustomerCreateNestedOneWithoutCompaniesInput!
  leadSource: UserCreateNestedOneWithoutLeadSourceForInput
  companyParent: CompanyCreateNestedOneWithoutSubsidiaryInput
  primaryContact: UserCreateNestedOneWithoutPrimaryContactForInput
  referencesServedFor: ReferenceCreateNestedManyWithoutServedAsReferenceForInput
  subsidiary: CompanyCreateNestedManyWithoutCompanyParentInput
  starredBy: CompanyStarredCreateNestedManyWithoutCompanyInput
  events: EventCreateNestedManyWithoutCompanyInput
  notes: NoteCreateNestedManyWithoutCompanyInput
  account: AccountCreateNestedOneWithoutCompanyInput!
  competitors: CompetitorCreateNestedManyWithoutCompanyInput
  products: ProductCreateNestedManyWithoutCompanyInput
  contacts: ContactsCreateNestedManyWithoutCompanyInput
  UserCompanyRatings: UserCompanyRatingsCreateNestedManyWithoutCompanyInput
  listCompanies: ListCompanyCreateNestedManyWithoutCompanyInput
  Launch: LaunchCreateNestedManyWithoutCompanyInput
}

input CompanyStarredCreateNestedManyWithoutCompanyInput {
  create: [CompanyStarredCreateWithoutCompanyInput!]
  connectOrCreate: [CompanyStarredCreateOrConnectWithoutCompanyInput!]
  createMany: CompanyStarredCreateManyCompanyInputEnvelope
  connect: [CompanyStarredWhereUniqueInput!]
}

input CompanyStarredCreateWithoutCompanyInput {
  dummy: Int
  createdAt: DateTime
  user: UserCreateNestedOneWithoutStarredInput!
}

input UserCreateNestedOneWithoutStarredInput {
  create: UserCreateWithoutStarredInput
  connectOrCreate: UserCreateOrConnectWithoutStarredInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutStarredInput {
  admin: Boolean
  email: String!
  name: String!
  passwordHash: String
  passwordSalt: String
  workPhone: String
  mobilePhone: String
  title: String
  token: String
  notificationSettings: JSON
  createdAt: DateTime
  updatedAt: DateTime
  dynamicFields: JSON
  active: Boolean
  oktaUserId: Int
  oktaManagerId: Int
  forgetPassword: String
  csmStatus: Boolean
  crmStatus: Boolean
  customer: CustomerCreateNestedOneWithoutUsersInput!
  leadSourceFor: CompanyCreateNestedManyWithoutLeadSourceInput
  primaryContactFor: CompanyCreateNestedManyWithoutPrimaryContactInput
  externalUser: ExternalUserCreateNestedManyWithoutUserInput
  groups: GroupUserCreateNestedManyWithoutUserInput
  Note: NoteCreateNestedManyWithoutUserInput
  roles: UserRoleCreateNestedManyWithoutUserInput
  userEvents: UserEventsCreateNestedManyWithoutUserInput
  UserCompanyRatings: UserCompanyRatingsCreateNestedManyWithoutUserInput
  noteUserTags: NoteUserTagsCreateNestedManyWithoutUserInput
  messageTemplate: MessageTemplateCreateNestedManyWithoutUserInput
  Feedback: FeedbackCreateNestedManyWithoutUserInput
  references: ReferenceCreateNestedManyWithoutUserInput
  userManager: UserManagerCreateNestedManyWithoutUserInput
  userReportee: UserManagerCreateNestedManyWithoutManagerInput
}

input CompanyCreateNestedManyWithoutPrimaryContactInput {
  create: [CompanyCreateWithoutPrimaryContactInput!]
  connectOrCreate: [CompanyCreateOrConnectWithoutPrimaryContactInput!]
  createMany: CompanyCreateManyPrimaryContactInputEnvelope
  connect: [CompanyWhereUniqueInput!]
}

input CompanyCreateWithoutPrimaryContactInput {
  annualRecurringRevenue: Int
  expectedToCloseAt: DateTime
  fiscalYearStartMonth: Int
  name: String!
  companyType: CompanyType!
  seatSize: Int
  createdAt: DateTime
  updatedAt: DateTime
  fiscalYear: Int
  renewalDate: DateTime
  referredOn: DateTime
  latestReferenceId: Int
  customer: CustomerCreateNestedOneWithoutCompaniesInput!
  leadSource: UserCreateNestedOneWithoutLeadSourceForInput
  companyParent: CompanyCreateNestedOneWithoutSubsidiaryInput
  references: ReferenceCreateNestedManyWithoutCompanyInput
  referencesServedFor: ReferenceCreateNestedManyWithoutServedAsReferenceForInput
  subsidiary: CompanyCreateNestedManyWithoutCompanyParentInput
  starredBy: CompanyStarredCreateNestedManyWithoutCompanyInput
  events: EventCreateNestedManyWithoutCompanyInput
  notes: NoteCreateNestedManyWithoutCompanyInput
  account: AccountCreateNestedOneWithoutCompanyInput!
  competitors: CompetitorCreateNestedManyWithoutCompanyInput
  products: ProductCreateNestedManyWithoutCompanyInput
  contacts: ContactsCreateNestedManyWithoutCompanyInput
  UserCompanyRatings: UserCompanyRatingsCreateNestedManyWithoutCompanyInput
  listCompanies: ListCompanyCreateNestedManyWithoutCompanyInput
  Launch: LaunchCreateNestedManyWithoutCompanyInput
}

input EventCreateNestedManyWithoutCompanyInput {
  create: [EventCreateWithoutCompanyInput!]
  connectOrCreate: [EventCreateOrConnectWithoutCompanyInput!]
  createMany: EventCreateManyCompanyInputEnvelope
  connect: [EventWhereUniqueInput!]
}

input EventCreateWithoutCompanyInput {
  data: JSON
  notifiedAt: DateTime
  text: String
  type: EventType!
  needsAttention: EventAttention
  createdAt: DateTime
  customer: CustomerCreateNestedOneWithoutEventsInput!
  Launch: LaunchCreateNestedManyWithoutEventsInput
  notes: NoteCreateNestedManyWithoutEventsInput
  userEvents: UserEventsCreateNestedManyWithoutEventInput
  parentEvent: EventCreateNestedOneWithoutChildEventsInput
  childEvents: EventCreateNestedManyWithoutParentEventInput
  message: NoteCreateNestedOneWithoutEventInput
}

input CustomerCreateNestedOneWithoutEventsInput {
  create: CustomerCreateWithoutEventsInput
  connectOrCreate: CustomerCreateOrConnectWithoutEventsInput
  connect: CustomerWhereUniqueInput
}

input CustomerCreateWithoutEventsInput {
  name: String!
  type: CustomerType!
  favoritedAt: DateTime
  createdAt: DateTime
  updatedAt: DateTime
  oktaClientId: String
  oktaDomain: String
  oktaClientSecret: String
  oktaApiKey: String
  launch: LaunchCreateNestedManyWithoutCustomerInput
  companies: CompanyCreateNestedManyWithoutCustomerInput
  integrations: CustomerIntegrationCreateNestedManyWithoutCustomerInput
  externalGroups: ExternalGroupCreateNestedManyWithoutCustomerInput
  externalUsers: ExternalUserCreateNestedManyWithoutCustomerInput
  groups: GroupCreateNestedManyWithoutCustomerInput
  notes: NoteCreateNestedManyWithoutCustomerInput
  roles: RoleCreateNestedManyWithoutCustomerInput
  salesLeads: SalesLeadCreateNestedManyWithoutCustomerInput
  syncEvents: SyncEventCreateNestedManyWithoutCustomerInput
  users: UserCreateNestedManyWithoutCustomerInput
  messageTemplate: MessageTemplateCreateNestedManyWithoutCustomerInput
  dynamicFields: DynamicUserFieldsCreateNestedManyWithoutCustomerInput
  lists: ListCreateNestedManyWithoutCustomerInput
  useCaseCollections: UseCaseCollectionsCreateNestedManyWithoutCustomerInput
  customerDataSources: DataSourcesOnCustomerCreateNestedManyWithoutCustomerInput
  dataObjectCollections: DataObjectCollectionsCreateNestedManyWithoutCustomerInput
}

input CustomerIntegrationCreateNestedManyWithoutCustomerInput {
  create: [CustomerIntegrationCreateWithoutCustomerInput!]
  connectOrCreate: [CustomerIntegrationCreateOrConnectWithoutCustomerInput!]
  createMany: CustomerIntegrationCreateManyCustomerInputEnvelope
  connect: [CustomerIntegrationWhereUniqueInput!]
}

input CustomerIntegrationCreateWithoutCustomerInput {
  refreshToken: String
  token: String!
  type: CustomerIntegrationType!
  url: String
  createdAt: DateTime
  updatedAt: DateTime
}

input CustomerIntegrationCreateOrConnectWithoutCustomerInput {
  where: CustomerIntegrationWhereUniqueInput!
  create: CustomerIntegrationCreateWithoutCustomerInput!
}

input CustomerIntegrationCreateManyCustomerInputEnvelope {
  data: [CustomerIntegrationCreateManyCustomerInput!]!
  skipDuplicates: Boolean
}

input CustomerIntegrationCreateManyCustomerInput {
  id: Int
  refreshToken: String
  token: String!
  type: CustomerIntegrationType!
  url: String
  createdAt: DateTime
  updatedAt: DateTime
}

input ExternalGroupCreateNestedManyWithoutCustomerInput {
  create: [ExternalGroupCreateWithoutCustomerInput!]
  connectOrCreate: [ExternalGroupCreateOrConnectWithoutCustomerInput!]
  createMany: ExternalGroupCreateManyCustomerInputEnvelope
  connect: [ExternalGroupWhereUniqueInput!]
}

input ExternalGroupCreateWithoutCustomerInput {
  externalId: String!
  developerName: String!
  name: String
  ownerId: String
  source: CustomerIntegrationType!
  type: String
  createdAt: DateTime
  updatedAt: DateTime
  members: ExternalGroupMemberCreateNestedManyWithoutGroupInput
}

input ExternalGroupMemberCreateNestedManyWithoutGroupInput {
  create: [ExternalGroupMemberCreateWithoutGroupInput!]
  connectOrCreate: [ExternalGroupMemberCreateOrConnectWithoutGroupInput!]
  createMany: ExternalGroupMemberCreateManyGroupInputEnvelope
  connect: [ExternalGroupMemberWhereUniqueInput!]
}

input ExternalGroupMemberCreateWithoutGroupInput {
  createdAt: DateTime
  user: ExternalUserCreateNestedOneWithoutExternalGroupsInput!
}

input ExternalUserCreateNestedOneWithoutExternalGroupsInput {
  create: ExternalUserCreateWithoutExternalGroupsInput
  connectOrCreate: ExternalUserCreateOrConnectWithoutExternalGroupsInput
  connect: ExternalUserWhereUniqueInput
}

input ExternalUserCreateWithoutExternalGroupsInput {
  department: String
  division: String
  email: String
  employeeNumber: String
  externalId: String!
  name: String
  source: CustomerIntegrationType!
  title: String
  createdAt: DateTime
  updatedAt: DateTime
  customer: CustomerCreateNestedOneWithoutExternalUsersInput!
  user: UserCreateNestedOneWithoutExternalUserInput
}

input CustomerCreateNestedOneWithoutExternalUsersInput {
  create: CustomerCreateWithoutExternalUsersInput
  connectOrCreate: CustomerCreateOrConnectWithoutExternalUsersInput
  connect: CustomerWhereUniqueInput
}

input CustomerCreateWithoutExternalUsersInput {
  name: String!
  type: CustomerType!
  favoritedAt: DateTime
  createdAt: DateTime
  updatedAt: DateTime
  oktaClientId: String
  oktaDomain: String
  oktaClientSecret: String
  oktaApiKey: String
  launch: LaunchCreateNestedManyWithoutCustomerInput
  companies: CompanyCreateNestedManyWithoutCustomerInput
  integrations: CustomerIntegrationCreateNestedManyWithoutCustomerInput
  events: EventCreateNestedManyWithoutCustomerInput
  externalGroups: ExternalGroupCreateNestedManyWithoutCustomerInput
  groups: GroupCreateNestedManyWithoutCustomerInput
  notes: NoteCreateNestedManyWithoutCustomerInput
  roles: RoleCreateNestedManyWithoutCustomerInput
  salesLeads: SalesLeadCreateNestedManyWithoutCustomerInput
  syncEvents: SyncEventCreateNestedManyWithoutCustomerInput
  users: UserCreateNestedManyWithoutCustomerInput
  messageTemplate: MessageTemplateCreateNestedManyWithoutCustomerInput
  dynamicFields: DynamicUserFieldsCreateNestedManyWithoutCustomerInput
  lists: ListCreateNestedManyWithoutCustomerInput
  useCaseCollections: UseCaseCollectionsCreateNestedManyWithoutCustomerInput
  customerDataSources: DataSourcesOnCustomerCreateNestedManyWithoutCustomerInput
  dataObjectCollections: DataObjectCollectionsCreateNestedManyWithoutCustomerInput
}

input EventCreateNestedManyWithoutCustomerInput {
  create: [EventCreateWithoutCustomerInput!]
  connectOrCreate: [EventCreateOrConnectWithoutCustomerInput!]
  createMany: EventCreateManyCustomerInputEnvelope
  connect: [EventWhereUniqueInput!]
}

input EventCreateWithoutCustomerInput {
  data: JSON
  notifiedAt: DateTime
  text: String
  type: EventType!
  needsAttention: EventAttention
  createdAt: DateTime
  company: CompanyCreateNestedOneWithoutEventsInput
  Launch: LaunchCreateNestedManyWithoutEventsInput
  notes: NoteCreateNestedManyWithoutEventsInput
  userEvents: UserEventsCreateNestedManyWithoutEventInput
  parentEvent: EventCreateNestedOneWithoutChildEventsInput
  childEvents: EventCreateNestedManyWithoutParentEventInput
  message: NoteCreateNestedOneWithoutEventInput
}

input CompanyCreateNestedOneWithoutEventsInput {
  create: CompanyCreateWithoutEventsInput
  connectOrCreate: CompanyCreateOrConnectWithoutEventsInput
  connect: CompanyWhereUniqueInput
}

input CompanyCreateWithoutEventsInput {
  annualRecurringRevenue: Int
  expectedToCloseAt: DateTime
  fiscalYearStartMonth: Int
  name: String!
  companyType: CompanyType!
  seatSize: Int
  createdAt: DateTime
  updatedAt: DateTime
  fiscalYear: Int
  renewalDate: DateTime
  referredOn: DateTime
  latestReferenceId: Int
  customer: CustomerCreateNestedOneWithoutCompaniesInput!
  leadSource: UserCreateNestedOneWithoutLeadSourceForInput
  companyParent: CompanyCreateNestedOneWithoutSubsidiaryInput
  primaryContact: UserCreateNestedOneWithoutPrimaryContactForInput
  references: ReferenceCreateNestedManyWithoutCompanyInput
  referencesServedFor: ReferenceCreateNestedManyWithoutServedAsReferenceForInput
  subsidiary: CompanyCreateNestedManyWithoutCompanyParentInput
  starredBy: CompanyStarredCreateNestedManyWithoutCompanyInput
  notes: NoteCreateNestedManyWithoutCompanyInput
  account: AccountCreateNestedOneWithoutCompanyInput!
  competitors: CompetitorCreateNestedManyWithoutCompanyInput
  products: ProductCreateNestedManyWithoutCompanyInput
  contacts: ContactsCreateNestedManyWithoutCompanyInput
  UserCompanyRatings: UserCompanyRatingsCreateNestedManyWithoutCompanyInput
  listCompanies: ListCompanyCreateNestedManyWithoutCompanyInput
  Launch: LaunchCreateNestedManyWithoutCompanyInput
}

input NoteCreateNestedManyWithoutCompanyInput {
  create: [NoteCreateWithoutCompanyInput!]
  connectOrCreate: [NoteCreateOrConnectWithoutCompanyInput!]
  createMany: NoteCreateManyCompanyInputEnvelope
  connect: [NoteWhereUniqueInput!]
}

input NoteCreateWithoutCompanyInput {
  readAt: DateTime
  flaggedAt: DateTime
  subject: String!
  text: String!
  allCanView: Boolean
  createdAt: DateTime
  updatedAt: DateTime
  delta: JSON
  customer: CustomerCreateNestedOneWithoutNotesInput
  events: EventCreateNestedOneWithoutNotesInput
  user: UserCreateNestedOneWithoutNoteInput
  noteUserTags: NoteUserTagsCreateNestedManyWithoutNoteInput
  noteGroupTags: NoteGroupTagsCreateNestedManyWithoutNoteInput
  Event: EventCreateNestedManyWithoutMessageInput
}

input CustomerCreateNestedOneWithoutNotesInput {
  create: CustomerCreateWithoutNotesInput
  connectOrCreate: CustomerCreateOrConnectWithoutNotesInput
  connect: CustomerWhereUniqueInput
}

input CustomerCreateWithoutNotesInput {
  name: String!
  type: CustomerType!
  favoritedAt: DateTime
  createdAt: DateTime
  updatedAt: DateTime
  oktaClientId: String
  oktaDomain: String
  oktaClientSecret: String
  oktaApiKey: String
  launch: LaunchCreateNestedManyWithoutCustomerInput
  companies: CompanyCreateNestedManyWithoutCustomerInput
  integrations: CustomerIntegrationCreateNestedManyWithoutCustomerInput
  events: EventCreateNestedManyWithoutCustomerInput
  externalGroups: ExternalGroupCreateNestedManyWithoutCustomerInput
  externalUsers: ExternalUserCreateNestedManyWithoutCustomerInput
  groups: GroupCreateNestedManyWithoutCustomerInput
  roles: RoleCreateNestedManyWithoutCustomerInput
  salesLeads: SalesLeadCreateNestedManyWithoutCustomerInput
  syncEvents: SyncEventCreateNestedManyWithoutCustomerInput
  users: UserCreateNestedManyWithoutCustomerInput
  messageTemplate: MessageTemplateCreateNestedManyWithoutCustomerInput
  dynamicFields: DynamicUserFieldsCreateNestedManyWithoutCustomerInput
  lists: ListCreateNestedManyWithoutCustomerInput
  useCaseCollections: UseCaseCollectionsCreateNestedManyWithoutCustomerInput
  customerDataSources: DataSourcesOnCustomerCreateNestedManyWithoutCustomerInput
  dataObjectCollections: DataObjectCollectionsCreateNestedManyWithoutCustomerInput
}

input ExternalUserCreateNestedManyWithoutCustomerInput {
  create: [ExternalUserCreateWithoutCustomerInput!]
  connectOrCreate: [ExternalUserCreateOrConnectWithoutCustomerInput!]
  createMany: ExternalUserCreateManyCustomerInputEnvelope
  connect: [ExternalUserWhereUniqueInput!]
}

input ExternalUserCreateWithoutCustomerInput {
  department: String
  division: String
  email: String
  employeeNumber: String
  externalId: String!
  name: String
  source: CustomerIntegrationType!
  title: String
  createdAt: DateTime
  updatedAt: DateTime
  user: UserCreateNestedOneWithoutExternalUserInput
  externalGroups: ExternalGroupMemberCreateNestedManyWithoutUserInput
}

input UserCreateNestedOneWithoutExternalUserInput {
  create: UserCreateWithoutExternalUserInput
  connectOrCreate: UserCreateOrConnectWithoutExternalUserInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutExternalUserInput {
  admin: Boolean
  email: String!
  name: String!
  passwordHash: String
  passwordSalt: String
  workPhone: String
  mobilePhone: String
  title: String
  token: String
  notificationSettings: JSON
  createdAt: DateTime
  updatedAt: DateTime
  dynamicFields: JSON
  active: Boolean
  oktaUserId: Int
  oktaManagerId: Int
  forgetPassword: String
  csmStatus: Boolean
  crmStatus: Boolean
  customer: CustomerCreateNestedOneWithoutUsersInput!
  leadSourceFor: CompanyCreateNestedManyWithoutLeadSourceInput
  primaryContactFor: CompanyCreateNestedManyWithoutPrimaryContactInput
  starred: CompanyStarredCreateNestedManyWithoutUserInput
  groups: GroupUserCreateNestedManyWithoutUserInput
  Note: NoteCreateNestedManyWithoutUserInput
  roles: UserRoleCreateNestedManyWithoutUserInput
  userEvents: UserEventsCreateNestedManyWithoutUserInput
  UserCompanyRatings: UserCompanyRatingsCreateNestedManyWithoutUserInput
  noteUserTags: NoteUserTagsCreateNestedManyWithoutUserInput
  messageTemplate: MessageTemplateCreateNestedManyWithoutUserInput
  Feedback: FeedbackCreateNestedManyWithoutUserInput
  references: ReferenceCreateNestedManyWithoutUserInput
  userManager: UserManagerCreateNestedManyWithoutUserInput
  userReportee: UserManagerCreateNestedManyWithoutManagerInput
}

input CompanyStarredCreateNestedManyWithoutUserInput {
  create: [CompanyStarredCreateWithoutUserInput!]
  connectOrCreate: [CompanyStarredCreateOrConnectWithoutUserInput!]
  createMany: CompanyStarredCreateManyUserInputEnvelope
  connect: [CompanyStarredWhereUniqueInput!]
}

input CompanyStarredCreateWithoutUserInput {
  dummy: Int
  createdAt: DateTime
  company: CompanyCreateNestedOneWithoutStarredByInput!
}

input CompanyCreateNestedOneWithoutStarredByInput {
  create: CompanyCreateWithoutStarredByInput
  connectOrCreate: CompanyCreateOrConnectWithoutStarredByInput
  connect: CompanyWhereUniqueInput
}

input CompanyCreateWithoutStarredByInput {
  annualRecurringRevenue: Int
  expectedToCloseAt: DateTime
  fiscalYearStartMonth: Int
  name: String!
  companyType: CompanyType!
  seatSize: Int
  createdAt: DateTime
  updatedAt: DateTime
  fiscalYear: Int
  renewalDate: DateTime
  referredOn: DateTime
  latestReferenceId: Int
  customer: CustomerCreateNestedOneWithoutCompaniesInput!
  leadSource: UserCreateNestedOneWithoutLeadSourceForInput
  companyParent: CompanyCreateNestedOneWithoutSubsidiaryInput
  primaryContact: UserCreateNestedOneWithoutPrimaryContactForInput
  references: ReferenceCreateNestedManyWithoutCompanyInput
  referencesServedFor: ReferenceCreateNestedManyWithoutServedAsReferenceForInput
  subsidiary: CompanyCreateNestedManyWithoutCompanyParentInput
  events: EventCreateNestedManyWithoutCompanyInput
  notes: NoteCreateNestedManyWithoutCompanyInput
  account: AccountCreateNestedOneWithoutCompanyInput!
  competitors: CompetitorCreateNestedManyWithoutCompanyInput
  products: ProductCreateNestedManyWithoutCompanyInput
  contacts: ContactsCreateNestedManyWithoutCompanyInput
  UserCompanyRatings: UserCompanyRatingsCreateNestedManyWithoutCompanyInput
  listCompanies: ListCompanyCreateNestedManyWithoutCompanyInput
  Launch: LaunchCreateNestedManyWithoutCompanyInput
}

input AccountCreateNestedOneWithoutCompanyInput {
  create: AccountCreateWithoutCompanyInput
  connectOrCreate: AccountCreateOrConnectWithoutCompanyInput
  connect: AccountWhereUniqueInput
}

input AccountCreateWithoutCompanyInput {
  accountName: String!
  AccountUUID: String
}

input AccountCreateOrConnectWithoutCompanyInput {
  where: AccountWhereUniqueInput!
  create: AccountCreateWithoutCompanyInput!
}

input CompetitorCreateNestedManyWithoutCompanyInput {
  create: [CompetitorCreateWithoutCompanyInput!]
  connectOrCreate: [CompetitorCreateOrConnectWithoutCompanyInput!]
  createMany: CompetitorCreateManyCompanyInputEnvelope
  connect: [CompetitorWhereUniqueInput!]
}

input CompetitorCreateWithoutCompanyInput {
  name: String!
  createdAt: DateTime
}

input CompetitorCreateOrConnectWithoutCompanyInput {
  where: CompetitorWhereUniqueInput!
  create: CompetitorCreateWithoutCompanyInput!
}

input CompetitorCreateManyCompanyInputEnvelope {
  data: [CompetitorCreateManyCompanyInput!]!
  skipDuplicates: Boolean
}

input CompetitorCreateManyCompanyInput {
  id: Int
  name: String!
  createdAt: DateTime
}

input ProductCreateNestedManyWithoutCompanyInput {
  create: [ProductCreateWithoutCompanyInput!]
  connectOrCreate: [ProductCreateOrConnectWithoutCompanyInput!]
  createMany: ProductCreateManyCompanyInputEnvelope
  connect: [ProductWhereUniqueInput!]
}

input ProductCreateWithoutCompanyInput {
  name: String!
  orderStartDate: DateTime!
  orderEndDate: DateTime!
  orderTerms: Int!
  monthlyUnitPrice: Int!
  quantity: Int!
  totalPrice: Int!
  createdAt: DateTime
  updatedAt: DateTime
}

input ProductCreateOrConnectWithoutCompanyInput {
  where: ProductWhereUniqueInput!
  create: ProductCreateWithoutCompanyInput!
}

input ProductCreateManyCompanyInputEnvelope {
  data: [ProductCreateManyCompanyInput!]!
  skipDuplicates: Boolean
}

input ProductCreateManyCompanyInput {
  id: Int
  name: String!
  orderStartDate: DateTime!
  orderEndDate: DateTime!
  orderTerms: Int!
  monthlyUnitPrice: Int!
  quantity: Int!
  totalPrice: Int!
  createdAt: DateTime
  updatedAt: DateTime
}

input ContactsCreateNestedManyWithoutCompanyInput {
  create: [ContactsCreateWithoutCompanyInput!]
  connectOrCreate: [ContactsCreateOrConnectWithoutCompanyInput!]
  createMany: ContactsCreateManyCompanyInputEnvelope
  connect: [ContactsWhereUniqueInput!]
}

input ContactsCreateWithoutCompanyInput {
  email: String!
  name: String!
  workPhone: String
  mobilePhone: String
  createdAt: DateTime
  updatedAt: DateTime
  primary: Boolean
  image: String
  launchContacts: LaunchContactsCreateNestedManyWithoutContactInput
}

input LaunchContactsCreateNestedManyWithoutContactInput {
  create: [LaunchContactsCreateWithoutContactInput!]
  connectOrCreate: [LaunchContactsCreateOrConnectWithoutContactInput!]
  createMany: LaunchContactsCreateManyContactInputEnvelope
  connect: [LaunchContactsWhereUniqueInput!]
}

input LaunchContactsCreateWithoutContactInput {
  createdAt: DateTime
  launch: LaunchCreateNestedOneWithoutLaunchContactsInput!
}

input LaunchCreateNestedOneWithoutLaunchContactsInput {
  create: LaunchCreateWithoutLaunchContactsInput
  connectOrCreate: LaunchCreateOrConnectWithoutLaunchContactsInput
  connect: LaunchWhereUniqueInput
}

input LaunchCreateWithoutLaunchContactsInput {
  createdAt: DateTime
  sendToAddress: String
  subject: String!
  text: String!
  delta: JSON
  company: CompanyCreateNestedOneWithoutLaunchInput!
  events: EventCreateNestedOneWithoutLaunchInput
  messageTempate: MessageTemplateCreateNestedOneWithoutLaunchInput
  Customer: CustomerCreateNestedOneWithoutLaunchInput
}

input EventCreateNestedOneWithoutLaunchInput {
  create: EventCreateWithoutLaunchInput
  connectOrCreate: EventCreateOrConnectWithoutLaunchInput
  connect: EventWhereUniqueInput
}

input EventCreateWithoutLaunchInput {
  data: JSON
  notifiedAt: DateTime
  text: String
  type: EventType!
  needsAttention: EventAttention
  createdAt: DateTime
  company: CompanyCreateNestedOneWithoutEventsInput
  customer: CustomerCreateNestedOneWithoutEventsInput!
  notes: NoteCreateNestedManyWithoutEventsInput
  userEvents: UserEventsCreateNestedManyWithoutEventInput
  parentEvent: EventCreateNestedOneWithoutChildEventsInput
  childEvents: EventCreateNestedManyWithoutParentEventInput
  message: NoteCreateNestedOneWithoutEventInput
}

input NoteCreateNestedManyWithoutEventsInput {
  create: [NoteCreateWithoutEventsInput!]
  connectOrCreate: [NoteCreateOrConnectWithoutEventsInput!]
  createMany: NoteCreateManyEventsInputEnvelope
  connect: [NoteWhereUniqueInput!]
}

input NoteCreateWithoutEventsInput {
  readAt: DateTime
  flaggedAt: DateTime
  subject: String!
  text: String!
  allCanView: Boolean
  createdAt: DateTime
  updatedAt: DateTime
  delta: JSON
  company: CompanyCreateNestedOneWithoutNotesInput
  customer: CustomerCreateNestedOneWithoutNotesInput
  user: UserCreateNestedOneWithoutNoteInput
  noteUserTags: NoteUserTagsCreateNestedManyWithoutNoteInput
  noteGroupTags: NoteGroupTagsCreateNestedManyWithoutNoteInput
  Event: EventCreateNestedManyWithoutMessageInput
}

input CompanyCreateNestedOneWithoutNotesInput {
  create: CompanyCreateWithoutNotesInput
  connectOrCreate: CompanyCreateOrConnectWithoutNotesInput
  connect: CompanyWhereUniqueInput
}

input CompanyCreateWithoutNotesInput {
  annualRecurringRevenue: Int
  expectedToCloseAt: DateTime
  fiscalYearStartMonth: Int
  name: String!
  companyType: CompanyType!
  seatSize: Int
  createdAt: DateTime
  updatedAt: DateTime
  fiscalYear: Int
  renewalDate: DateTime
  referredOn: DateTime
  latestReferenceId: Int
  customer: CustomerCreateNestedOneWithoutCompaniesInput!
  leadSource: UserCreateNestedOneWithoutLeadSourceForInput
  companyParent: CompanyCreateNestedOneWithoutSubsidiaryInput
  primaryContact: UserCreateNestedOneWithoutPrimaryContactForInput
  references: ReferenceCreateNestedManyWithoutCompanyInput
  referencesServedFor: ReferenceCreateNestedManyWithoutServedAsReferenceForInput
  subsidiary: CompanyCreateNestedManyWithoutCompanyParentInput
  starredBy: CompanyStarredCreateNestedManyWithoutCompanyInput
  events: EventCreateNestedManyWithoutCompanyInput
  account: AccountCreateNestedOneWithoutCompanyInput!
  competitors: CompetitorCreateNestedManyWithoutCompanyInput
  products: ProductCreateNestedManyWithoutCompanyInput
  contacts: ContactsCreateNestedManyWithoutCompanyInput
  UserCompanyRatings: UserCompanyRatingsCreateNestedManyWithoutCompanyInput
  listCompanies: ListCompanyCreateNestedManyWithoutCompanyInput
  Launch: LaunchCreateNestedManyWithoutCompanyInput
}

input UserCompanyRatingsCreateNestedManyWithoutCompanyInput {
  create: [UserCompanyRatingsCreateWithoutCompanyInput!]
  connectOrCreate: [UserCompanyRatingsCreateOrConnectWithoutCompanyInput!]
  createMany: UserCompanyRatingsCreateManyCompanyInputEnvelope
  connect: [UserCompanyRatingsWhereUniqueInput!]
}

input UserCompanyRatingsCreateWithoutCompanyInput {
  createdAt: DateTime
  updatedAt: DateTime
  user: UserCreateNestedOneWithoutUserCompanyRatingsInput!
  rating: RatingCreateNestedOneWithoutUserratingcompanyInput!
}

input UserCreateNestedOneWithoutUserCompanyRatingsInput {
  create: UserCreateWithoutUserCompanyRatingsInput
  connectOrCreate: UserCreateOrConnectWithoutUserCompanyRatingsInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutUserCompanyRatingsInput {
  admin: Boolean
  email: String!
  name: String!
  passwordHash: String
  passwordSalt: String
  workPhone: String
  mobilePhone: String
  title: String
  token: String
  notificationSettings: JSON
  createdAt: DateTime
  updatedAt: DateTime
  dynamicFields: JSON
  active: Boolean
  oktaUserId: Int
  oktaManagerId: Int
  forgetPassword: String
  csmStatus: Boolean
  crmStatus: Boolean
  customer: CustomerCreateNestedOneWithoutUsersInput!
  leadSourceFor: CompanyCreateNestedManyWithoutLeadSourceInput
  primaryContactFor: CompanyCreateNestedManyWithoutPrimaryContactInput
  starred: CompanyStarredCreateNestedManyWithoutUserInput
  externalUser: ExternalUserCreateNestedManyWithoutUserInput
  groups: GroupUserCreateNestedManyWithoutUserInput
  Note: NoteCreateNestedManyWithoutUserInput
  roles: UserRoleCreateNestedManyWithoutUserInput
  userEvents: UserEventsCreateNestedManyWithoutUserInput
  noteUserTags: NoteUserTagsCreateNestedManyWithoutUserInput
  messageTemplate: MessageTemplateCreateNestedManyWithoutUserInput
  Feedback: FeedbackCreateNestedManyWithoutUserInput
  references: ReferenceCreateNestedManyWithoutUserInput
  userManager: UserManagerCreateNestedManyWithoutUserInput
  userReportee: UserManagerCreateNestedManyWithoutManagerInput
}

input ExternalUserCreateNestedManyWithoutUserInput {
  create: [ExternalUserCreateWithoutUserInput!]
  connectOrCreate: [ExternalUserCreateOrConnectWithoutUserInput!]
  createMany: ExternalUserCreateManyUserInputEnvelope
  connect: [ExternalUserWhereUniqueInput!]
}

input ExternalUserCreateWithoutUserInput {
  department: String
  division: String
  email: String
  employeeNumber: String
  externalId: String!
  name: String
  source: CustomerIntegrationType!
  title: String
  createdAt: DateTime
  updatedAt: DateTime
  customer: CustomerCreateNestedOneWithoutExternalUsersInput!
  externalGroups: ExternalGroupMemberCreateNestedManyWithoutUserInput
}

input ExternalGroupMemberCreateNestedManyWithoutUserInput {
  create: [ExternalGroupMemberCreateWithoutUserInput!]
  connectOrCreate: [ExternalGroupMemberCreateOrConnectWithoutUserInput!]
  createMany: ExternalGroupMemberCreateManyUserInputEnvelope
  connect: [ExternalGroupMemberWhereUniqueInput!]
}

input ExternalGroupMemberCreateWithoutUserInput {
  createdAt: DateTime
  group: ExternalGroupCreateNestedOneWithoutMembersInput!
}

input ExternalGroupCreateNestedOneWithoutMembersInput {
  create: ExternalGroupCreateWithoutMembersInput
  connectOrCreate: ExternalGroupCreateOrConnectWithoutMembersInput
  connect: ExternalGroupWhereUniqueInput
}

input ExternalGroupCreateWithoutMembersInput {
  externalId: String!
  developerName: String!
  name: String
  ownerId: String
  source: CustomerIntegrationType!
  type: String
  createdAt: DateTime
  updatedAt: DateTime
  customer: CustomerCreateNestedOneWithoutExternalGroupsInput!
}

input CustomerCreateNestedOneWithoutExternalGroupsInput {
  create: CustomerCreateWithoutExternalGroupsInput
  connectOrCreate: CustomerCreateOrConnectWithoutExternalGroupsInput
  connect: CustomerWhereUniqueInput
}

input CustomerCreateWithoutExternalGroupsInput {
  name: String!
  type: CustomerType!
  favoritedAt: DateTime
  createdAt: DateTime
  updatedAt: DateTime
  oktaClientId: String
  oktaDomain: String
  oktaClientSecret: String
  oktaApiKey: String
  launch: LaunchCreateNestedManyWithoutCustomerInput
  companies: CompanyCreateNestedManyWithoutCustomerInput
  integrations: CustomerIntegrationCreateNestedManyWithoutCustomerInput
  events: EventCreateNestedManyWithoutCustomerInput
  externalUsers: ExternalUserCreateNestedManyWithoutCustomerInput
  groups: GroupCreateNestedManyWithoutCustomerInput
  notes: NoteCreateNestedManyWithoutCustomerInput
  roles: RoleCreateNestedManyWithoutCustomerInput
  salesLeads: SalesLeadCreateNestedManyWithoutCustomerInput
  syncEvents: SyncEventCreateNestedManyWithoutCustomerInput
  users: UserCreateNestedManyWithoutCustomerInput
  messageTemplate: MessageTemplateCreateNestedManyWithoutCustomerInput
  dynamicFields: DynamicUserFieldsCreateNestedManyWithoutCustomerInput
  lists: ListCreateNestedManyWithoutCustomerInput
  useCaseCollections: UseCaseCollectionsCreateNestedManyWithoutCustomerInput
  customerDataSources: DataSourcesOnCustomerCreateNestedManyWithoutCustomerInput
  dataObjectCollections: DataObjectCollectionsCreateNestedManyWithoutCustomerInput
}

input GroupCreateNestedManyWithoutCustomerInput {
  create: [GroupCreateWithoutCustomerInput!]
  connectOrCreate: [GroupCreateOrConnectWithoutCustomerInput!]
  createMany: GroupCreateManyCustomerInputEnvelope
  connect: [GroupWhereUniqueInput!]
}

input GroupCreateWithoutCustomerInput {
  name: String!
  createdAt: DateTime
  updatedAt: DateTime
  users: GroupUserCreateNestedManyWithoutGroupInput
  parent: GroupCreateNestedOneWithoutChildrenInput
  children: GroupCreateNestedManyWithoutParentInput
  noteGroupTags: NoteGroupTagsCreateNestedManyWithoutGroupInput
}

input GroupUserCreateNestedManyWithoutGroupInput {
  create: [GroupUserCreateWithoutGroupInput!]
  connectOrCreate: [GroupUserCreateOrConnectWithoutGroupInput!]
  createMany: GroupUserCreateManyGroupInputEnvelope
  connect: [GroupUserWhereUniqueInput!]
}

input GroupUserCreateWithoutGroupInput {
  dummy: Int
  user: UserCreateNestedOneWithoutGroupsInput!
}

input UserCreateNestedOneWithoutGroupsInput {
  create: UserCreateWithoutGroupsInput
  connectOrCreate: UserCreateOrConnectWithoutGroupsInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutGroupsInput {
  admin: Boolean
  email: String!
  name: String!
  passwordHash: String
  passwordSalt: String
  workPhone: String
  mobilePhone: String
  title: String
  token: String
  notificationSettings: JSON
  createdAt: DateTime
  updatedAt: DateTime
  dynamicFields: JSON
  active: Boolean
  oktaUserId: Int
  oktaManagerId: Int
  forgetPassword: String
  csmStatus: Boolean
  crmStatus: Boolean
  customer: CustomerCreateNestedOneWithoutUsersInput!
  leadSourceFor: CompanyCreateNestedManyWithoutLeadSourceInput
  primaryContactFor: CompanyCreateNestedManyWithoutPrimaryContactInput
  starred: CompanyStarredCreateNestedManyWithoutUserInput
  externalUser: ExternalUserCreateNestedManyWithoutUserInput
  Note: NoteCreateNestedManyWithoutUserInput
  roles: UserRoleCreateNestedManyWithoutUserInput
  userEvents: UserEventsCreateNestedManyWithoutUserInput
  UserCompanyRatings: UserCompanyRatingsCreateNestedManyWithoutUserInput
  noteUserTags: NoteUserTagsCreateNestedManyWithoutUserInput
  messageTemplate: MessageTemplateCreateNestedManyWithoutUserInput
  Feedback: FeedbackCreateNestedManyWithoutUserInput
  references: ReferenceCreateNestedManyWithoutUserInput
  userManager: UserManagerCreateNestedManyWithoutUserInput
  userReportee: UserManagerCreateNestedManyWithoutManagerInput
}

input NoteCreateNestedManyWithoutUserInput {
  create: [NoteCreateWithoutUserInput!]
  connectOrCreate: [NoteCreateOrConnectWithoutUserInput!]
  createMany: NoteCreateManyUserInputEnvelope
  connect: [NoteWhereUniqueInput!]
}

input NoteCreateWithoutUserInput {
  readAt: DateTime
  flaggedAt: DateTime
  subject: String!
  text: String!
  allCanView: Boolean
  createdAt: DateTime
  updatedAt: DateTime
  delta: JSON
  company: CompanyCreateNestedOneWithoutNotesInput
  customer: CustomerCreateNestedOneWithoutNotesInput
  events: EventCreateNestedOneWithoutNotesInput
  noteUserTags: NoteUserTagsCreateNestedManyWithoutNoteInput
  noteGroupTags: NoteGroupTagsCreateNestedManyWithoutNoteInput
  Event: EventCreateNestedManyWithoutMessageInput
}

input EventCreateNestedOneWithoutNotesInput {
  create: EventCreateWithoutNotesInput
  connectOrCreate: EventCreateOrConnectWithoutNotesInput
  connect: EventWhereUniqueInput
}

input EventCreateWithoutNotesInput {
  data: JSON
  notifiedAt: DateTime
  text: String
  type: EventType!
  needsAttention: EventAttention
  createdAt: DateTime
  company: CompanyCreateNestedOneWithoutEventsInput
  customer: CustomerCreateNestedOneWithoutEventsInput!
  Launch: LaunchCreateNestedManyWithoutEventsInput
  userEvents: UserEventsCreateNestedManyWithoutEventInput
  parentEvent: EventCreateNestedOneWithoutChildEventsInput
  childEvents: EventCreateNestedManyWithoutParentEventInput
  message: NoteCreateNestedOneWithoutEventInput
}

input LaunchCreateNestedManyWithoutEventsInput {
  create: [LaunchCreateWithoutEventsInput!]
  connectOrCreate: [LaunchCreateOrConnectWithoutEventsInput!]
  createMany: LaunchCreateManyEventsInputEnvelope
  connect: [LaunchWhereUniqueInput!]
}

input LaunchCreateWithoutEventsInput {
  createdAt: DateTime
  sendToAddress: String
  subject: String!
  text: String!
  delta: JSON
  company: CompanyCreateNestedOneWithoutLaunchInput!
  messageTempate: MessageTemplateCreateNestedOneWithoutLaunchInput
  launchContacts: LaunchContactsCreateNestedManyWithoutLaunchInput
  Customer: CustomerCreateNestedOneWithoutLaunchInput
}

input MessageTemplateCreateNestedOneWithoutLaunchInput {
  create: MessageTemplateCreateWithoutLaunchInput
  connectOrCreate: MessageTemplateCreateOrConnectWithoutLaunchInput
  connect: MessageTemplateWhereUniqueInput
}

input MessageTemplateCreateWithoutLaunchInput {
  eventType: EventType!
  companyType: CompanyType!
  messageType: MessageType!
  sendToAddress: String
  title: String
  subject: String!
  text: String!
  delta: JSON
  createdAt: DateTime
  updatedAt: DateTime
  customer: CustomerCreateNestedOneWithoutMessageTemplateInput!
  user: UserCreateNestedOneWithoutMessageTemplateInput!
}

input CustomerCreateNestedOneWithoutMessageTemplateInput {
  create: CustomerCreateWithoutMessageTemplateInput
  connectOrCreate: CustomerCreateOrConnectWithoutMessageTemplateInput
  connect: CustomerWhereUniqueInput
}

input CustomerCreateWithoutMessageTemplateInput {
  name: String!
  type: CustomerType!
  favoritedAt: DateTime
  createdAt: DateTime
  updatedAt: DateTime
  oktaClientId: String
  oktaDomain: String
  oktaClientSecret: String
  oktaApiKey: String
  launch: LaunchCreateNestedManyWithoutCustomerInput
  companies: CompanyCreateNestedManyWithoutCustomerInput
  integrations: CustomerIntegrationCreateNestedManyWithoutCustomerInput
  events: EventCreateNestedManyWithoutCustomerInput
  externalGroups: ExternalGroupCreateNestedManyWithoutCustomerInput
  externalUsers: ExternalUserCreateNestedManyWithoutCustomerInput
  groups: GroupCreateNestedManyWithoutCustomerInput
  notes: NoteCreateNestedManyWithoutCustomerInput
  roles: RoleCreateNestedManyWithoutCustomerInput
  salesLeads: SalesLeadCreateNestedManyWithoutCustomerInput
  syncEvents: SyncEventCreateNestedManyWithoutCustomerInput
  users: UserCreateNestedManyWithoutCustomerInput
  dynamicFields: DynamicUserFieldsCreateNestedManyWithoutCustomerInput
  lists: ListCreateNestedManyWithoutCustomerInput
  useCaseCollections: UseCaseCollectionsCreateNestedManyWithoutCustomerInput
  customerDataSources: DataSourcesOnCustomerCreateNestedManyWithoutCustomerInput
  dataObjectCollections: DataObjectCollectionsCreateNestedManyWithoutCustomerInput
}

input NoteCreateNestedManyWithoutCustomerInput {
  create: [NoteCreateWithoutCustomerInput!]
  connectOrCreate: [NoteCreateOrConnectWithoutCustomerInput!]
  createMany: NoteCreateManyCustomerInputEnvelope
  connect: [NoteWhereUniqueInput!]
}

input NoteCreateWithoutCustomerInput {
  readAt: DateTime
  flaggedAt: DateTime
  subject: String!
  text: String!
  allCanView: Boolean
  createdAt: DateTime
  updatedAt: DateTime
  delta: JSON
  company: CompanyCreateNestedOneWithoutNotesInput
  events: EventCreateNestedOneWithoutNotesInput
  user: UserCreateNestedOneWithoutNoteInput
  noteUserTags: NoteUserTagsCreateNestedManyWithoutNoteInput
  noteGroupTags: NoteGroupTagsCreateNestedManyWithoutNoteInput
  Event: EventCreateNestedManyWithoutMessageInput
}

input UserCreateNestedOneWithoutNoteInput {
  create: UserCreateWithoutNoteInput
  connectOrCreate: UserCreateOrConnectWithoutNoteInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutNoteInput {
  admin: Boolean
  email: String!
  name: String!
  passwordHash: String
  passwordSalt: String
  workPhone: String
  mobilePhone: String
  title: String
  token: String
  notificationSettings: JSON
  createdAt: DateTime
  updatedAt: DateTime
  dynamicFields: JSON
  active: Boolean
  oktaUserId: Int
  oktaManagerId: Int
  forgetPassword: String
  csmStatus: Boolean
  crmStatus: Boolean
  customer: CustomerCreateNestedOneWithoutUsersInput!
  leadSourceFor: CompanyCreateNestedManyWithoutLeadSourceInput
  primaryContactFor: CompanyCreateNestedManyWithoutPrimaryContactInput
  starred: CompanyStarredCreateNestedManyWithoutUserInput
  externalUser: ExternalUserCreateNestedManyWithoutUserInput
  groups: GroupUserCreateNestedManyWithoutUserInput
  roles: UserRoleCreateNestedManyWithoutUserInput
  userEvents: UserEventsCreateNestedManyWithoutUserInput
  UserCompanyRatings: UserCompanyRatingsCreateNestedManyWithoutUserInput
  noteUserTags: NoteUserTagsCreateNestedManyWithoutUserInput
  messageTemplate: MessageTemplateCreateNestedManyWithoutUserInput
  Feedback: FeedbackCreateNestedManyWithoutUserInput
  references: ReferenceCreateNestedManyWithoutUserInput
  userManager: UserManagerCreateNestedManyWithoutUserInput
  userReportee: UserManagerCreateNestedManyWithoutManagerInput
}

input GroupUserCreateNestedManyWithoutUserInput {
  create: [GroupUserCreateWithoutUserInput!]
  connectOrCreate: [GroupUserCreateOrConnectWithoutUserInput!]
  createMany: GroupUserCreateManyUserInputEnvelope
  connect: [GroupUserWhereUniqueInput!]
}

input GroupUserCreateWithoutUserInput {
  dummy: Int
  group: GroupCreateNestedOneWithoutUsersInput!
}

input GroupCreateNestedOneWithoutUsersInput {
  create: GroupCreateWithoutUsersInput
  connectOrCreate: GroupCreateOrConnectWithoutUsersInput
  connect: GroupWhereUniqueInput
}

input GroupCreateWithoutUsersInput {
  name: String!
  createdAt: DateTime
  updatedAt: DateTime
  customer: CustomerCreateNestedOneWithoutGroupsInput!
  parent: GroupCreateNestedOneWithoutChildrenInput
  children: GroupCreateNestedManyWithoutParentInput
  noteGroupTags: NoteGroupTagsCreateNestedManyWithoutGroupInput
}

input CustomerCreateNestedOneWithoutGroupsInput {
  create: CustomerCreateWithoutGroupsInput
  connectOrCreate: CustomerCreateOrConnectWithoutGroupsInput
  connect: CustomerWhereUniqueInput
}

input CustomerCreateWithoutGroupsInput {
  name: String!
  type: CustomerType!
  favoritedAt: DateTime
  createdAt: DateTime
  updatedAt: DateTime
  oktaClientId: String
  oktaDomain: String
  oktaClientSecret: String
  oktaApiKey: String
  launch: LaunchCreateNestedManyWithoutCustomerInput
  companies: CompanyCreateNestedManyWithoutCustomerInput
  integrations: CustomerIntegrationCreateNestedManyWithoutCustomerInput
  events: EventCreateNestedManyWithoutCustomerInput
  externalGroups: ExternalGroupCreateNestedManyWithoutCustomerInput
  externalUsers: ExternalUserCreateNestedManyWithoutCustomerInput
  notes: NoteCreateNestedManyWithoutCustomerInput
  roles: RoleCreateNestedManyWithoutCustomerInput
  salesLeads: SalesLeadCreateNestedManyWithoutCustomerInput
  syncEvents: SyncEventCreateNestedManyWithoutCustomerInput
  users: UserCreateNestedManyWithoutCustomerInput
  messageTemplate: MessageTemplateCreateNestedManyWithoutCustomerInput
  dynamicFields: DynamicUserFieldsCreateNestedManyWithoutCustomerInput
  lists: ListCreateNestedManyWithoutCustomerInput
  useCaseCollections: UseCaseCollectionsCreateNestedManyWithoutCustomerInput
  customerDataSources: DataSourcesOnCustomerCreateNestedManyWithoutCustomerInput
  dataObjectCollections: DataObjectCollectionsCreateNestedManyWithoutCustomerInput
}

input RoleCreateNestedManyWithoutCustomerInput {
  create: [RoleCreateWithoutCustomerInput!]
  connectOrCreate: [RoleCreateOrConnectWithoutCustomerInput!]
  createMany: RoleCreateManyCustomerInputEnvelope
  connect: [RoleWhereUniqueInput!]
}

input RoleCreateWithoutCustomerInput {
  name: String!
  createdAt: DateTime
  updatedAt: DateTime
  capabilities: RoleCreatecapabilitiesInput
  userRoles: UserRoleCreateNestedManyWithoutRoleInput
}

input RoleCreatecapabilitiesInput {
  set: [Int!]!
}

input UserRoleCreateNestedManyWithoutRoleInput {
  create: [UserRoleCreateWithoutRoleInput!]
  connectOrCreate: [UserRoleCreateOrConnectWithoutRoleInput!]
  createMany: UserRoleCreateManyRoleInputEnvelope
  connect: [UserRoleWhereUniqueInput!]
}

input UserRoleCreateWithoutRoleInput {
  createdAt: DateTime
  user: UserCreateNestedOneWithoutRolesInput!
}

input UserCreateNestedOneWithoutRolesInput {
  create: UserCreateWithoutRolesInput
  connectOrCreate: UserCreateOrConnectWithoutRolesInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutRolesInput {
  admin: Boolean
  email: String!
  name: String!
  passwordHash: String
  passwordSalt: String
  workPhone: String
  mobilePhone: String
  title: String
  token: String
  notificationSettings: JSON
  createdAt: DateTime
  updatedAt: DateTime
  dynamicFields: JSON
  active: Boolean
  oktaUserId: Int
  oktaManagerId: Int
  forgetPassword: String
  csmStatus: Boolean
  crmStatus: Boolean
  customer: CustomerCreateNestedOneWithoutUsersInput!
  leadSourceFor: CompanyCreateNestedManyWithoutLeadSourceInput
  primaryContactFor: CompanyCreateNestedManyWithoutPrimaryContactInput
  starred: CompanyStarredCreateNestedManyWithoutUserInput
  externalUser: ExternalUserCreateNestedManyWithoutUserInput
  groups: GroupUserCreateNestedManyWithoutUserInput
  Note: NoteCreateNestedManyWithoutUserInput
  userEvents: UserEventsCreateNestedManyWithoutUserInput
  UserCompanyRatings: UserCompanyRatingsCreateNestedManyWithoutUserInput
  noteUserTags: NoteUserTagsCreateNestedManyWithoutUserInput
  messageTemplate: MessageTemplateCreateNestedManyWithoutUserInput
  Feedback: FeedbackCreateNestedManyWithoutUserInput
  references: ReferenceCreateNestedManyWithoutUserInput
  userManager: UserManagerCreateNestedManyWithoutUserInput
  userReportee: UserManagerCreateNestedManyWithoutManagerInput
}

input UserEventsCreateNestedManyWithoutUserInput {
  create: [UserEventsCreateWithoutUserInput!]
  connectOrCreate: [UserEventsCreateOrConnectWithoutUserInput!]
  createMany: UserEventsCreateManyUserInputEnvelope
  connect: [UserEventsWhereUniqueInput!]
}

input UserEventsCreateWithoutUserInput {
  readAt: DateTime
  flaggedAt: Int
  hideAt: DateTime
  createdAt: DateTime
  event: EventCreateNestedOneWithoutUserEventsInput!
}

input EventCreateNestedOneWithoutUserEventsInput {
  create: EventCreateWithoutUserEventsInput
  connectOrCreate: EventCreateOrConnectWithoutUserEventsInput
  connect: EventWhereUniqueInput
}

input EventCreateWithoutUserEventsInput {
  data: JSON
  notifiedAt: DateTime
  text: String
  type: EventType!
  needsAttention: EventAttention
  createdAt: DateTime
  company: CompanyCreateNestedOneWithoutEventsInput
  customer: CustomerCreateNestedOneWithoutEventsInput!
  Launch: LaunchCreateNestedManyWithoutEventsInput
  notes: NoteCreateNestedManyWithoutEventsInput
  parentEvent: EventCreateNestedOneWithoutChildEventsInput
  childEvents: EventCreateNestedManyWithoutParentEventInput
  message: NoteCreateNestedOneWithoutEventInput
}

input EventCreateNestedOneWithoutChildEventsInput {
  create: EventCreateWithoutChildEventsInput
  connectOrCreate: EventCreateOrConnectWithoutChildEventsInput
  connect: EventWhereUniqueInput
}

input EventCreateWithoutChildEventsInput {
  data: JSON
  notifiedAt: DateTime
  text: String
  type: EventType!
  needsAttention: EventAttention
  createdAt: DateTime
  company: CompanyCreateNestedOneWithoutEventsInput
  customer: CustomerCreateNestedOneWithoutEventsInput!
  Launch: LaunchCreateNestedManyWithoutEventsInput
  notes: NoteCreateNestedManyWithoutEventsInput
  userEvents: UserEventsCreateNestedManyWithoutEventInput
  parentEvent: EventCreateNestedOneWithoutChildEventsInput
  message: NoteCreateNestedOneWithoutEventInput
}

input UserEventsCreateNestedManyWithoutEventInput {
  create: [UserEventsCreateWithoutEventInput!]
  connectOrCreate: [UserEventsCreateOrConnectWithoutEventInput!]
  createMany: UserEventsCreateManyEventInputEnvelope
  connect: [UserEventsWhereUniqueInput!]
}

input UserEventsCreateWithoutEventInput {
  readAt: DateTime
  flaggedAt: Int
  hideAt: DateTime
  createdAt: DateTime
  user: UserCreateNestedOneWithoutUserEventsInput!
}

input UserCreateNestedOneWithoutUserEventsInput {
  create: UserCreateWithoutUserEventsInput
  connectOrCreate: UserCreateOrConnectWithoutUserEventsInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutUserEventsInput {
  admin: Boolean
  email: String!
  name: String!
  passwordHash: String
  passwordSalt: String
  workPhone: String
  mobilePhone: String
  title: String
  token: String
  notificationSettings: JSON
  createdAt: DateTime
  updatedAt: DateTime
  dynamicFields: JSON
  active: Boolean
  oktaUserId: Int
  oktaManagerId: Int
  forgetPassword: String
  csmStatus: Boolean
  crmStatus: Boolean
  customer: CustomerCreateNestedOneWithoutUsersInput!
  leadSourceFor: CompanyCreateNestedManyWithoutLeadSourceInput
  primaryContactFor: CompanyCreateNestedManyWithoutPrimaryContactInput
  starred: CompanyStarredCreateNestedManyWithoutUserInput
  externalUser: ExternalUserCreateNestedManyWithoutUserInput
  groups: GroupUserCreateNestedManyWithoutUserInput
  Note: NoteCreateNestedManyWithoutUserInput
  roles: UserRoleCreateNestedManyWithoutUserInput
  UserCompanyRatings: UserCompanyRatingsCreateNestedManyWithoutUserInput
  noteUserTags: NoteUserTagsCreateNestedManyWithoutUserInput
  messageTemplate: MessageTemplateCreateNestedManyWithoutUserInput
  Feedback: FeedbackCreateNestedManyWithoutUserInput
  references: ReferenceCreateNestedManyWithoutUserInput
  userManager: UserManagerCreateNestedManyWithoutUserInput
  userReportee: UserManagerCreateNestedManyWithoutManagerInput
}

input UserRoleCreateNestedManyWithoutUserInput {
  create: [UserRoleCreateWithoutUserInput!]
  connectOrCreate: [UserRoleCreateOrConnectWithoutUserInput!]
  createMany: UserRoleCreateManyUserInputEnvelope
  connect: [UserRoleWhereUniqueInput!]
}

input UserRoleCreateWithoutUserInput {
  createdAt: DateTime
  role: RoleCreateNestedOneWithoutUserRolesInput!
}

input RoleCreateNestedOneWithoutUserRolesInput {
  create: RoleCreateWithoutUserRolesInput
  connectOrCreate: RoleCreateOrConnectWithoutUserRolesInput
  connect: RoleWhereUniqueInput
}

input RoleCreateWithoutUserRolesInput {
  name: String!
  createdAt: DateTime
  updatedAt: DateTime
  capabilities: RoleCreatecapabilitiesInput
  customer: CustomerCreateNestedOneWithoutRolesInput!
}

input CustomerCreateNestedOneWithoutRolesInput {
  create: CustomerCreateWithoutRolesInput
  connectOrCreate: CustomerCreateOrConnectWithoutRolesInput
  connect: CustomerWhereUniqueInput
}

input CustomerCreateWithoutRolesInput {
  name: String!
  type: CustomerType!
  favoritedAt: DateTime
  createdAt: DateTime
  updatedAt: DateTime
  oktaClientId: String
  oktaDomain: String
  oktaClientSecret: String
  oktaApiKey: String
  launch: LaunchCreateNestedManyWithoutCustomerInput
  companies: CompanyCreateNestedManyWithoutCustomerInput
  integrations: CustomerIntegrationCreateNestedManyWithoutCustomerInput
  events: EventCreateNestedManyWithoutCustomerInput
  externalGroups: ExternalGroupCreateNestedManyWithoutCustomerInput
  externalUsers: ExternalUserCreateNestedManyWithoutCustomerInput
  groups: GroupCreateNestedManyWithoutCustomerInput
  notes: NoteCreateNestedManyWithoutCustomerInput
  salesLeads: SalesLeadCreateNestedManyWithoutCustomerInput
  syncEvents: SyncEventCreateNestedManyWithoutCustomerInput
  users: UserCreateNestedManyWithoutCustomerInput
  messageTemplate: MessageTemplateCreateNestedManyWithoutCustomerInput
  dynamicFields: DynamicUserFieldsCreateNestedManyWithoutCustomerInput
  lists: ListCreateNestedManyWithoutCustomerInput
  useCaseCollections: UseCaseCollectionsCreateNestedManyWithoutCustomerInput
  customerDataSources: DataSourcesOnCustomerCreateNestedManyWithoutCustomerInput
  dataObjectCollections: DataObjectCollectionsCreateNestedManyWithoutCustomerInput
}

input SalesLeadCreateNestedManyWithoutCustomerInput {
  create: [SalesLeadCreateWithoutCustomerInput!]
  connectOrCreate: [SalesLeadCreateOrConnectWithoutCustomerInput!]
  createMany: SalesLeadCreateManyCustomerInputEnvelope
  connect: [SalesLeadWhereUniqueInput!]
}

input SalesLeadCreateWithoutCustomerInput {
  company: String!
  description: String
  email: String
  name: String!
  processedAt: DateTime
  source: String!
  status: String!
  createdAt: DateTime
  updatedAt: DateTime
}

input SalesLeadCreateOrConnectWithoutCustomerInput {
  where: SalesLeadWhereUniqueInput!
  create: SalesLeadCreateWithoutCustomerInput!
}

input SalesLeadCreateManyCustomerInputEnvelope {
  data: [SalesLeadCreateManyCustomerInput!]!
  skipDuplicates: Boolean
}

input SalesLeadCreateManyCustomerInput {
  id: Int
  company: String!
  description: String
  email: String
  name: String!
  processedAt: DateTime
  source: String!
  status: String!
  createdAt: DateTime
  updatedAt: DateTime
}

input SyncEventCreateNestedManyWithoutCustomerInput {
  create: [SyncEventCreateWithoutCustomerInput!]
  connectOrCreate: [SyncEventCreateOrConnectWithoutCustomerInput!]
  createMany: SyncEventCreateManyCustomerInputEnvelope
  connect: [SyncEventWhereUniqueInput!]
}

input SyncEventCreateWithoutCustomerInput {
  completedAt: DateTime
  entityType: SyncEventEntityType!
  recordsCreated: Int
  recordsDeleted: Int
  recordsUpdated: Int
  replayId: String
  startedAt: DateTime
  type: SyncEventType!
}

input SyncEventCreateOrConnectWithoutCustomerInput {
  where: SyncEventWhereUniqueInput!
  create: SyncEventCreateWithoutCustomerInput!
}

input SyncEventCreateManyCustomerInputEnvelope {
  data: [SyncEventCreateManyCustomerInput!]!
  skipDuplicates: Boolean
}

input SyncEventCreateManyCustomerInput {
  id: Int
  completedAt: DateTime
  entityType: SyncEventEntityType!
  recordsCreated: Int
  recordsDeleted: Int
  recordsUpdated: Int
  replayId: String
  startedAt: DateTime
  type: SyncEventType!
}

input UserCreateNestedManyWithoutCustomerInput {
  create: [UserCreateWithoutCustomerInput!]
  connectOrCreate: [UserCreateOrConnectWithoutCustomerInput!]
  createMany: UserCreateManyCustomerInputEnvelope
  connect: [UserWhereUniqueInput!]
}

input UserCreateWithoutCustomerInput {
  admin: Boolean
  email: String!
  name: String!
  passwordHash: String
  passwordSalt: String
  workPhone: String
  mobilePhone: String
  title: String
  token: String
  notificationSettings: JSON
  createdAt: DateTime
  updatedAt: DateTime
  dynamicFields: JSON
  active: Boolean
  oktaUserId: Int
  oktaManagerId: Int
  forgetPassword: String
  csmStatus: Boolean
  crmStatus: Boolean
  leadSourceFor: CompanyCreateNestedManyWithoutLeadSourceInput
  primaryContactFor: CompanyCreateNestedManyWithoutPrimaryContactInput
  starred: CompanyStarredCreateNestedManyWithoutUserInput
  externalUser: ExternalUserCreateNestedManyWithoutUserInput
  groups: GroupUserCreateNestedManyWithoutUserInput
  Note: NoteCreateNestedManyWithoutUserInput
  roles: UserRoleCreateNestedManyWithoutUserInput
  userEvents: UserEventsCreateNestedManyWithoutUserInput
  UserCompanyRatings: UserCompanyRatingsCreateNestedManyWithoutUserInput
  noteUserTags: NoteUserTagsCreateNestedManyWithoutUserInput
  messageTemplate: MessageTemplateCreateNestedManyWithoutUserInput
  Feedback: FeedbackCreateNestedManyWithoutUserInput
  references: ReferenceCreateNestedManyWithoutUserInput
  userManager: UserManagerCreateNestedManyWithoutUserInput
  userReportee: UserManagerCreateNestedManyWithoutManagerInput
}

input UserCompanyRatingsCreateNestedManyWithoutUserInput {
  create: [UserCompanyRatingsCreateWithoutUserInput!]
  connectOrCreate: [UserCompanyRatingsCreateOrConnectWithoutUserInput!]
  createMany: UserCompanyRatingsCreateManyUserInputEnvelope
  connect: [UserCompanyRatingsWhereUniqueInput!]
}

input UserCompanyRatingsCreateWithoutUserInput {
  createdAt: DateTime
  updatedAt: DateTime
  rating: RatingCreateNestedOneWithoutUserratingcompanyInput!
  company: CompanyCreateNestedOneWithoutUserCompanyRatingsInput!
}

input RatingCreateNestedOneWithoutUserratingcompanyInput {
  create: RatingCreateWithoutUserratingcompanyInput
  connectOrCreate: RatingCreateOrConnectWithoutUserratingcompanyInput
  connect: RatingWhereUniqueInput
}

input RatingCreateWithoutUserratingcompanyInput {
  status: RatingStatus!
  createdAt: DateTime
  updatedAt: DateTime
}

input RatingCreateOrConnectWithoutUserratingcompanyInput {
  where: RatingWhereUniqueInput!
  create: RatingCreateWithoutUserratingcompanyInput!
}

input CompanyCreateNestedOneWithoutUserCompanyRatingsInput {
  create: CompanyCreateWithoutUserCompanyRatingsInput
  connectOrCreate: CompanyCreateOrConnectWithoutUserCompanyRatingsInput
  connect: CompanyWhereUniqueInput
}

input CompanyCreateWithoutUserCompanyRatingsInput {
  annualRecurringRevenue: Int
  expectedToCloseAt: DateTime
  fiscalYearStartMonth: Int
  name: String!
  companyType: CompanyType!
  seatSize: Int
  createdAt: DateTime
  updatedAt: DateTime
  fiscalYear: Int
  renewalDate: DateTime
  referredOn: DateTime
  latestReferenceId: Int
  customer: CustomerCreateNestedOneWithoutCompaniesInput!
  leadSource: UserCreateNestedOneWithoutLeadSourceForInput
  companyParent: CompanyCreateNestedOneWithoutSubsidiaryInput
  primaryContact: UserCreateNestedOneWithoutPrimaryContactForInput
  references: ReferenceCreateNestedManyWithoutCompanyInput
  referencesServedFor: ReferenceCreateNestedManyWithoutServedAsReferenceForInput
  subsidiary: CompanyCreateNestedManyWithoutCompanyParentInput
  starredBy: CompanyStarredCreateNestedManyWithoutCompanyInput
  events: EventCreateNestedManyWithoutCompanyInput
  notes: NoteCreateNestedManyWithoutCompanyInput
  account: AccountCreateNestedOneWithoutCompanyInput!
  competitors: CompetitorCreateNestedManyWithoutCompanyInput
  products: ProductCreateNestedManyWithoutCompanyInput
  contacts: ContactsCreateNestedManyWithoutCompanyInput
  listCompanies: ListCompanyCreateNestedManyWithoutCompanyInput
  Launch: LaunchCreateNestedManyWithoutCompanyInput
}

input ListCompanyCreateNestedManyWithoutCompanyInput {
  create: [ListCompanyCreateWithoutCompanyInput!]
  connectOrCreate: [ListCompanyCreateOrConnectWithoutCompanyInput!]
  createMany: ListCompanyCreateManyCompanyInputEnvelope
  connect: [ListCompanyWhereUniqueInput!]
}

input ListCompanyCreateWithoutCompanyInput {
  createdAt: DateTime
  updatedAt: DateTime
  list: ListCreateNestedOneWithoutListCompaniesInput!
}

input ListCreateNestedOneWithoutListCompaniesInput {
  create: ListCreateWithoutListCompaniesInput
  connectOrCreate: ListCreateOrConnectWithoutListCompaniesInput
  connect: ListWhereUniqueInput
}

input ListCreateWithoutListCompaniesInput {
  name: String!
  createdAt: DateTime
  updatedAt: DateTime
  customer: CustomerCreateNestedOneWithoutListsInput!
  parent: ListCreateNestedOneWithoutChildrenInput
  children: ListCreateNestedManyWithoutParentInput
}

input CustomerCreateNestedOneWithoutListsInput {
  create: CustomerCreateWithoutListsInput
  connectOrCreate: CustomerCreateOrConnectWithoutListsInput
  connect: CustomerWhereUniqueInput
}

input CustomerCreateWithoutListsInput {
  name: String!
  type: CustomerType!
  favoritedAt: DateTime
  createdAt: DateTime
  updatedAt: DateTime
  oktaClientId: String
  oktaDomain: String
  oktaClientSecret: String
  oktaApiKey: String
  launch: LaunchCreateNestedManyWithoutCustomerInput
  companies: CompanyCreateNestedManyWithoutCustomerInput
  integrations: CustomerIntegrationCreateNestedManyWithoutCustomerInput
  events: EventCreateNestedManyWithoutCustomerInput
  externalGroups: ExternalGroupCreateNestedManyWithoutCustomerInput
  externalUsers: ExternalUserCreateNestedManyWithoutCustomerInput
  groups: GroupCreateNestedManyWithoutCustomerInput
  notes: NoteCreateNestedManyWithoutCustomerInput
  roles: RoleCreateNestedManyWithoutCustomerInput
  salesLeads: SalesLeadCreateNestedManyWithoutCustomerInput
  syncEvents: SyncEventCreateNestedManyWithoutCustomerInput
  users: UserCreateNestedManyWithoutCustomerInput
  messageTemplate: MessageTemplateCreateNestedManyWithoutCustomerInput
  dynamicFields: DynamicUserFieldsCreateNestedManyWithoutCustomerInput
  useCaseCollections: UseCaseCollectionsCreateNestedManyWithoutCustomerInput
  customerDataSources: DataSourcesOnCustomerCreateNestedManyWithoutCustomerInput
  dataObjectCollections: DataObjectCollectionsCreateNestedManyWithoutCustomerInput
}

input MessageTemplateCreateNestedManyWithoutCustomerInput {
  create: [MessageTemplateCreateWithoutCustomerInput!]
  connectOrCreate: [MessageTemplateCreateOrConnectWithoutCustomerInput!]
  createMany: MessageTemplateCreateManyCustomerInputEnvelope
  connect: [MessageTemplateWhereUniqueInput!]
}

input MessageTemplateCreateWithoutCustomerInput {
  eventType: EventType!
  companyType: CompanyType!
  messageType: MessageType!
  sendToAddress: String
  title: String
  subject: String!
  text: String!
  delta: JSON
  createdAt: DateTime
  updatedAt: DateTime
  user: UserCreateNestedOneWithoutMessageTemplateInput!
  launch: LaunchCreateNestedManyWithoutMessageTempateInput
}

input UserCreateNestedOneWithoutMessageTemplateInput {
  create: UserCreateWithoutMessageTemplateInput
  connectOrCreate: UserCreateOrConnectWithoutMessageTemplateInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutMessageTemplateInput {
  admin: Boolean
  email: String!
  name: String!
  passwordHash: String
  passwordSalt: String
  workPhone: String
  mobilePhone: String
  title: String
  token: String
  notificationSettings: JSON
  createdAt: DateTime
  updatedAt: DateTime
  dynamicFields: JSON
  active: Boolean
  oktaUserId: Int
  oktaManagerId: Int
  forgetPassword: String
  csmStatus: Boolean
  crmStatus: Boolean
  customer: CustomerCreateNestedOneWithoutUsersInput!
  leadSourceFor: CompanyCreateNestedManyWithoutLeadSourceInput
  primaryContactFor: CompanyCreateNestedManyWithoutPrimaryContactInput
  starred: CompanyStarredCreateNestedManyWithoutUserInput
  externalUser: ExternalUserCreateNestedManyWithoutUserInput
  groups: GroupUserCreateNestedManyWithoutUserInput
  Note: NoteCreateNestedManyWithoutUserInput
  roles: UserRoleCreateNestedManyWithoutUserInput
  userEvents: UserEventsCreateNestedManyWithoutUserInput
  UserCompanyRatings: UserCompanyRatingsCreateNestedManyWithoutUserInput
  noteUserTags: NoteUserTagsCreateNestedManyWithoutUserInput
  Feedback: FeedbackCreateNestedManyWithoutUserInput
  references: ReferenceCreateNestedManyWithoutUserInput
  userManager: UserManagerCreateNestedManyWithoutUserInput
  userReportee: UserManagerCreateNestedManyWithoutManagerInput
}

input NoteUserTagsCreateNestedManyWithoutUserInput {
  create: [NoteUserTagsCreateWithoutUserInput!]
  connectOrCreate: [NoteUserTagsCreateOrConnectWithoutUserInput!]
  createMany: NoteUserTagsCreateManyUserInputEnvelope
  connect: [NoteUserTagsWhereUniqueInput!]
}

input NoteUserTagsCreateWithoutUserInput {
  createdAt: DateTime
  note: NoteCreateNestedOneWithoutNoteUserTagsInput!
}

input NoteCreateNestedOneWithoutNoteUserTagsInput {
  create: NoteCreateWithoutNoteUserTagsInput
  connectOrCreate: NoteCreateOrConnectWithoutNoteUserTagsInput
  connect: NoteWhereUniqueInput
}

input NoteCreateWithoutNoteUserTagsInput {
  readAt: DateTime
  flaggedAt: DateTime
  subject: String!
  text: String!
  allCanView: Boolean
  createdAt: DateTime
  updatedAt: DateTime
  delta: JSON
  company: CompanyCreateNestedOneWithoutNotesInput
  customer: CustomerCreateNestedOneWithoutNotesInput
  events: EventCreateNestedOneWithoutNotesInput
  user: UserCreateNestedOneWithoutNoteInput
  noteGroupTags: NoteGroupTagsCreateNestedManyWithoutNoteInput
  Event: EventCreateNestedManyWithoutMessageInput
}

input NoteGroupTagsCreateNestedManyWithoutNoteInput {
  create: [NoteGroupTagsCreateWithoutNoteInput!]
  connectOrCreate: [NoteGroupTagsCreateOrConnectWithoutNoteInput!]
  createMany: NoteGroupTagsCreateManyNoteInputEnvelope
  connect: [NoteGroupTagsWhereUniqueInput!]
}

input NoteGroupTagsCreateWithoutNoteInput {
  createdAt: DateTime
  group: GroupCreateNestedOneWithoutNoteGroupTagsInput!
}

input GroupCreateNestedOneWithoutNoteGroupTagsInput {
  create: GroupCreateWithoutNoteGroupTagsInput
  connectOrCreate: GroupCreateOrConnectWithoutNoteGroupTagsInput
  connect: GroupWhereUniqueInput
}

input GroupCreateWithoutNoteGroupTagsInput {
  name: String!
  createdAt: DateTime
  updatedAt: DateTime
  customer: CustomerCreateNestedOneWithoutGroupsInput!
  users: GroupUserCreateNestedManyWithoutGroupInput
  parent: GroupCreateNestedOneWithoutChildrenInput
  children: GroupCreateNestedManyWithoutParentInput
}

input GroupCreateNestedOneWithoutChildrenInput {
  create: GroupCreateWithoutChildrenInput
  connectOrCreate: GroupCreateOrConnectWithoutChildrenInput
  connect: GroupWhereUniqueInput
}

input GroupCreateWithoutChildrenInput {
  name: String!
  createdAt: DateTime
  updatedAt: DateTime
  customer: CustomerCreateNestedOneWithoutGroupsInput!
  users: GroupUserCreateNestedManyWithoutGroupInput
  parent: GroupCreateNestedOneWithoutChildrenInput
  noteGroupTags: NoteGroupTagsCreateNestedManyWithoutGroupInput
}

input NoteGroupTagsCreateNestedManyWithoutGroupInput {
  create: [NoteGroupTagsCreateWithoutGroupInput!]
  connectOrCreate: [NoteGroupTagsCreateOrConnectWithoutGroupInput!]
  createMany: NoteGroupTagsCreateManyGroupInputEnvelope
  connect: [NoteGroupTagsWhereUniqueInput!]
}

input NoteGroupTagsCreateWithoutGroupInput {
  createdAt: DateTime
  note: NoteCreateNestedOneWithoutNoteGroupTagsInput!
}

input NoteCreateNestedOneWithoutNoteGroupTagsInput {
  create: NoteCreateWithoutNoteGroupTagsInput
  connectOrCreate: NoteCreateOrConnectWithoutNoteGroupTagsInput
  connect: NoteWhereUniqueInput
}

input NoteCreateWithoutNoteGroupTagsInput {
  readAt: DateTime
  flaggedAt: DateTime
  subject: String!
  text: String!
  allCanView: Boolean
  createdAt: DateTime
  updatedAt: DateTime
  delta: JSON
  company: CompanyCreateNestedOneWithoutNotesInput
  customer: CustomerCreateNestedOneWithoutNotesInput
  events: EventCreateNestedOneWithoutNotesInput
  user: UserCreateNestedOneWithoutNoteInput
  noteUserTags: NoteUserTagsCreateNestedManyWithoutNoteInput
  Event: EventCreateNestedManyWithoutMessageInput
}

input NoteUserTagsCreateNestedManyWithoutNoteInput {
  create: [NoteUserTagsCreateWithoutNoteInput!]
  connectOrCreate: [NoteUserTagsCreateOrConnectWithoutNoteInput!]
  createMany: NoteUserTagsCreateManyNoteInputEnvelope
  connect: [NoteUserTagsWhereUniqueInput!]
}

input NoteUserTagsCreateWithoutNoteInput {
  createdAt: DateTime
  user: UserCreateNestedOneWithoutNoteUserTagsInput!
}

input UserCreateNestedOneWithoutNoteUserTagsInput {
  create: UserCreateWithoutNoteUserTagsInput
  connectOrCreate: UserCreateOrConnectWithoutNoteUserTagsInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutNoteUserTagsInput {
  admin: Boolean
  email: String!
  name: String!
  passwordHash: String
  passwordSalt: String
  workPhone: String
  mobilePhone: String
  title: String
  token: String
  notificationSettings: JSON
  createdAt: DateTime
  updatedAt: DateTime
  dynamicFields: JSON
  active: Boolean
  oktaUserId: Int
  oktaManagerId: Int
  forgetPassword: String
  csmStatus: Boolean
  crmStatus: Boolean
  customer: CustomerCreateNestedOneWithoutUsersInput!
  leadSourceFor: CompanyCreateNestedManyWithoutLeadSourceInput
  primaryContactFor: CompanyCreateNestedManyWithoutPrimaryContactInput
  starred: CompanyStarredCreateNestedManyWithoutUserInput
  externalUser: ExternalUserCreateNestedManyWithoutUserInput
  groups: GroupUserCreateNestedManyWithoutUserInput
  Note: NoteCreateNestedManyWithoutUserInput
  roles: UserRoleCreateNestedManyWithoutUserInput
  userEvents: UserEventsCreateNestedManyWithoutUserInput
  UserCompanyRatings: UserCompanyRatingsCreateNestedManyWithoutUserInput
  messageTemplate: MessageTemplateCreateNestedManyWithoutUserInput
  Feedback: FeedbackCreateNestedManyWithoutUserInput
  references: ReferenceCreateNestedManyWithoutUserInput
  userManager: UserManagerCreateNestedManyWithoutUserInput
  userReportee: UserManagerCreateNestedManyWithoutManagerInput
}

input MessageTemplateCreateNestedManyWithoutUserInput {
  create: [MessageTemplateCreateWithoutUserInput!]
  connectOrCreate: [MessageTemplateCreateOrConnectWithoutUserInput!]
  createMany: MessageTemplateCreateManyUserInputEnvelope
  connect: [MessageTemplateWhereUniqueInput!]
}

input MessageTemplateCreateWithoutUserInput {
  eventType: EventType!
  companyType: CompanyType!
  messageType: MessageType!
  sendToAddress: String
  title: String
  subject: String!
  text: String!
  delta: JSON
  createdAt: DateTime
  updatedAt: DateTime
  customer: CustomerCreateNestedOneWithoutMessageTemplateInput!
  launch: LaunchCreateNestedManyWithoutMessageTempateInput
}

input LaunchCreateNestedManyWithoutMessageTempateInput {
  create: [LaunchCreateWithoutMessageTempateInput!]
  connectOrCreate: [LaunchCreateOrConnectWithoutMessageTempateInput!]
  createMany: LaunchCreateManyMessageTempateInputEnvelope
  connect: [LaunchWhereUniqueInput!]
}

input LaunchCreateWithoutMessageTempateInput {
  createdAt: DateTime
  sendToAddress: String
  subject: String!
  text: String!
  delta: JSON
  company: CompanyCreateNestedOneWithoutLaunchInput!
  events: EventCreateNestedOneWithoutLaunchInput
  launchContacts: LaunchContactsCreateNestedManyWithoutLaunchInput
  Customer: CustomerCreateNestedOneWithoutLaunchInput
}

input LaunchContactsCreateNestedManyWithoutLaunchInput {
  create: [LaunchContactsCreateWithoutLaunchInput!]
  connectOrCreate: [LaunchContactsCreateOrConnectWithoutLaunchInput!]
  createMany: LaunchContactsCreateManyLaunchInputEnvelope
  connect: [LaunchContactsWhereUniqueInput!]
}

input LaunchContactsCreateWithoutLaunchInput {
  createdAt: DateTime
  contact: ContactsCreateNestedOneWithoutLaunchContactsInput!
}

input ContactsCreateNestedOneWithoutLaunchContactsInput {
  create: ContactsCreateWithoutLaunchContactsInput
  connectOrCreate: ContactsCreateOrConnectWithoutLaunchContactsInput
  connect: ContactsWhereUniqueInput
}

input ContactsCreateWithoutLaunchContactsInput {
  email: String!
  name: String!
  workPhone: String
  mobilePhone: String
  createdAt: DateTime
  updatedAt: DateTime
  primary: Boolean
  image: String
  company: CompanyCreateNestedOneWithoutContactsInput
}

input CompanyCreateNestedOneWithoutContactsInput {
  create: CompanyCreateWithoutContactsInput
  connectOrCreate: CompanyCreateOrConnectWithoutContactsInput
  connect: CompanyWhereUniqueInput
}

input CompanyCreateWithoutContactsInput {
  annualRecurringRevenue: Int
  expectedToCloseAt: DateTime
  fiscalYearStartMonth: Int
  name: String!
  companyType: CompanyType!
  seatSize: Int
  createdAt: DateTime
  updatedAt: DateTime
  fiscalYear: Int
  renewalDate: DateTime
  referredOn: DateTime
  latestReferenceId: Int
  customer: CustomerCreateNestedOneWithoutCompaniesInput!
  leadSource: UserCreateNestedOneWithoutLeadSourceForInput
  companyParent: CompanyCreateNestedOneWithoutSubsidiaryInput
  primaryContact: UserCreateNestedOneWithoutPrimaryContactForInput
  references: ReferenceCreateNestedManyWithoutCompanyInput
  referencesServedFor: ReferenceCreateNestedManyWithoutServedAsReferenceForInput
  subsidiary: CompanyCreateNestedManyWithoutCompanyParentInput
  starredBy: CompanyStarredCreateNestedManyWithoutCompanyInput
  events: EventCreateNestedManyWithoutCompanyInput
  notes: NoteCreateNestedManyWithoutCompanyInput
  account: AccountCreateNestedOneWithoutCompanyInput!
  competitors: CompetitorCreateNestedManyWithoutCompanyInput
  products: ProductCreateNestedManyWithoutCompanyInput
  UserCompanyRatings: UserCompanyRatingsCreateNestedManyWithoutCompanyInput
  listCompanies: ListCompanyCreateNestedManyWithoutCompanyInput
  Launch: LaunchCreateNestedManyWithoutCompanyInput
}

input LaunchCreateNestedManyWithoutCompanyInput {
  create: [LaunchCreateWithoutCompanyInput!]
  connectOrCreate: [LaunchCreateOrConnectWithoutCompanyInput!]
  createMany: LaunchCreateManyCompanyInputEnvelope
  connect: [LaunchWhereUniqueInput!]
}

input LaunchCreateWithoutCompanyInput {
  createdAt: DateTime
  sendToAddress: String
  subject: String!
  text: String!
  delta: JSON
  events: EventCreateNestedOneWithoutLaunchInput
  messageTempate: MessageTemplateCreateNestedOneWithoutLaunchInput
  launchContacts: LaunchContactsCreateNestedManyWithoutLaunchInput
  Customer: CustomerCreateNestedOneWithoutLaunchInput
}

input CustomerCreateNestedOneWithoutLaunchInput {
  create: CustomerCreateWithoutLaunchInput
  connectOrCreate: CustomerCreateOrConnectWithoutLaunchInput
  connect: CustomerWhereUniqueInput
}

input CustomerCreateWithoutLaunchInput {
  name: String!
  type: CustomerType!
  favoritedAt: DateTime
  createdAt: DateTime
  updatedAt: DateTime
  oktaClientId: String
  oktaDomain: String
  oktaClientSecret: String
  oktaApiKey: String
  companies: CompanyCreateNestedManyWithoutCustomerInput
  integrations: CustomerIntegrationCreateNestedManyWithoutCustomerInput
  events: EventCreateNestedManyWithoutCustomerInput
  externalGroups: ExternalGroupCreateNestedManyWithoutCustomerInput
  externalUsers: ExternalUserCreateNestedManyWithoutCustomerInput
  groups: GroupCreateNestedManyWithoutCustomerInput
  notes: NoteCreateNestedManyWithoutCustomerInput
  roles: RoleCreateNestedManyWithoutCustomerInput
  salesLeads: SalesLeadCreateNestedManyWithoutCustomerInput
  syncEvents: SyncEventCreateNestedManyWithoutCustomerInput
  users: UserCreateNestedManyWithoutCustomerInput
  messageTemplate: MessageTemplateCreateNestedManyWithoutCustomerInput
  dynamicFields: DynamicUserFieldsCreateNestedManyWithoutCustomerInput
  lists: ListCreateNestedManyWithoutCustomerInput
  useCaseCollections: UseCaseCollectionsCreateNestedManyWithoutCustomerInput
  customerDataSources: DataSourcesOnCustomerCreateNestedManyWithoutCustomerInput
  dataObjectCollections: DataObjectCollectionsCreateNestedManyWithoutCustomerInput
}

input DynamicUserFieldsCreateNestedManyWithoutCustomerInput {
  create: [DynamicUserFieldsCreateWithoutCustomerInput!]
  connectOrCreate: [DynamicUserFieldsCreateOrConnectWithoutCustomerInput!]
  createMany: DynamicUserFieldsCreateManyCustomerInputEnvelope
  connect: [DynamicUserFieldsWhereUniqueInput!]
}

input DynamicUserFieldsCreateWithoutCustomerInput {
  fieldName: String!
  fieldLabel: String!
  fieldType: FieldTypes
  display: Boolean
  allowedValues: JSON
  isDefault: Boolean
  order: Int
}

input DynamicUserFieldsCreateOrConnectWithoutCustomerInput {
  where: DynamicUserFieldsWhereUniqueInput!
  create: DynamicUserFieldsCreateWithoutCustomerInput!
}

input DynamicUserFieldsCreateManyCustomerInputEnvelope {
  data: [DynamicUserFieldsCreateManyCustomerInput!]!
  skipDuplicates: Boolean
}

input DynamicUserFieldsCreateManyCustomerInput {
  id: Int
  fieldName: String!
  fieldLabel: String!
  fieldType: FieldTypes
  display: Boolean
  allowedValues: JSON
  isDefault: Boolean
  order: Int
}

input ListCreateNestedManyWithoutCustomerInput {
  create: [ListCreateWithoutCustomerInput!]
  connectOrCreate: [ListCreateOrConnectWithoutCustomerInput!]
  createMany: ListCreateManyCustomerInputEnvelope
  connect: [ListWhereUniqueInput!]
}

input ListCreateWithoutCustomerInput {
  name: String!
  createdAt: DateTime
  updatedAt: DateTime
  listCompanies: ListCompanyCreateNestedManyWithoutListInput
  parent: ListCreateNestedOneWithoutChildrenInput
  children: ListCreateNestedManyWithoutParentInput
}

input ListCompanyCreateNestedManyWithoutListInput {
  create: [ListCompanyCreateWithoutListInput!]
  connectOrCreate: [ListCompanyCreateOrConnectWithoutListInput!]
  createMany: ListCompanyCreateManyListInputEnvelope
  connect: [ListCompanyWhereUniqueInput!]
}

input ListCompanyCreateWithoutListInput {
  createdAt: DateTime
  updatedAt: DateTime
  company: CompanyCreateNestedOneWithoutListCompaniesInput!
}

input CompanyCreateNestedOneWithoutListCompaniesInput {
  create: CompanyCreateWithoutListCompaniesInput
  connectOrCreate: CompanyCreateOrConnectWithoutListCompaniesInput
  connect: CompanyWhereUniqueInput
}

input CompanyCreateWithoutListCompaniesInput {
  annualRecurringRevenue: Int
  expectedToCloseAt: DateTime
  fiscalYearStartMonth: Int
  name: String!
  companyType: CompanyType!
  seatSize: Int
  createdAt: DateTime
  updatedAt: DateTime
  fiscalYear: Int
  renewalDate: DateTime
  referredOn: DateTime
  latestReferenceId: Int
  customer: CustomerCreateNestedOneWithoutCompaniesInput!
  leadSource: UserCreateNestedOneWithoutLeadSourceForInput
  companyParent: CompanyCreateNestedOneWithoutSubsidiaryInput
  primaryContact: UserCreateNestedOneWithoutPrimaryContactForInput
  references: ReferenceCreateNestedManyWithoutCompanyInput
  referencesServedFor: ReferenceCreateNestedManyWithoutServedAsReferenceForInput
  subsidiary: CompanyCreateNestedManyWithoutCompanyParentInput
  starredBy: CompanyStarredCreateNestedManyWithoutCompanyInput
  events: EventCreateNestedManyWithoutCompanyInput
  notes: NoteCreateNestedManyWithoutCompanyInput
  account: AccountCreateNestedOneWithoutCompanyInput!
  competitors: CompetitorCreateNestedManyWithoutCompanyInput
  products: ProductCreateNestedManyWithoutCompanyInput
  contacts: ContactsCreateNestedManyWithoutCompanyInput
  UserCompanyRatings: UserCompanyRatingsCreateNestedManyWithoutCompanyInput
  Launch: LaunchCreateNestedManyWithoutCompanyInput
}

input CompanyCreateOrConnectWithoutListCompaniesInput {
  where: CompanyWhereUniqueInput!
  create: CompanyCreateWithoutListCompaniesInput!
}

input ListCompanyCreateOrConnectWithoutListInput {
  where: ListCompanyWhereUniqueInput!
  create: ListCompanyCreateWithoutListInput!
}

input ListCompanyCreateManyListInputEnvelope {
  data: [ListCompanyCreateManyListInput!]!
  skipDuplicates: Boolean
}

input ListCompanyCreateManyListInput {
  id: Int
  companyId: Int!
  createdAt: DateTime
  updatedAt: DateTime
}

input ListCreateNestedOneWithoutChildrenInput {
  create: ListCreateWithoutChildrenInput
  connectOrCreate: ListCreateOrConnectWithoutChildrenInput
  connect: ListWhereUniqueInput
}

input ListCreateWithoutChildrenInput {
  name: String!
  createdAt: DateTime
  updatedAt: DateTime
  customer: CustomerCreateNestedOneWithoutListsInput!
  listCompanies: ListCompanyCreateNestedManyWithoutListInput
  parent: ListCreateNestedOneWithoutChildrenInput
}

input ListCreateOrConnectWithoutChildrenInput {
  where: ListWhereUniqueInput!
  create: ListCreateWithoutChildrenInput!
}

input ListCreateNestedManyWithoutParentInput {
  create: [ListCreateWithoutParentInput!]
  connectOrCreate: [ListCreateOrConnectWithoutParentInput!]
  createMany: ListCreateManyParentInputEnvelope
  connect: [ListWhereUniqueInput!]
}

input ListCreateWithoutParentInput {
  name: String!
  createdAt: DateTime
  updatedAt: DateTime
  customer: CustomerCreateNestedOneWithoutListsInput!
  listCompanies: ListCompanyCreateNestedManyWithoutListInput
  children: ListCreateNestedManyWithoutParentInput
}

input ListCreateOrConnectWithoutParentInput {
  where: ListWhereUniqueInput!
  create: ListCreateWithoutParentInput!
}

input ListCreateManyParentInputEnvelope {
  data: [ListCreateManyParentInput!]!
  skipDuplicates: Boolean
}

input ListCreateManyParentInput {
  id: Int
  customerId: Int!
  name: String!
  createdAt: DateTime
  updatedAt: DateTime
}

input ListCreateOrConnectWithoutCustomerInput {
  where: ListWhereUniqueInput!
  create: ListCreateWithoutCustomerInput!
}

input ListCreateManyCustomerInputEnvelope {
  data: [ListCreateManyCustomerInput!]!
  skipDuplicates: Boolean
}

input ListCreateManyCustomerInput {
  id: Int
  name: String!
  createdAt: DateTime
  updatedAt: DateTime
  parentId: Int
}

input UseCaseCollectionsCreateNestedManyWithoutCustomerInput {
  create: [UseCaseCollectionsCreateWithoutCustomerInput!]
  connectOrCreate: [UseCaseCollectionsCreateOrConnectWithoutCustomerInput!]
  createMany: UseCaseCollectionsCreateManyCustomerInputEnvelope
  connect: [UseCaseCollectionsWhereUniqueInput!]
}

input UseCaseCollectionsCreateWithoutCustomerInput {
  name: String!
  default: Boolean
  createdAt: DateTime
  updatedAt: DateTime
  useCasesOnCollections: UseCasesOnCollectionsCreateNestedManyWithoutCollectionInput
}

input UseCasesOnCollectionsCreateNestedManyWithoutCollectionInput {
  create: [UseCasesOnCollectionsCreateWithoutCollectionInput!]
  connectOrCreate: [UseCasesOnCollectionsCreateOrConnectWithoutCollectionInput!]
  createMany: UseCasesOnCollectionsCreateManyCollectionInputEnvelope
  connect: [UseCasesOnCollectionsWhereUniqueInput!]
}

input UseCasesOnCollectionsCreateWithoutCollectionInput {
  status: Boolean!
  createdAt: DateTime
  updatedAt: DateTime
  useCase: UseCasesCreateNestedOneWithoutUseCasesOnCollectionsInput!
}

input UseCasesCreateNestedOneWithoutUseCasesOnCollectionsInput {
  create: UseCasesCreateWithoutUseCasesOnCollectionsInput
  connectOrCreate: UseCasesCreateOrConnectWithoutUseCasesOnCollectionsInput
  connect: UseCasesWhereUniqueInput
}

input UseCasesCreateWithoutUseCasesOnCollectionsInput {
  name: String!
  displayName: String!
  createdAt: DateTime
  updatedAt: DateTime
}

input UseCasesCreateOrConnectWithoutUseCasesOnCollectionsInput {
  where: UseCasesWhereUniqueInput!
  create: UseCasesCreateWithoutUseCasesOnCollectionsInput!
}

input UseCasesOnCollectionsCreateOrConnectWithoutCollectionInput {
  where: UseCasesOnCollectionsWhereUniqueInput!
  create: UseCasesOnCollectionsCreateWithoutCollectionInput!
}

input UseCasesOnCollectionsCreateManyCollectionInputEnvelope {
  data: [UseCasesOnCollectionsCreateManyCollectionInput!]!
  skipDuplicates: Boolean
}

input UseCasesOnCollectionsCreateManyCollectionInput {
  id: Int
  status: Boolean!
  useCaseId: Int!
  createdAt: DateTime
  updatedAt: DateTime
}

input UseCaseCollectionsCreateOrConnectWithoutCustomerInput {
  where: UseCaseCollectionsWhereUniqueInput!
  create: UseCaseCollectionsCreateWithoutCustomerInput!
}

input UseCaseCollectionsCreateManyCustomerInputEnvelope {
  data: [UseCaseCollectionsCreateManyCustomerInput!]!
  skipDuplicates: Boolean
}

input UseCaseCollectionsCreateManyCustomerInput {
  id: Int
  name: String!
  default: Boolean
  createdAt: DateTime
  updatedAt: DateTime
}

input DataSourcesOnCustomerCreateNestedManyWithoutCustomerInput {
  create: [DataSourcesOnCustomerCreateWithoutCustomerInput!]
  connectOrCreate: [DataSourcesOnCustomerCreateOrConnectWithoutCustomerInput!]
  createMany: DataSourcesOnCustomerCreateManyCustomerInputEnvelope
  connect: [DataSourcesOnCustomerWhereUniqueInput!]
}

input DataSourcesOnCustomerCreateWithoutCustomerInput {
  status: Boolean
  createdAt: DateTime
  updatedAt: DateTime
  dataSource: DataSourcesCreateNestedOneWithoutCustomerDataSourcesInput!
}

input DataSourcesCreateNestedOneWithoutCustomerDataSourcesInput {
  create: DataSourcesCreateWithoutCustomerDataSourcesInput
  connectOrCreate: DataSourcesCreateOrConnectWithoutCustomerDataSourcesInput
  connect: DataSourcesWhereUniqueInput
}

input DataSourcesCreateWithoutCustomerDataSourcesInput {
  name: String!
  icon: String
  sourceType: SourceTypes!
  createdAt: DateTime
  dataObjects: CustomerDataObjectsCreateNestedManyWithoutDataSourceInput
}

input CustomerDataObjectsCreateNestedManyWithoutDataSourceInput {
  create: [CustomerDataObjectsCreateWithoutDataSourceInput!]
  connectOrCreate: [CustomerDataObjectsCreateOrConnectWithoutDataSourceInput!]
  createMany: CustomerDataObjectsCreateManyDataSourceInputEnvelope
  connect: [CustomerDataObjectsWhereUniqueInput!]
}

input CustomerDataObjectsCreateWithoutDataSourceInput {
  name: String!
  displayName: String!
  createdAt: DateTime
  dataObjectCollectionOnDataObject: DataObjectCollectionOnDataObjectCreateNestedManyWithoutDataObjectInput
}

input DataObjectCollectionOnDataObjectCreateNestedManyWithoutDataObjectInput {
  create: [DataObjectCollectionOnDataObjectCreateWithoutDataObjectInput!]
  connectOrCreate: [DataObjectCollectionOnDataObjectCreateOrConnectWithoutDataObjectInput!]
  createMany: DataObjectCollectionOnDataObjectCreateManyDataObjectInputEnvelope
  connect: [DataObjectCollectionOnDataObjectWhereUniqueInput!]
}

input DataObjectCollectionOnDataObjectCreateWithoutDataObjectInput {
  status: Boolean!
  createdAt: DateTime
  updatedAt: DateTime
  dataObjectCollections: DataObjectCollectionsCreateNestedOneWithoutDataObjectCollectionOnDataObjectInput!
}

input DataObjectCollectionsCreateNestedOneWithoutDataObjectCollectionOnDataObjectInput {
  create: DataObjectCollectionsCreateWithoutDataObjectCollectionOnDataObjectInput
  connectOrCreate: DataObjectCollectionsCreateOrConnectWithoutDataObjectCollectionOnDataObjectInput
  connect: DataObjectCollectionsWhereUniqueInput
}

input DataObjectCollectionsCreateWithoutDataObjectCollectionOnDataObjectInput {
  name: String!
  default: Boolean
  isAllAccess: Boolean
  createdAt: DateTime
  updatedAt: DateTime
  customer: CustomerCreateNestedOneWithoutDataObjectCollectionsInput!
}

input CustomerCreateNestedOneWithoutDataObjectCollectionsInput {
  create: CustomerCreateWithoutDataObjectCollectionsInput
  connectOrCreate: CustomerCreateOrConnectWithoutDataObjectCollectionsInput
  connect: CustomerWhereUniqueInput
}

input CustomerCreateWithoutDataObjectCollectionsInput {
  name: String!
  type: CustomerType!
  favoritedAt: DateTime
  createdAt: DateTime
  updatedAt: DateTime
  oktaClientId: String
  oktaDomain: String
  oktaClientSecret: String
  oktaApiKey: String
  launch: LaunchCreateNestedManyWithoutCustomerInput
  companies: CompanyCreateNestedManyWithoutCustomerInput
  integrations: CustomerIntegrationCreateNestedManyWithoutCustomerInput
  events: EventCreateNestedManyWithoutCustomerInput
  externalGroups: ExternalGroupCreateNestedManyWithoutCustomerInput
  externalUsers: ExternalUserCreateNestedManyWithoutCustomerInput
  groups: GroupCreateNestedManyWithoutCustomerInput
  notes: NoteCreateNestedManyWithoutCustomerInput
  roles: RoleCreateNestedManyWithoutCustomerInput
  salesLeads: SalesLeadCreateNestedManyWithoutCustomerInput
  syncEvents: SyncEventCreateNestedManyWithoutCustomerInput
  users: UserCreateNestedManyWithoutCustomerInput
  messageTemplate: MessageTemplateCreateNestedManyWithoutCustomerInput
  dynamicFields: DynamicUserFieldsCreateNestedManyWithoutCustomerInput
  lists: ListCreateNestedManyWithoutCustomerInput
  useCaseCollections: UseCaseCollectionsCreateNestedManyWithoutCustomerInput
  customerDataSources: DataSourcesOnCustomerCreateNestedManyWithoutCustomerInput
}

input CustomerCreateOrConnectWithoutDataObjectCollectionsInput {
  where: CustomerWhereUniqueInput!
  create: CustomerCreateWithoutDataObjectCollectionsInput!
}

input DataObjectCollectionsCreateOrConnectWithoutDataObjectCollectionOnDataObjectInput {
  where: DataObjectCollectionsWhereUniqueInput!
  create: DataObjectCollectionsCreateWithoutDataObjectCollectionOnDataObjectInput!
}

input DataObjectCollectionOnDataObjectCreateOrConnectWithoutDataObjectInput {
  where: DataObjectCollectionOnDataObjectWhereUniqueInput!
  create: DataObjectCollectionOnDataObjectCreateWithoutDataObjectInput!
}

input DataObjectCollectionOnDataObjectCreateManyDataObjectInputEnvelope {
  data: [DataObjectCollectionOnDataObjectCreateManyDataObjectInput!]!
  skipDuplicates: Boolean
}

input DataObjectCollectionOnDataObjectCreateManyDataObjectInput {
  id: Int
  dataObjectCollectionId: Int!
  status: Boolean!
  createdAt: DateTime
  updatedAt: DateTime
}

input CustomerDataObjectsCreateOrConnectWithoutDataSourceInput {
  where: CustomerDataObjectsWhereUniqueInput!
  create: CustomerDataObjectsCreateWithoutDataSourceInput!
}

input CustomerDataObjectsCreateManyDataSourceInputEnvelope {
  data: [CustomerDataObjectsCreateManyDataSourceInput!]!
  skipDuplicates: Boolean
}

input CustomerDataObjectsCreateManyDataSourceInput {
  id: Int
  name: String!
  displayName: String!
  createdAt: DateTime
}

input DataSourcesCreateOrConnectWithoutCustomerDataSourcesInput {
  where: DataSourcesWhereUniqueInput!
  create: DataSourcesCreateWithoutCustomerDataSourcesInput!
}

input DataSourcesOnCustomerCreateOrConnectWithoutCustomerInput {
  where: DataSourcesOnCustomerWhereUniqueInput!
  create: DataSourcesOnCustomerCreateWithoutCustomerInput!
}

input DataSourcesOnCustomerCreateManyCustomerInputEnvelope {
  data: [DataSourcesOnCustomerCreateManyCustomerInput!]!
  skipDuplicates: Boolean
}

input DataSourcesOnCustomerCreateManyCustomerInput {
  id: Int
  status: Boolean
  dataSourceId: Int!
  createdAt: DateTime
  updatedAt: DateTime
}

input DataObjectCollectionsCreateNestedManyWithoutCustomerInput {
  create: [DataObjectCollectionsCreateWithoutCustomerInput!]
  connectOrCreate: [DataObjectCollectionsCreateOrConnectWithoutCustomerInput!]
  createMany: DataObjectCollectionsCreateManyCustomerInputEnvelope
  connect: [DataObjectCollectionsWhereUniqueInput!]
}

input DataObjectCollectionsCreateWithoutCustomerInput {
  name: String!
  default: Boolean
  isAllAccess: Boolean
  createdAt: DateTime
  updatedAt: DateTime
  dataObjectCollectionOnDataObject: DataObjectCollectionOnDataObjectCreateNestedManyWithoutDataObjectCollectionsInput
}

input DataObjectCollectionOnDataObjectCreateNestedManyWithoutDataObjectCollectionsInput {
  create: [DataObjectCollectionOnDataObjectCreateWithoutDataObjectCollectionsInput!]
  connectOrCreate: [DataObjectCollectionOnDataObjectCreateOrConnectWithoutDataObjectCollectionsInput!]
  createMany: DataObjectCollectionOnDataObjectCreateManyDataObjectCollectionsInputEnvelope
  connect: [DataObjectCollectionOnDataObjectWhereUniqueInput!]
}

input DataObjectCollectionOnDataObjectCreateWithoutDataObjectCollectionsInput {
  status: Boolean!
  createdAt: DateTime
  updatedAt: DateTime
  dataObject: CustomerDataObjectsCreateNestedOneWithoutDataObjectCollectionOnDataObjectInput!
}

input CustomerDataObjectsCreateNestedOneWithoutDataObjectCollectionOnDataObjectInput {
  create: CustomerDataObjectsCreateWithoutDataObjectCollectionOnDataObjectInput
  connectOrCreate: CustomerDataObjectsCreateOrConnectWithoutDataObjectCollectionOnDataObjectInput
  connect: CustomerDataObjectsWhereUniqueInput
}

input CustomerDataObjectsCreateWithoutDataObjectCollectionOnDataObjectInput {
  name: String!
  displayName: String!
  createdAt: DateTime
  dataSource: DataSourcesCreateNestedOneWithoutDataObjectsInput!
}

input DataSourcesCreateNestedOneWithoutDataObjectsInput {
  create: DataSourcesCreateWithoutDataObjectsInput
  connectOrCreate: DataSourcesCreateOrConnectWithoutDataObjectsInput
  connect: DataSourcesWhereUniqueInput
}

input DataSourcesCreateWithoutDataObjectsInput {
  name: String!
  icon: String
  sourceType: SourceTypes!
  createdAt: DateTime
  customerDataSources: DataSourcesOnCustomerCreateNestedManyWithoutDataSourceInput
}

input DataSourcesOnCustomerCreateNestedManyWithoutDataSourceInput {
  create: [DataSourcesOnCustomerCreateWithoutDataSourceInput!]
  connectOrCreate: [DataSourcesOnCustomerCreateOrConnectWithoutDataSourceInput!]
  createMany: DataSourcesOnCustomerCreateManyDataSourceInputEnvelope
  connect: [DataSourcesOnCustomerWhereUniqueInput!]
}

input DataSourcesOnCustomerCreateWithoutDataSourceInput {
  status: Boolean
  createdAt: DateTime
  updatedAt: DateTime
  customer: CustomerCreateNestedOneWithoutCustomerDataSourcesInput!
}

input CustomerCreateNestedOneWithoutCustomerDataSourcesInput {
  create: CustomerCreateWithoutCustomerDataSourcesInput
  connectOrCreate: CustomerCreateOrConnectWithoutCustomerDataSourcesInput
  connect: CustomerWhereUniqueInput
}

input CustomerCreateWithoutCustomerDataSourcesInput {
  name: String!
  type: CustomerType!
  favoritedAt: DateTime
  createdAt: DateTime
  updatedAt: DateTime
  oktaClientId: String
  oktaDomain: String
  oktaClientSecret: String
  oktaApiKey: String
  launch: LaunchCreateNestedManyWithoutCustomerInput
  companies: CompanyCreateNestedManyWithoutCustomerInput
  integrations: CustomerIntegrationCreateNestedManyWithoutCustomerInput
  events: EventCreateNestedManyWithoutCustomerInput
  externalGroups: ExternalGroupCreateNestedManyWithoutCustomerInput
  externalUsers: ExternalUserCreateNestedManyWithoutCustomerInput
  groups: GroupCreateNestedManyWithoutCustomerInput
  notes: NoteCreateNestedManyWithoutCustomerInput
  roles: RoleCreateNestedManyWithoutCustomerInput
  salesLeads: SalesLeadCreateNestedManyWithoutCustomerInput
  syncEvents: SyncEventCreateNestedManyWithoutCustomerInput
  users: UserCreateNestedManyWithoutCustomerInput
  messageTemplate: MessageTemplateCreateNestedManyWithoutCustomerInput
  dynamicFields: DynamicUserFieldsCreateNestedManyWithoutCustomerInput
  lists: ListCreateNestedManyWithoutCustomerInput
  useCaseCollections: UseCaseCollectionsCreateNestedManyWithoutCustomerInput
  dataObjectCollections: DataObjectCollectionsCreateNestedManyWithoutCustomerInput
}

input CustomerCreateOrConnectWithoutCustomerDataSourcesInput {
  where: CustomerWhereUniqueInput!
  create: CustomerCreateWithoutCustomerDataSourcesInput!
}

input DataSourcesOnCustomerCreateOrConnectWithoutDataSourceInput {
  where: DataSourcesOnCustomerWhereUniqueInput!
  create: DataSourcesOnCustomerCreateWithoutDataSourceInput!
}

input DataSourcesOnCustomerCreateManyDataSourceInputEnvelope {
  data: [DataSourcesOnCustomerCreateManyDataSourceInput!]!
  skipDuplicates: Boolean
}

input DataSourcesOnCustomerCreateManyDataSourceInput {
  id: Int
  status: Boolean
  customerId: Int!
  createdAt: DateTime
  updatedAt: DateTime
}

input DataSourcesCreateOrConnectWithoutDataObjectsInput {
  where: DataSourcesWhereUniqueInput!
  create: DataSourcesCreateWithoutDataObjectsInput!
}

input CustomerDataObjectsCreateOrConnectWithoutDataObjectCollectionOnDataObjectInput {
  where: CustomerDataObjectsWhereUniqueInput!
  create: CustomerDataObjectsCreateWithoutDataObjectCollectionOnDataObjectInput!
}

input DataObjectCollectionOnDataObjectCreateOrConnectWithoutDataObjectCollectionsInput {
  where: DataObjectCollectionOnDataObjectWhereUniqueInput!
  create: DataObjectCollectionOnDataObjectCreateWithoutDataObjectCollectionsInput!
}

input DataObjectCollectionOnDataObjectCreateManyDataObjectCollectionsInputEnvelope {
  data: [DataObjectCollectionOnDataObjectCreateManyDataObjectCollectionsInput!]!
  skipDuplicates: Boolean
}

input DataObjectCollectionOnDataObjectCreateManyDataObjectCollectionsInput {
  id: Int
  status: Boolean!
  dataObjectId: Int!
  createdAt: DateTime
  updatedAt: DateTime
}

input DataObjectCollectionsCreateOrConnectWithoutCustomerInput {
  where: DataObjectCollectionsWhereUniqueInput!
  create: DataObjectCollectionsCreateWithoutCustomerInput!
}

input DataObjectCollectionsCreateManyCustomerInputEnvelope {
  data: [DataObjectCollectionsCreateManyCustomerInput!]!
  skipDuplicates: Boolean
}

input DataObjectCollectionsCreateManyCustomerInput {
  id: Int
  name: String!
  default: Boolean
  isAllAccess: Boolean
  createdAt: DateTime
  updatedAt: DateTime
}

input CustomerCreateOrConnectWithoutLaunchInput {
  where: CustomerWhereUniqueInput!
  create: CustomerCreateWithoutLaunchInput!
}

input LaunchCreateOrConnectWithoutCompanyInput {
  where: LaunchWhereUniqueInput!
  create: LaunchCreateWithoutCompanyInput!
}

input LaunchCreateManyCompanyInputEnvelope {
  data: [LaunchCreateManyCompanyInput!]!
  skipDuplicates: Boolean
}

input LaunchCreateManyCompanyInput {
  id: Int
  createdAt: DateTime
  eventId: Int
  messageTemplateId: Int
  sendToAddress: String
  subject: String!
  text: String!
  delta: JSON
  customerId: Int
}

input CompanyCreateOrConnectWithoutContactsInput {
  where: CompanyWhereUniqueInput!
  create: CompanyCreateWithoutContactsInput!
}

input ContactsCreateOrConnectWithoutLaunchContactsInput {
  where: ContactsWhereUniqueInput!
  create: ContactsCreateWithoutLaunchContactsInput!
}

input LaunchContactsCreateOrConnectWithoutLaunchInput {
  where: LaunchContactsWhereUniqueInput!
  create: LaunchContactsCreateWithoutLaunchInput!
}

input LaunchContactsCreateManyLaunchInputEnvelope {
  data: [LaunchContactsCreateManyLaunchInput!]!
  skipDuplicates: Boolean
}

input LaunchContactsCreateManyLaunchInput {
  id: Int
  contactId: Int!
  createdAt: DateTime
}

input LaunchCreateOrConnectWithoutMessageTempateInput {
  where: LaunchWhereUniqueInput!
  create: LaunchCreateWithoutMessageTempateInput!
}

input LaunchCreateManyMessageTempateInputEnvelope {
  data: [LaunchCreateManyMessageTempateInput!]!
  skipDuplicates: Boolean
}

input LaunchCreateManyMessageTempateInput {
  id: Int
  createdAt: DateTime
  companyId: Int!
  eventId: Int
  sendToAddress: String
  subject: String!
  text: String!
  delta: JSON
  customerId: Int
}

input MessageTemplateCreateOrConnectWithoutUserInput {
  where: MessageTemplateWhereUniqueInput!
  create: MessageTemplateCreateWithoutUserInput!
}

input MessageTemplateCreateManyUserInputEnvelope {
  data: [MessageTemplateCreateManyUserInput!]!
  skipDuplicates: Boolean
}

input MessageTemplateCreateManyUserInput {
  id: Int
  eventType: EventType!
  companyType: CompanyType!
  messageType: MessageType!
  sendToAddress: String
  title: String
  subject: String!
  text: String!
  customerId: Int!
  delta: JSON
  createdAt: DateTime
  updatedAt: DateTime
}

input FeedbackCreateNestedManyWithoutUserInput {
  create: [FeedbackCreateWithoutUserInput!]
  connectOrCreate: [FeedbackCreateOrConnectWithoutUserInput!]
  createMany: FeedbackCreateManyUserInputEnvelope
  connect: [FeedbackWhereUniqueInput!]
}

input FeedbackCreateWithoutUserInput {
  feedbackValue: Float!
  feedback: String!
}

input FeedbackCreateOrConnectWithoutUserInput {
  where: FeedbackWhereUniqueInput!
  create: FeedbackCreateWithoutUserInput!
}

input FeedbackCreateManyUserInputEnvelope {
  data: [FeedbackCreateManyUserInput!]!
  skipDuplicates: Boolean
}

input FeedbackCreateManyUserInput {
  feedbackId: Int
  feedbackValue: Float!
  feedback: String!
}

input ReferenceCreateNestedManyWithoutUserInput {
  create: [ReferenceCreateWithoutUserInput!]
  connectOrCreate: [ReferenceCreateOrConnectWithoutUserInput!]
  createMany: ReferenceCreateManyUserInputEnvelope
  connect: [ReferenceWhereUniqueInput!]
}

input ReferenceCreateWithoutUserInput {
  offeredTo: Boolean!
  servedAsReferenceBefore: Boolean!
  servedAsReferenceAt: DateTime
  notes: String
  dealClosed: Boolean
  createdAt: DateTime
  company: CompanyCreateNestedOneWithoutReferencesInput!
  servedAsReferenceFor: CompanyCreateNestedOneWithoutReferencesServedForInput
  offerOptions: ReferenceOnOfferOptionsCreateNestedManyWithoutReferenceInput
}

input ReferenceOnOfferOptionsCreateNestedManyWithoutReferenceInput {
  create: [ReferenceOnOfferOptionsCreateWithoutReferenceInput!]
  connectOrCreate: [ReferenceOnOfferOptionsCreateOrConnectWithoutReferenceInput!]
  createMany: ReferenceOnOfferOptionsCreateManyReferenceInputEnvelope
  connect: [ReferenceOnOfferOptionsWhereUniqueInput!]
}

input ReferenceOnOfferOptionsCreateWithoutReferenceInput {
  createdAt: DateTime
  offerOption: OfferOptionCreateNestedOneWithoutReferencesInput!
}

input OfferOptionCreateNestedOneWithoutReferencesInput {
  create: OfferOptionCreateWithoutReferencesInput
  connectOrCreate: OfferOptionCreateOrConnectWithoutReferencesInput
  connect: OfferOptionWhereUniqueInput
}

input OfferOptionCreateWithoutReferencesInput {
  offerType: String!
  status: Boolean
}

input OfferOptionCreateOrConnectWithoutReferencesInput {
  where: OfferOptionWhereUniqueInput!
  create: OfferOptionCreateWithoutReferencesInput!
}

input ReferenceOnOfferOptionsCreateOrConnectWithoutReferenceInput {
  where: ReferenceOnOfferOptionsWhereUniqueInput!
  create: ReferenceOnOfferOptionsCreateWithoutReferenceInput!
}

input ReferenceOnOfferOptionsCreateManyReferenceInputEnvelope {
  data: [ReferenceOnOfferOptionsCreateManyReferenceInput!]!
  skipDuplicates: Boolean
}

input ReferenceOnOfferOptionsCreateManyReferenceInput {
  createdAt: DateTime
  offerOptionId: Int!
}

input ReferenceCreateOrConnectWithoutUserInput {
  where: ReferenceWhereUniqueInput!
  create: ReferenceCreateWithoutUserInput!
}

input ReferenceCreateManyUserInputEnvelope {
  data: [ReferenceCreateManyUserInput!]!
  skipDuplicates: Boolean
}

input ReferenceCreateManyUserInput {
  id: Int
  companyId: Int!
  offeredTo: Boolean!
  servedAsReferenceBefore: Boolean!
  servedAsReferenceForId: Int
  servedAsReferenceAt: DateTime
  notes: String
  dealClosed: Boolean
  createdAt: DateTime
}

input UserManagerCreateNestedManyWithoutUserInput {
  create: [UserManagerCreateWithoutUserInput!]
  connectOrCreate: [UserManagerCreateOrConnectWithoutUserInput!]
  createMany: UserManagerCreateManyUserInputEnvelope
  connect: [UserManagerWhereUniqueInput!]
}

input UserManagerCreateWithoutUserInput {
  createdAt: DateTime
  manager: UserCreateNestedOneWithoutUserReporteeInput!
}

input UserCreateNestedOneWithoutUserReporteeInput {
  create: UserCreateWithoutUserReporteeInput
  connectOrCreate: UserCreateOrConnectWithoutUserReporteeInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutUserReporteeInput {
  admin: Boolean
  email: String!
  name: String!
  passwordHash: String
  passwordSalt: String
  workPhone: String
  mobilePhone: String
  title: String
  token: String
  notificationSettings: JSON
  createdAt: DateTime
  updatedAt: DateTime
  dynamicFields: JSON
  active: Boolean
  oktaUserId: Int
  oktaManagerId: Int
  forgetPassword: String
  csmStatus: Boolean
  crmStatus: Boolean
  customer: CustomerCreateNestedOneWithoutUsersInput!
  leadSourceFor: CompanyCreateNestedManyWithoutLeadSourceInput
  primaryContactFor: CompanyCreateNestedManyWithoutPrimaryContactInput
  starred: CompanyStarredCreateNestedManyWithoutUserInput
  externalUser: ExternalUserCreateNestedManyWithoutUserInput
  groups: GroupUserCreateNestedManyWithoutUserInput
  Note: NoteCreateNestedManyWithoutUserInput
  roles: UserRoleCreateNestedManyWithoutUserInput
  userEvents: UserEventsCreateNestedManyWithoutUserInput
  UserCompanyRatings: UserCompanyRatingsCreateNestedManyWithoutUserInput
  noteUserTags: NoteUserTagsCreateNestedManyWithoutUserInput
  messageTemplate: MessageTemplateCreateNestedManyWithoutUserInput
  Feedback: FeedbackCreateNestedManyWithoutUserInput
  references: ReferenceCreateNestedManyWithoutUserInput
  userManager: UserManagerCreateNestedManyWithoutUserInput
}

input UserCreateOrConnectWithoutUserReporteeInput {
  where: UserWhereUniqueInput!
  create: UserCreateWithoutUserReporteeInput!
}

input UserManagerCreateOrConnectWithoutUserInput {
  where: UserManagerWhereUniqueInput!
  create: UserManagerCreateWithoutUserInput!
}

input UserManagerCreateManyUserInputEnvelope {
  data: [UserManagerCreateManyUserInput!]!
  skipDuplicates: Boolean
}

input UserManagerCreateManyUserInput {
  id: Int
  managerId: Int!
  createdAt: DateTime
}

input UserManagerCreateNestedManyWithoutManagerInput {
  create: [UserManagerCreateWithoutManagerInput!]
  connectOrCreate: [UserManagerCreateOrConnectWithoutManagerInput!]
  createMany: UserManagerCreateManyManagerInputEnvelope
  connect: [UserManagerWhereUniqueInput!]
}

input UserManagerCreateWithoutManagerInput {
  createdAt: DateTime
  user: UserCreateNestedOneWithoutUserManagerInput!
}

input UserCreateNestedOneWithoutUserManagerInput {
  create: UserCreateWithoutUserManagerInput
  connectOrCreate: UserCreateOrConnectWithoutUserManagerInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutUserManagerInput {
  admin: Boolean
  email: String!
  name: String!
  passwordHash: String
  passwordSalt: String
  workPhone: String
  mobilePhone: String
  title: String
  token: String
  notificationSettings: JSON
  createdAt: DateTime
  updatedAt: DateTime
  dynamicFields: JSON
  active: Boolean
  oktaUserId: Int
  oktaManagerId: Int
  forgetPassword: String
  csmStatus: Boolean
  crmStatus: Boolean
  customer: CustomerCreateNestedOneWithoutUsersInput!
  leadSourceFor: CompanyCreateNestedManyWithoutLeadSourceInput
  primaryContactFor: CompanyCreateNestedManyWithoutPrimaryContactInput
  starred: CompanyStarredCreateNestedManyWithoutUserInput
  externalUser: ExternalUserCreateNestedManyWithoutUserInput
  groups: GroupUserCreateNestedManyWithoutUserInput
  Note: NoteCreateNestedManyWithoutUserInput
  roles: UserRoleCreateNestedManyWithoutUserInput
  userEvents: UserEventsCreateNestedManyWithoutUserInput
  UserCompanyRatings: UserCompanyRatingsCreateNestedManyWithoutUserInput
  noteUserTags: NoteUserTagsCreateNestedManyWithoutUserInput
  messageTemplate: MessageTemplateCreateNestedManyWithoutUserInput
  Feedback: FeedbackCreateNestedManyWithoutUserInput
  references: ReferenceCreateNestedManyWithoutUserInput
  userReportee: UserManagerCreateNestedManyWithoutManagerInput
}

input UserCreateOrConnectWithoutUserManagerInput {
  where: UserWhereUniqueInput!
  create: UserCreateWithoutUserManagerInput!
}

input UserManagerCreateOrConnectWithoutManagerInput {
  where: UserManagerWhereUniqueInput!
  create: UserManagerCreateWithoutManagerInput!
}

input UserManagerCreateManyManagerInputEnvelope {
  data: [UserManagerCreateManyManagerInput!]!
  skipDuplicates: Boolean
}

input UserManagerCreateManyManagerInput {
  id: Int
  userId: Int!
  createdAt: DateTime
}

input UserCreateOrConnectWithoutNoteUserTagsInput {
  where: UserWhereUniqueInput!
  create: UserCreateWithoutNoteUserTagsInput!
}

input NoteUserTagsCreateOrConnectWithoutNoteInput {
  where: NoteUserTagsWhereUniqueInput!
  create: NoteUserTagsCreateWithoutNoteInput!
}

input NoteUserTagsCreateManyNoteInputEnvelope {
  data: [NoteUserTagsCreateManyNoteInput!]!
  skipDuplicates: Boolean
}

input NoteUserTagsCreateManyNoteInput {
  userId: Int!
  createdAt: DateTime
}

input EventCreateNestedManyWithoutMessageInput {
  create: [EventCreateWithoutMessageInput!]
  connectOrCreate: [EventCreateOrConnectWithoutMessageInput!]
  createMany: EventCreateManyMessageInputEnvelope
  connect: [EventWhereUniqueInput!]
}

input EventCreateWithoutMessageInput {
  data: JSON
  notifiedAt: DateTime
  text: String
  type: EventType!
  needsAttention: EventAttention
  createdAt: DateTime
  company: CompanyCreateNestedOneWithoutEventsInput
  customer: CustomerCreateNestedOneWithoutEventsInput!
  Launch: LaunchCreateNestedManyWithoutEventsInput
  notes: NoteCreateNestedManyWithoutEventsInput
  userEvents: UserEventsCreateNestedManyWithoutEventInput
  parentEvent: EventCreateNestedOneWithoutChildEventsInput
  childEvents: EventCreateNestedManyWithoutParentEventInput
}

input EventCreateNestedManyWithoutParentEventInput {
  create: [EventCreateWithoutParentEventInput!]
  connectOrCreate: [EventCreateOrConnectWithoutParentEventInput!]
  createMany: EventCreateManyParentEventInputEnvelope
  connect: [EventWhereUniqueInput!]
}

input EventCreateWithoutParentEventInput {
  data: JSON
  notifiedAt: DateTime
  text: String
  type: EventType!
  needsAttention: EventAttention
  createdAt: DateTime
  company: CompanyCreateNestedOneWithoutEventsInput
  customer: CustomerCreateNestedOneWithoutEventsInput!
  Launch: LaunchCreateNestedManyWithoutEventsInput
  notes: NoteCreateNestedManyWithoutEventsInput
  userEvents: UserEventsCreateNestedManyWithoutEventInput
  childEvents: EventCreateNestedManyWithoutParentEventInput
  message: NoteCreateNestedOneWithoutEventInput
}

input NoteCreateNestedOneWithoutEventInput {
  create: NoteCreateWithoutEventInput
  connectOrCreate: NoteCreateOrConnectWithoutEventInput
  connect: NoteWhereUniqueInput
}

input NoteCreateWithoutEventInput {
  readAt: DateTime
  flaggedAt: DateTime
  subject: String!
  text: String!
  allCanView: Boolean
  createdAt: DateTime
  updatedAt: DateTime
  delta: JSON
  company: CompanyCreateNestedOneWithoutNotesInput
  customer: CustomerCreateNestedOneWithoutNotesInput
  events: EventCreateNestedOneWithoutNotesInput
  user: UserCreateNestedOneWithoutNoteInput
  noteUserTags: NoteUserTagsCreateNestedManyWithoutNoteInput
  noteGroupTags: NoteGroupTagsCreateNestedManyWithoutNoteInput
}

input NoteCreateOrConnectWithoutEventInput {
  where: NoteWhereUniqueInput!
  create: NoteCreateWithoutEventInput!
}

input EventCreateOrConnectWithoutParentEventInput {
  where: EventWhereUniqueInput!
  create: EventCreateWithoutParentEventInput!
}

input EventCreateManyParentEventInputEnvelope {
  data: [EventCreateManyParentEventInput!]!
  skipDuplicates: Boolean
}

input EventCreateManyParentEventInput {
  id: Int
  customerId: Int!
  data: JSON
  notifiedAt: DateTime
  text: String
  type: EventType!
  companyId: Int
  needsAttention: EventAttention
  createdAt: DateTime
  messageId: Int
}

input EventCreateOrConnectWithoutMessageInput {
  where: EventWhereUniqueInput!
  create: EventCreateWithoutMessageInput!
}

input EventCreateManyMessageInputEnvelope {
  data: [EventCreateManyMessageInput!]!
  skipDuplicates: Boolean
}

input EventCreateManyMessageInput {
  id: Int
  customerId: Int!
  data: JSON
  notifiedAt: DateTime
  text: String
  type: EventType!
  companyId: Int
  needsAttention: EventAttention
  createdAt: DateTime
  parentEventId: Int
}

input NoteCreateOrConnectWithoutNoteGroupTagsInput {
  where: NoteWhereUniqueInput!
  create: NoteCreateWithoutNoteGroupTagsInput!
}

input NoteGroupTagsCreateOrConnectWithoutGroupInput {
  where: NoteGroupTagsWhereUniqueInput!
  create: NoteGroupTagsCreateWithoutGroupInput!
}

input NoteGroupTagsCreateManyGroupInputEnvelope {
  data: [NoteGroupTagsCreateManyGroupInput!]!
  skipDuplicates: Boolean
}

input NoteGroupTagsCreateManyGroupInput {
  noteId: Int!
  createdAt: DateTime
}

input GroupCreateOrConnectWithoutChildrenInput {
  where: GroupWhereUniqueInput!
  create: GroupCreateWithoutChildrenInput!
}

input GroupCreateNestedManyWithoutParentInput {
  create: [GroupCreateWithoutParentInput!]
  connectOrCreate: [GroupCreateOrConnectWithoutParentInput!]
  createMany: GroupCreateManyParentInputEnvelope
  connect: [GroupWhereUniqueInput!]
}

input GroupCreateWithoutParentInput {
  name: String!
  createdAt: DateTime
  updatedAt: DateTime
  customer: CustomerCreateNestedOneWithoutGroupsInput!
  users: GroupUserCreateNestedManyWithoutGroupInput
  children: GroupCreateNestedManyWithoutParentInput
  noteGroupTags: NoteGroupTagsCreateNestedManyWithoutGroupInput
}

input GroupCreateOrConnectWithoutParentInput {
  where: GroupWhereUniqueInput!
  create: GroupCreateWithoutParentInput!
}

input GroupCreateManyParentInputEnvelope {
  data: [GroupCreateManyParentInput!]!
  skipDuplicates: Boolean
}

input GroupCreateManyParentInput {
  id: Int
  customerId: Int!
  name: String!
  createdAt: DateTime
  updatedAt: DateTime
}

input GroupCreateOrConnectWithoutNoteGroupTagsInput {
  where: GroupWhereUniqueInput!
  create: GroupCreateWithoutNoteGroupTagsInput!
}

input NoteGroupTagsCreateOrConnectWithoutNoteInput {
  where: NoteGroupTagsWhereUniqueInput!
  create: NoteGroupTagsCreateWithoutNoteInput!
}

input NoteGroupTagsCreateManyNoteInputEnvelope {
  data: [NoteGroupTagsCreateManyNoteInput!]!
  skipDuplicates: Boolean
}

input NoteGroupTagsCreateManyNoteInput {
  groupId: Int!
  createdAt: DateTime
}

input NoteCreateOrConnectWithoutNoteUserTagsInput {
  where: NoteWhereUniqueInput!
  create: NoteCreateWithoutNoteUserTagsInput!
}

input NoteUserTagsCreateOrConnectWithoutUserInput {
  where: NoteUserTagsWhereUniqueInput!
  create: NoteUserTagsCreateWithoutUserInput!
}

input NoteUserTagsCreateManyUserInputEnvelope {
  data: [NoteUserTagsCreateManyUserInput!]!
  skipDuplicates: Boolean
}

input NoteUserTagsCreateManyUserInput {
  noteId: Int!
  createdAt: DateTime
}

input UserCreateOrConnectWithoutMessageTemplateInput {
  where: UserWhereUniqueInput!
  create: UserCreateWithoutMessageTemplateInput!
}

input MessageTemplateCreateOrConnectWithoutCustomerInput {
  where: MessageTemplateWhereUniqueInput!
  create: MessageTemplateCreateWithoutCustomerInput!
}

input MessageTemplateCreateManyCustomerInputEnvelope {
  data: [MessageTemplateCreateManyCustomerInput!]!
  skipDuplicates: Boolean
}

input MessageTemplateCreateManyCustomerInput {
  id: Int
  eventType: EventType!
  companyType: CompanyType!
  messageType: MessageType!
  sendToAddress: String
  title: String
  subject: String!
  text: String!
  userId: Int!
  delta: JSON
  createdAt: DateTime
  updatedAt: DateTime
}

input CustomerCreateOrConnectWithoutListsInput {
  where: CustomerWhereUniqueInput!
  create: CustomerCreateWithoutListsInput!
}

input ListCreateOrConnectWithoutListCompaniesInput {
  where: ListWhereUniqueInput!
  create: ListCreateWithoutListCompaniesInput!
}

input ListCompanyCreateOrConnectWithoutCompanyInput {
  where: ListCompanyWhereUniqueInput!
  create: ListCompanyCreateWithoutCompanyInput!
}

input ListCompanyCreateManyCompanyInputEnvelope {
  data: [ListCompanyCreateManyCompanyInput!]!
  skipDuplicates: Boolean
}

input ListCompanyCreateManyCompanyInput {
  id: Int
  listId: Int!
  createdAt: DateTime
  updatedAt: DateTime
}

input CompanyCreateOrConnectWithoutUserCompanyRatingsInput {
  where: CompanyWhereUniqueInput!
  create: CompanyCreateWithoutUserCompanyRatingsInput!
}

input UserCompanyRatingsCreateOrConnectWithoutUserInput {
  where: UserCompanyRatingsWhereUniqueInput!
  create: UserCompanyRatingsCreateWithoutUserInput!
}

input UserCompanyRatingsCreateManyUserInputEnvelope {
  data: [UserCompanyRatingsCreateManyUserInput!]!
  skipDuplicates: Boolean
}

input UserCompanyRatingsCreateManyUserInput {
  id: Int
  ratingId: Int!
  companyId: Int!
  createdAt: DateTime
  updatedAt: DateTime
}

input UserCreateOrConnectWithoutCustomerInput {
  where: UserWhereUniqueInput!
  create: UserCreateWithoutCustomerInput!
}

input UserCreateManyCustomerInputEnvelope {
  data: [UserCreateManyCustomerInput!]!
  skipDuplicates: Boolean
}

input UserCreateManyCustomerInput {
  id: Int
  admin: Boolean
  email: String!
  name: String!
  passwordHash: String
  passwordSalt: String
  workPhone: String
  mobilePhone: String
  title: String
  token: String
  notificationSettings: JSON
  createdAt: DateTime
  updatedAt: DateTime
  dynamicFields: JSON
  active: Boolean
  oktaUserId: Int
  oktaManagerId: Int
  forgetPassword: String
  csmStatus: Boolean
  crmStatus: Boolean
}

input CustomerCreateOrConnectWithoutRolesInput {
  where: CustomerWhereUniqueInput!
  create: CustomerCreateWithoutRolesInput!
}

input RoleCreateOrConnectWithoutUserRolesInput {
  where: RoleWhereUniqueInput!
  create: RoleCreateWithoutUserRolesInput!
}

input UserRoleCreateOrConnectWithoutUserInput {
  where: UserRoleWhereUniqueInput!
  create: UserRoleCreateWithoutUserInput!
}

input UserRoleCreateManyUserInputEnvelope {
  data: [UserRoleCreateManyUserInput!]!
  skipDuplicates: Boolean
}

input UserRoleCreateManyUserInput {
  id: Int
  roleId: Int!
  createdAt: DateTime
}

input UserCreateOrConnectWithoutUserEventsInput {
  where: UserWhereUniqueInput!
  create: UserCreateWithoutUserEventsInput!
}

input UserEventsCreateOrConnectWithoutEventInput {
  where: UserEventsWhereUniqueInput!
  create: UserEventsCreateWithoutEventInput!
}

input UserEventsCreateManyEventInputEnvelope {
  data: [UserEventsCreateManyEventInput!]!
  skipDuplicates: Boolean
}

input UserEventsCreateManyEventInput {
  id: Int
  userId: Int!
  readAt: DateTime
  flaggedAt: Int
  hideAt: DateTime
  createdAt: DateTime
}

input EventCreateOrConnectWithoutChildEventsInput {
  where: EventWhereUniqueInput!
  create: EventCreateWithoutChildEventsInput!
}

input EventCreateOrConnectWithoutUserEventsInput {
  where: EventWhereUniqueInput!
  create: EventCreateWithoutUserEventsInput!
}

input UserEventsCreateOrConnectWithoutUserInput {
  where: UserEventsWhereUniqueInput!
  create: UserEventsCreateWithoutUserInput!
}

input UserEventsCreateManyUserInputEnvelope {
  data: [UserEventsCreateManyUserInput!]!
  skipDuplicates: Boolean
}

input UserEventsCreateManyUserInput {
  id: Int
  readAt: DateTime
  flaggedAt: Int
  hideAt: DateTime
  eventId: Int!
  createdAt: DateTime
}

input UserCreateOrConnectWithoutRolesInput {
  where: UserWhereUniqueInput!
  create: UserCreateWithoutRolesInput!
}

input UserRoleCreateOrConnectWithoutRoleInput {
  where: UserRoleWhereUniqueInput!
  create: UserRoleCreateWithoutRoleInput!
}

input UserRoleCreateManyRoleInputEnvelope {
  data: [UserRoleCreateManyRoleInput!]!
  skipDuplicates: Boolean
}

input UserRoleCreateManyRoleInput {
  id: Int
  userId: Int!
  createdAt: DateTime
}

input RoleCreateOrConnectWithoutCustomerInput {
  where: RoleWhereUniqueInput!
  create: RoleCreateWithoutCustomerInput!
}

input RoleCreateManyCustomerInputEnvelope {
  data: [RoleCreateManyCustomerInput!]!
  skipDuplicates: Boolean
}

input RoleCreateManyCustomerInput {
  id: Int
  name: String!
  createdAt: DateTime
  updatedAt: DateTime
  capabilities: RoleCreateManycapabilitiesInput
}

input RoleCreateManycapabilitiesInput {
  set: [Int!]!
}

input CustomerCreateOrConnectWithoutGroupsInput {
  where: CustomerWhereUniqueInput!
  create: CustomerCreateWithoutGroupsInput!
}

input GroupCreateOrConnectWithoutUsersInput {
  where: GroupWhereUniqueInput!
  create: GroupCreateWithoutUsersInput!
}

input GroupUserCreateOrConnectWithoutUserInput {
  where: GroupUserWhereUniqueInput!
  create: GroupUserCreateWithoutUserInput!
}

input GroupUserCreateManyUserInputEnvelope {
  data: [GroupUserCreateManyUserInput!]!
  skipDuplicates: Boolean
}

input GroupUserCreateManyUserInput {
  dummy: Int
  groupId: Int!
}

input UserCreateOrConnectWithoutNoteInput {
  where: UserWhereUniqueInput!
  create: UserCreateWithoutNoteInput!
}

input NoteCreateOrConnectWithoutCustomerInput {
  where: NoteWhereUniqueInput!
  create: NoteCreateWithoutCustomerInput!
}

input NoteCreateManyCustomerInputEnvelope {
  data: [NoteCreateManyCustomerInput!]!
  skipDuplicates: Boolean
}

input NoteCreateManyCustomerInput {
  id: Int
  eventId: Int
  readAt: DateTime
  flaggedAt: DateTime
  subject: String!
  text: String!
  companyId: Int
  createdBy: Int
  allCanView: Boolean
  createdAt: DateTime
  updatedAt: DateTime
  delta: JSON
}

input CustomerCreateOrConnectWithoutMessageTemplateInput {
  where: CustomerWhereUniqueInput!
  create: CustomerCreateWithoutMessageTemplateInput!
}

input MessageTemplateCreateOrConnectWithoutLaunchInput {
  where: MessageTemplateWhereUniqueInput!
  create: MessageTemplateCreateWithoutLaunchInput!
}

input LaunchCreateOrConnectWithoutEventsInput {
  where: LaunchWhereUniqueInput!
  create: LaunchCreateWithoutEventsInput!
}

input LaunchCreateManyEventsInputEnvelope {
  data: [LaunchCreateManyEventsInput!]!
  skipDuplicates: Boolean
}

input LaunchCreateManyEventsInput {
  id: Int
  createdAt: DateTime
  companyId: Int!
  messageTemplateId: Int
  sendToAddress: String
  subject: String!
  text: String!
  delta: JSON
  customerId: Int
}

input EventCreateOrConnectWithoutNotesInput {
  where: EventWhereUniqueInput!
  create: EventCreateWithoutNotesInput!
}

input NoteCreateOrConnectWithoutUserInput {
  where: NoteWhereUniqueInput!
  create: NoteCreateWithoutUserInput!
}

input NoteCreateManyUserInputEnvelope {
  data: [NoteCreateManyUserInput!]!
  skipDuplicates: Boolean
}

input NoteCreateManyUserInput {
  id: Int
  customerId: Int
  eventId: Int
  readAt: DateTime
  flaggedAt: DateTime
  subject: String!
  text: String!
  companyId: Int
  allCanView: Boolean
  createdAt: DateTime
  updatedAt: DateTime
  delta: JSON
}

input UserCreateOrConnectWithoutGroupsInput {
  where: UserWhereUniqueInput!
  create: UserCreateWithoutGroupsInput!
}

input GroupUserCreateOrConnectWithoutGroupInput {
  where: GroupUserWhereUniqueInput!
  create: GroupUserCreateWithoutGroupInput!
}

input GroupUserCreateManyGroupInputEnvelope {
  data: [GroupUserCreateManyGroupInput!]!
  skipDuplicates: Boolean
}

input GroupUserCreateManyGroupInput {
  dummy: Int
  userId: Int!
}

input GroupCreateOrConnectWithoutCustomerInput {
  where: GroupWhereUniqueInput!
  create: GroupCreateWithoutCustomerInput!
}

input GroupCreateManyCustomerInputEnvelope {
  data: [GroupCreateManyCustomerInput!]!
  skipDuplicates: Boolean
}

input GroupCreateManyCustomerInput {
  id: Int
  name: String!
  createdAt: DateTime
  updatedAt: DateTime
  parentId: Int
}

input CustomerCreateOrConnectWithoutExternalGroupsInput {
  where: CustomerWhereUniqueInput!
  create: CustomerCreateWithoutExternalGroupsInput!
}

input ExternalGroupCreateOrConnectWithoutMembersInput {
  where: ExternalGroupWhereUniqueInput!
  create: ExternalGroupCreateWithoutMembersInput!
}

input ExternalGroupMemberCreateOrConnectWithoutUserInput {
  where: ExternalGroupMemberWhereUniqueInput!
  create: ExternalGroupMemberCreateWithoutUserInput!
}

input ExternalGroupMemberCreateManyUserInputEnvelope {
  data: [ExternalGroupMemberCreateManyUserInput!]!
  skipDuplicates: Boolean
}

input ExternalGroupMemberCreateManyUserInput {
  groupId: String!
  createdAt: DateTime
}

input ExternalUserCreateOrConnectWithoutUserInput {
  where: ExternalUserWhereUniqueInput!
  create: ExternalUserCreateWithoutUserInput!
}

input ExternalUserCreateManyUserInputEnvelope {
  data: [ExternalUserCreateManyUserInput!]!
  skipDuplicates: Boolean
}

input ExternalUserCreateManyUserInput {
  customerId: Int!
  department: String
  division: String
  email: String
  employeeNumber: String
  externalId: String!
  name: String
  source: CustomerIntegrationType!
  title: String
  createdAt: DateTime
  updatedAt: DateTime
}

input UserCreateOrConnectWithoutUserCompanyRatingsInput {
  where: UserWhereUniqueInput!
  create: UserCreateWithoutUserCompanyRatingsInput!
}

input UserCompanyRatingsCreateOrConnectWithoutCompanyInput {
  where: UserCompanyRatingsWhereUniqueInput!
  create: UserCompanyRatingsCreateWithoutCompanyInput!
}

input UserCompanyRatingsCreateManyCompanyInputEnvelope {
  data: [UserCompanyRatingsCreateManyCompanyInput!]!
  skipDuplicates: Boolean
}

input UserCompanyRatingsCreateManyCompanyInput {
  id: Int
  userId: Int!
  ratingId: Int!
  createdAt: DateTime
  updatedAt: DateTime
}

input CompanyCreateOrConnectWithoutNotesInput {
  where: CompanyWhereUniqueInput!
  create: CompanyCreateWithoutNotesInput!
}

input NoteCreateOrConnectWithoutEventsInput {
  where: NoteWhereUniqueInput!
  create: NoteCreateWithoutEventsInput!
}

input NoteCreateManyEventsInputEnvelope {
  data: [NoteCreateManyEventsInput!]!
  skipDuplicates: Boolean
}

input NoteCreateManyEventsInput {
  id: Int
  customerId: Int
  readAt: DateTime
  flaggedAt: DateTime
  subject: String!
  text: String!
  companyId: Int
  createdBy: Int
  allCanView: Boolean
  createdAt: DateTime
  updatedAt: DateTime
  delta: JSON
}

input EventCreateOrConnectWithoutLaunchInput {
  where: EventWhereUniqueInput!
  create: EventCreateWithoutLaunchInput!
}

input LaunchCreateOrConnectWithoutLaunchContactsInput {
  where: LaunchWhereUniqueInput!
  create: LaunchCreateWithoutLaunchContactsInput!
}

input LaunchContactsCreateOrConnectWithoutContactInput {
  where: LaunchContactsWhereUniqueInput!
  create: LaunchContactsCreateWithoutContactInput!
}

input LaunchContactsCreateManyContactInputEnvelope {
  data: [LaunchContactsCreateManyContactInput!]!
  skipDuplicates: Boolean
}

input LaunchContactsCreateManyContactInput {
  id: Int
  launchId: Int!
  createdAt: DateTime
}

input ContactsCreateOrConnectWithoutCompanyInput {
  where: ContactsWhereUniqueInput!
  create: ContactsCreateWithoutCompanyInput!
}

input ContactsCreateManyCompanyInputEnvelope {
  data: [ContactsCreateManyCompanyInput!]!
  skipDuplicates: Boolean
}

input ContactsCreateManyCompanyInput {
  id: Int
  email: String!
  name: String!
  workPhone: String
  mobilePhone: String
  createdAt: DateTime
  updatedAt: DateTime
  primary: Boolean
  image: String
}

input CompanyCreateOrConnectWithoutStarredByInput {
  where: CompanyWhereUniqueInput!
  create: CompanyCreateWithoutStarredByInput!
}

input CompanyStarredCreateOrConnectWithoutUserInput {
  where: CompanyStarredWhereUniqueInput!
  create: CompanyStarredCreateWithoutUserInput!
}

input CompanyStarredCreateManyUserInputEnvelope {
  data: [CompanyStarredCreateManyUserInput!]!
  skipDuplicates: Boolean
}

input CompanyStarredCreateManyUserInput {
  dummy: Int
  createdAt: DateTime
  companyId: Int!
}

input UserCreateOrConnectWithoutExternalUserInput {
  where: UserWhereUniqueInput!
  create: UserCreateWithoutExternalUserInput!
}

input ExternalUserCreateOrConnectWithoutCustomerInput {
  where: ExternalUserWhereUniqueInput!
  create: ExternalUserCreateWithoutCustomerInput!
}

input ExternalUserCreateManyCustomerInputEnvelope {
  data: [ExternalUserCreateManyCustomerInput!]!
  skipDuplicates: Boolean
}

input ExternalUserCreateManyCustomerInput {
  department: String
  division: String
  email: String
  employeeNumber: String
  externalId: String!
  name: String
  source: CustomerIntegrationType!
  userId: Int
  title: String
  createdAt: DateTime
  updatedAt: DateTime
}

input CustomerCreateOrConnectWithoutNotesInput {
  where: CustomerWhereUniqueInput!
  create: CustomerCreateWithoutNotesInput!
}

input NoteCreateOrConnectWithoutCompanyInput {
  where: NoteWhereUniqueInput!
  create: NoteCreateWithoutCompanyInput!
}

input NoteCreateManyCompanyInputEnvelope {
  data: [NoteCreateManyCompanyInput!]!
  skipDuplicates: Boolean
}

input NoteCreateManyCompanyInput {
  id: Int
  customerId: Int
  eventId: Int
  readAt: DateTime
  flaggedAt: DateTime
  subject: String!
  text: String!
  createdBy: Int
  allCanView: Boolean
  createdAt: DateTime
  updatedAt: DateTime
  delta: JSON
}

input CompanyCreateOrConnectWithoutEventsInput {
  where: CompanyWhereUniqueInput!
  create: CompanyCreateWithoutEventsInput!
}

input EventCreateOrConnectWithoutCustomerInput {
  where: EventWhereUniqueInput!
  create: EventCreateWithoutCustomerInput!
}

input EventCreateManyCustomerInputEnvelope {
  data: [EventCreateManyCustomerInput!]!
  skipDuplicates: Boolean
}

input EventCreateManyCustomerInput {
  id: Int
  data: JSON
  notifiedAt: DateTime
  text: String
  type: EventType!
  companyId: Int
  needsAttention: EventAttention
  createdAt: DateTime
  parentEventId: Int
  messageId: Int
}

input CustomerCreateOrConnectWithoutExternalUsersInput {
  where: CustomerWhereUniqueInput!
  create: CustomerCreateWithoutExternalUsersInput!
}

input ExternalUserCreateOrConnectWithoutExternalGroupsInput {
  where: ExternalUserWhereUniqueInput!
  create: ExternalUserCreateWithoutExternalGroupsInput!
}

input ExternalGroupMemberCreateOrConnectWithoutGroupInput {
  where: ExternalGroupMemberWhereUniqueInput!
  create: ExternalGroupMemberCreateWithoutGroupInput!
}

input ExternalGroupMemberCreateManyGroupInputEnvelope {
  data: [ExternalGroupMemberCreateManyGroupInput!]!
  skipDuplicates: Boolean
}

input ExternalGroupMemberCreateManyGroupInput {
  userId: String!
  createdAt: DateTime
}

input ExternalGroupCreateOrConnectWithoutCustomerInput {
  where: ExternalGroupWhereUniqueInput!
  create: ExternalGroupCreateWithoutCustomerInput!
}

input ExternalGroupCreateManyCustomerInputEnvelope {
  data: [ExternalGroupCreateManyCustomerInput!]!
  skipDuplicates: Boolean
}

input ExternalGroupCreateManyCustomerInput {
  externalId: String!
  developerName: String!
  name: String
  ownerId: String
  source: CustomerIntegrationType!
  type: String
  createdAt: DateTime
  updatedAt: DateTime
}

input CustomerCreateOrConnectWithoutEventsInput {
  where: CustomerWhereUniqueInput!
  create: CustomerCreateWithoutEventsInput!
}

input EventCreateOrConnectWithoutCompanyInput {
  where: EventWhereUniqueInput!
  create: EventCreateWithoutCompanyInput!
}

input EventCreateManyCompanyInputEnvelope {
  data: [EventCreateManyCompanyInput!]!
  skipDuplicates: Boolean
}

input EventCreateManyCompanyInput {
  id: Int
  customerId: Int!
  data: JSON
  notifiedAt: DateTime
  text: String
  type: EventType!
  needsAttention: EventAttention
  createdAt: DateTime
  parentEventId: Int
  messageId: Int
}

input CompanyCreateOrConnectWithoutPrimaryContactInput {
  where: CompanyWhereUniqueInput!
  create: CompanyCreateWithoutPrimaryContactInput!
}

input CompanyCreateManyPrimaryContactInputEnvelope {
  data: [CompanyCreateManyPrimaryContactInput!]!
  skipDuplicates: Boolean
}

input CompanyCreateManyPrimaryContactInput {
  id: Int
  leadSourceId: Int
  annualRecurringRevenue: Int
  customerId: Int!
  expectedToCloseAt: DateTime
  fiscalYearStartMonth: Int
  name: String!
  companyType: CompanyType!
  seatSize: Int
  createdAt: DateTime
  updatedAt: DateTime
  fiscalYear: Int
  parentId: Int
  accountId: Int!
  renewalDate: DateTime
  referredOn: DateTime
  latestReferenceId: Int
}

input UserCreateOrConnectWithoutStarredInput {
  where: UserWhereUniqueInput!
  create: UserCreateWithoutStarredInput!
}

input CompanyStarredCreateOrConnectWithoutCompanyInput {
  where: CompanyStarredWhereUniqueInput!
  create: CompanyStarredCreateWithoutCompanyInput!
}

input CompanyStarredCreateManyCompanyInputEnvelope {
  data: [CompanyStarredCreateManyCompanyInput!]!
  skipDuplicates: Boolean
}

input CompanyStarredCreateManyCompanyInput {
  dummy: Int
  createdAt: DateTime
  userId: Int!
}

input CompanyCreateOrConnectWithoutReferencesInput {
  where: CompanyWhereUniqueInput!
  create: CompanyCreateWithoutReferencesInput!
}

input UserCreateNestedOneWithoutReferencesInput {
  create: UserCreateWithoutReferencesInput
  connectOrCreate: UserCreateOrConnectWithoutReferencesInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutReferencesInput {
  admin: Boolean
  email: String!
  name: String!
  passwordHash: String
  passwordSalt: String
  workPhone: String
  mobilePhone: String
  title: String
  token: String
  notificationSettings: JSON
  createdAt: DateTime
  updatedAt: DateTime
  dynamicFields: JSON
  active: Boolean
  oktaUserId: Int
  oktaManagerId: Int
  forgetPassword: String
  csmStatus: Boolean
  crmStatus: Boolean
  customer: CustomerCreateNestedOneWithoutUsersInput!
  leadSourceFor: CompanyCreateNestedManyWithoutLeadSourceInput
  primaryContactFor: CompanyCreateNestedManyWithoutPrimaryContactInput
  starred: CompanyStarredCreateNestedManyWithoutUserInput
  externalUser: ExternalUserCreateNestedManyWithoutUserInput
  groups: GroupUserCreateNestedManyWithoutUserInput
  Note: NoteCreateNestedManyWithoutUserInput
  roles: UserRoleCreateNestedManyWithoutUserInput
  userEvents: UserEventsCreateNestedManyWithoutUserInput
  UserCompanyRatings: UserCompanyRatingsCreateNestedManyWithoutUserInput
  noteUserTags: NoteUserTagsCreateNestedManyWithoutUserInput
  messageTemplate: MessageTemplateCreateNestedManyWithoutUserInput
  Feedback: FeedbackCreateNestedManyWithoutUserInput
  userManager: UserManagerCreateNestedManyWithoutUserInput
  userReportee: UserManagerCreateNestedManyWithoutManagerInput
}

input UserCreateOrConnectWithoutReferencesInput {
  where: UserWhereUniqueInput!
  create: UserCreateWithoutReferencesInput!
}

input ReferenceCreateOrConnectWithoutServedAsReferenceForInput {
  where: ReferenceWhereUniqueInput!
  create: ReferenceCreateWithoutServedAsReferenceForInput!
}

input ReferenceCreateManyServedAsReferenceForInputEnvelope {
  data: [ReferenceCreateManyServedAsReferenceForInput!]!
  skipDuplicates: Boolean
}

input ReferenceCreateManyServedAsReferenceForInput {
  id: Int
  companyId: Int!
  offeredTo: Boolean!
  servedAsReferenceBefore: Boolean!
  servedAsReferenceAt: DateTime
  notes: String
  dealClosed: Boolean
  createdAt: DateTime
  userId: Int!
}

input CompanyCreateOrConnectWithoutCompanyParentInput {
  where: CompanyWhereUniqueInput!
  create: CompanyCreateWithoutCompanyParentInput!
}

input CompanyCreateManyCompanyParentInputEnvelope {
  data: [CompanyCreateManyCompanyParentInput!]!
  skipDuplicates: Boolean
}

input CompanyCreateManyCompanyParentInput {
  id: Int
  leadSourceId: Int
  annualRecurringRevenue: Int
  customerId: Int!
  expectedToCloseAt: DateTime
  fiscalYearStartMonth: Int
  name: String!
  companyType: CompanyType!
  primaryContactId: Int
  seatSize: Int
  createdAt: DateTime
  updatedAt: DateTime
  fiscalYear: Int
  accountId: Int!
  renewalDate: DateTime
  referredOn: DateTime
  latestReferenceId: Int
}

input CompanyCreateOrConnectWithoutReferencesServedForInput {
  where: CompanyWhereUniqueInput!
  create: CompanyCreateWithoutReferencesServedForInput!
}

input ReferenceCreateOrConnectWithoutCompanyInput {
  where: ReferenceWhereUniqueInput!
  create: ReferenceCreateWithoutCompanyInput!
}

input ReferenceCreateManyCompanyInputEnvelope {
  data: [ReferenceCreateManyCompanyInput!]!
  skipDuplicates: Boolean
}

input ReferenceCreateManyCompanyInput {
  id: Int
  offeredTo: Boolean!
  servedAsReferenceBefore: Boolean!
  servedAsReferenceForId: Int
  servedAsReferenceAt: DateTime
  notes: String
  dealClosed: Boolean
  createdAt: DateTime
  userId: Int!
}

input CompanyCreateOrConnectWithoutLeadSourceInput {
  where: CompanyWhereUniqueInput!
  create: CompanyCreateWithoutLeadSourceInput!
}

input CompanyCreateManyLeadSourceInputEnvelope {
  data: [CompanyCreateManyLeadSourceInput!]!
  skipDuplicates: Boolean
}

input CompanyCreateManyLeadSourceInput {
  id: Int
  annualRecurringRevenue: Int
  customerId: Int!
  expectedToCloseAt: DateTime
  fiscalYearStartMonth: Int
  name: String!
  companyType: CompanyType!
  primaryContactId: Int
  seatSize: Int
  createdAt: DateTime
  updatedAt: DateTime
  fiscalYear: Int
  parentId: Int
  accountId: Int!
  renewalDate: DateTime
  referredOn: DateTime
  latestReferenceId: Int
}

input UserCreateOrConnectWithoutPrimaryContactForInput {
  where: UserWhereUniqueInput!
  create: UserCreateWithoutPrimaryContactForInput!
}

input CompanyCreateOrConnectWithoutSubsidiaryInput {
  where: CompanyWhereUniqueInput!
  create: CompanyCreateWithoutSubsidiaryInput!
}

input CompanyCreateOrConnectWithoutCustomerInput {
  where: CompanyWhereUniqueInput!
  create: CompanyCreateWithoutCustomerInput!
}

input CompanyCreateManyCustomerInputEnvelope {
  data: [CompanyCreateManyCustomerInput!]!
  skipDuplicates: Boolean
}

input CompanyCreateManyCustomerInput {
  id: Int
  leadSourceId: Int
  annualRecurringRevenue: Int
  expectedToCloseAt: DateTime
  fiscalYearStartMonth: Int
  name: String!
  companyType: CompanyType!
  primaryContactId: Int
  seatSize: Int
  createdAt: DateTime
  updatedAt: DateTime
  fiscalYear: Int
  parentId: Int
  accountId: Int!
  renewalDate: DateTime
  referredOn: DateTime
  latestReferenceId: Int
}

input CustomerCreateOrConnectWithoutUsersInput {
  where: CustomerWhereUniqueInput!
  create: CustomerCreateWithoutUsersInput!
}

input UserCreateOrConnectWithoutLeadSourceForInput {
  where: UserWhereUniqueInput!
  create: UserCreateWithoutLeadSourceForInput!
}

input CompanyCreateOrConnectWithoutLaunchInput {
  where: CompanyWhereUniqueInput!
  create: CompanyCreateWithoutLaunchInput!
}

input LaunchCreateOrConnectWithoutCustomerInput {
  where: LaunchWhereUniqueInput!
  create: LaunchCreateWithoutCustomerInput!
}

input LaunchCreateManyCustomerInputEnvelope {
  data: [LaunchCreateManyCustomerInput!]!
  skipDuplicates: Boolean
}

input LaunchCreateManyCustomerInput {
  id: Int
  createdAt: DateTime
  companyId: Int!
  eventId: Int
  messageTemplateId: Int
  sendToAddress: String
  subject: String!
  text: String!
  delta: JSON
}

input CustomerCreateOrConnectWithoutCompaniesInput {
  where: CustomerWhereUniqueInput!
  create: CustomerCreateWithoutCompaniesInput!
}

input CompanyCreateOrConnectWithoutAccountInput {
  where: CompanyWhereUniqueInput!
  create: CompanyCreateWithoutAccountInput!
}

input CompanyCreateManyAccountInputEnvelope {
  data: [CompanyCreateManyAccountInput!]!
  skipDuplicates: Boolean
}

input CompanyCreateManyAccountInput {
  id: Int
  leadSourceId: Int
  annualRecurringRevenue: Int
  customerId: Int!
  expectedToCloseAt: DateTime
  fiscalYearStartMonth: Int
  name: String!
  companyType: CompanyType!
  primaryContactId: Int
  seatSize: Int
  createdAt: DateTime
  updatedAt: DateTime
  fiscalYear: Int
  parentId: Int
  renewalDate: DateTime
  referredOn: DateTime
  latestReferenceId: Int
}

type AffectedRowsOutput {
  count: Int!
}

input AccountCreateManyInput {
  id: Int
  accountName: String!
  AccountUUID: String
}

input AccountUpdateInput {
  accountName: StringFieldUpdateOperationsInput
  AccountUUID: StringFieldUpdateOperationsInput
  company: CompanyUpdateManyWithoutAccountInput
}

input StringFieldUpdateOperationsInput {
  set: String
}

input CompanyUpdateManyWithoutAccountInput {
  create: [CompanyCreateWithoutAccountInput!]
  connectOrCreate: [CompanyCreateOrConnectWithoutAccountInput!]
  upsert: [CompanyUpsertWithWhereUniqueWithoutAccountInput!]
  createMany: CompanyCreateManyAccountInputEnvelope
  connect: [CompanyWhereUniqueInput!]
  set: [CompanyWhereUniqueInput!]
  disconnect: [CompanyWhereUniqueInput!]
  delete: [CompanyWhereUniqueInput!]
  update: [CompanyUpdateWithWhereUniqueWithoutAccountInput!]
  updateMany: [CompanyUpdateManyWithWhereWithoutAccountInput!]
  deleteMany: [CompanyScalarWhereInput!]
}

input CompanyUpsertWithWhereUniqueWithoutAccountInput {
  where: CompanyWhereUniqueInput!
  update: CompanyUpdateWithoutAccountInput!
  create: CompanyCreateWithoutAccountInput!
}

input CompanyUpdateWithoutAccountInput {
  annualRecurringRevenue: NullableIntFieldUpdateOperationsInput
  expectedToCloseAt: NullableDateTimeFieldUpdateOperationsInput
  fiscalYearStartMonth: NullableIntFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  companyType: EnumCompanyTypeFieldUpdateOperationsInput
  seatSize: NullableIntFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  fiscalYear: IntFieldUpdateOperationsInput
  renewalDate: NullableDateTimeFieldUpdateOperationsInput
  referredOn: NullableDateTimeFieldUpdateOperationsInput
  latestReferenceId: NullableIntFieldUpdateOperationsInput
  customer: CustomerUpdateOneRequiredWithoutCompaniesInput
  leadSource: UserUpdateOneWithoutLeadSourceForInput
  companyParent: CompanyUpdateOneWithoutSubsidiaryInput
  primaryContact: UserUpdateOneWithoutPrimaryContactForInput
  references: ReferenceUpdateManyWithoutCompanyInput
  referencesServedFor: ReferenceUpdateManyWithoutServedAsReferenceForInput
  subsidiary: CompanyUpdateManyWithoutCompanyParentInput
  starredBy: CompanyStarredUpdateManyWithoutCompanyInput
  events: EventUpdateManyWithoutCompanyInput
  notes: NoteUpdateManyWithoutCompanyInput
  competitors: CompetitorUpdateManyWithoutCompanyInput
  products: ProductUpdateManyWithoutCompanyInput
  contacts: ContactsUpdateManyWithoutCompanyInput
  UserCompanyRatings: UserCompanyRatingsUpdateManyWithoutCompanyInput
  listCompanies: ListCompanyUpdateManyWithoutCompanyInput
  Launch: LaunchUpdateManyWithoutCompanyInput
}

input NullableIntFieldUpdateOperationsInput {
  set: Int
  increment: Int
  decrement: Int
  multiply: Int
  divide: Int
}

input NullableDateTimeFieldUpdateOperationsInput {
  set: DateTime
}

input EnumCompanyTypeFieldUpdateOperationsInput {
  set: CompanyType
}

input DateTimeFieldUpdateOperationsInput {
  set: DateTime
}

input IntFieldUpdateOperationsInput {
  set: Int
  increment: Int
  decrement: Int
  multiply: Int
  divide: Int
}

input CustomerUpdateOneRequiredWithoutCompaniesInput {
  create: CustomerCreateWithoutCompaniesInput
  connectOrCreate: CustomerCreateOrConnectWithoutCompaniesInput
  upsert: CustomerUpsertWithoutCompaniesInput
  connect: CustomerWhereUniqueInput
  update: CustomerUpdateWithoutCompaniesInput
}

input CustomerUpsertWithoutCompaniesInput {
  update: CustomerUpdateWithoutCompaniesInput!
  create: CustomerCreateWithoutCompaniesInput!
}

input CustomerUpdateWithoutCompaniesInput {
  name: StringFieldUpdateOperationsInput
  type: EnumCustomerTypeFieldUpdateOperationsInput
  favoritedAt: NullableDateTimeFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  oktaClientId: NullableStringFieldUpdateOperationsInput
  oktaDomain: NullableStringFieldUpdateOperationsInput
  oktaClientSecret: NullableStringFieldUpdateOperationsInput
  oktaApiKey: NullableStringFieldUpdateOperationsInput
  launch: LaunchUpdateManyWithoutCustomerInput
  integrations: CustomerIntegrationUpdateManyWithoutCustomerInput
  events: EventUpdateManyWithoutCustomerInput
  externalGroups: ExternalGroupUpdateManyWithoutCustomerInput
  externalUsers: ExternalUserUpdateManyWithoutCustomerInput
  groups: GroupUpdateManyWithoutCustomerInput
  notes: NoteUpdateManyWithoutCustomerInput
  roles: RoleUpdateManyWithoutCustomerInput
  salesLeads: SalesLeadUpdateManyWithoutCustomerInput
  syncEvents: SyncEventUpdateManyWithoutCustomerInput
  users: UserUpdateManyWithoutCustomerInput
  messageTemplate: MessageTemplateUpdateManyWithoutCustomerInput
  dynamicFields: DynamicUserFieldsUpdateManyWithoutCustomerInput
  lists: ListUpdateManyWithoutCustomerInput
  useCaseCollections: UseCaseCollectionsUpdateManyWithoutCustomerInput
  customerDataSources: DataSourcesOnCustomerUpdateManyWithoutCustomerInput
  dataObjectCollections: DataObjectCollectionsUpdateManyWithoutCustomerInput
}

input EnumCustomerTypeFieldUpdateOperationsInput {
  set: CustomerType
}

input NullableStringFieldUpdateOperationsInput {
  set: String
}

input LaunchUpdateManyWithoutCustomerInput {
  create: [LaunchCreateWithoutCustomerInput!]
  connectOrCreate: [LaunchCreateOrConnectWithoutCustomerInput!]
  upsert: [LaunchUpsertWithWhereUniqueWithoutCustomerInput!]
  createMany: LaunchCreateManyCustomerInputEnvelope
  connect: [LaunchWhereUniqueInput!]
  set: [LaunchWhereUniqueInput!]
  disconnect: [LaunchWhereUniqueInput!]
  delete: [LaunchWhereUniqueInput!]
  update: [LaunchUpdateWithWhereUniqueWithoutCustomerInput!]
  updateMany: [LaunchUpdateManyWithWhereWithoutCustomerInput!]
  deleteMany: [LaunchScalarWhereInput!]
}

input LaunchUpsertWithWhereUniqueWithoutCustomerInput {
  where: LaunchWhereUniqueInput!
  update: LaunchUpdateWithoutCustomerInput!
  create: LaunchCreateWithoutCustomerInput!
}

input LaunchUpdateWithoutCustomerInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  sendToAddress: NullableStringFieldUpdateOperationsInput
  subject: StringFieldUpdateOperationsInput
  text: StringFieldUpdateOperationsInput
  delta: JSON
  company: CompanyUpdateOneRequiredWithoutLaunchInput
  events: EventUpdateOneWithoutLaunchInput
  messageTempate: MessageTemplateUpdateOneWithoutLaunchInput
  launchContacts: LaunchContactsUpdateManyWithoutLaunchInput
}

input CompanyUpdateOneRequiredWithoutLaunchInput {
  create: CompanyCreateWithoutLaunchInput
  connectOrCreate: CompanyCreateOrConnectWithoutLaunchInput
  upsert: CompanyUpsertWithoutLaunchInput
  connect: CompanyWhereUniqueInput
  update: CompanyUpdateWithoutLaunchInput
}

input CompanyUpsertWithoutLaunchInput {
  update: CompanyUpdateWithoutLaunchInput!
  create: CompanyCreateWithoutLaunchInput!
}

input CompanyUpdateWithoutLaunchInput {
  annualRecurringRevenue: NullableIntFieldUpdateOperationsInput
  expectedToCloseAt: NullableDateTimeFieldUpdateOperationsInput
  fiscalYearStartMonth: NullableIntFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  companyType: EnumCompanyTypeFieldUpdateOperationsInput
  seatSize: NullableIntFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  fiscalYear: IntFieldUpdateOperationsInput
  renewalDate: NullableDateTimeFieldUpdateOperationsInput
  referredOn: NullableDateTimeFieldUpdateOperationsInput
  latestReferenceId: NullableIntFieldUpdateOperationsInput
  customer: CustomerUpdateOneRequiredWithoutCompaniesInput
  leadSource: UserUpdateOneWithoutLeadSourceForInput
  companyParent: CompanyUpdateOneWithoutSubsidiaryInput
  primaryContact: UserUpdateOneWithoutPrimaryContactForInput
  references: ReferenceUpdateManyWithoutCompanyInput
  referencesServedFor: ReferenceUpdateManyWithoutServedAsReferenceForInput
  subsidiary: CompanyUpdateManyWithoutCompanyParentInput
  starredBy: CompanyStarredUpdateManyWithoutCompanyInput
  events: EventUpdateManyWithoutCompanyInput
  notes: NoteUpdateManyWithoutCompanyInput
  account: AccountUpdateOneRequiredWithoutCompanyInput
  competitors: CompetitorUpdateManyWithoutCompanyInput
  products: ProductUpdateManyWithoutCompanyInput
  contacts: ContactsUpdateManyWithoutCompanyInput
  UserCompanyRatings: UserCompanyRatingsUpdateManyWithoutCompanyInput
  listCompanies: ListCompanyUpdateManyWithoutCompanyInput
}

input UserUpdateOneWithoutLeadSourceForInput {
  create: UserCreateWithoutLeadSourceForInput
  connectOrCreate: UserCreateOrConnectWithoutLeadSourceForInput
  upsert: UserUpsertWithoutLeadSourceForInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: UserUpdateWithoutLeadSourceForInput
}

input UserUpsertWithoutLeadSourceForInput {
  update: UserUpdateWithoutLeadSourceForInput!
  create: UserCreateWithoutLeadSourceForInput!
}

input UserUpdateWithoutLeadSourceForInput {
  admin: BoolFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  passwordHash: NullableStringFieldUpdateOperationsInput
  passwordSalt: NullableStringFieldUpdateOperationsInput
  workPhone: NullableStringFieldUpdateOperationsInput
  mobilePhone: NullableStringFieldUpdateOperationsInput
  title: NullableStringFieldUpdateOperationsInput
  token: NullableStringFieldUpdateOperationsInput
  notificationSettings: JSON
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  dynamicFields: JSON
  active: BoolFieldUpdateOperationsInput
  oktaUserId: NullableIntFieldUpdateOperationsInput
  oktaManagerId: NullableIntFieldUpdateOperationsInput
  forgetPassword: NullableStringFieldUpdateOperationsInput
  csmStatus: BoolFieldUpdateOperationsInput
  crmStatus: BoolFieldUpdateOperationsInput
  customer: CustomerUpdateOneRequiredWithoutUsersInput
  primaryContactFor: CompanyUpdateManyWithoutPrimaryContactInput
  starred: CompanyStarredUpdateManyWithoutUserInput
  externalUser: ExternalUserUpdateManyWithoutUserInput
  groups: GroupUserUpdateManyWithoutUserInput
  Note: NoteUpdateManyWithoutUserInput
  roles: UserRoleUpdateManyWithoutUserInput
  userEvents: UserEventsUpdateManyWithoutUserInput
  UserCompanyRatings: UserCompanyRatingsUpdateManyWithoutUserInput
  noteUserTags: NoteUserTagsUpdateManyWithoutUserInput
  messageTemplate: MessageTemplateUpdateManyWithoutUserInput
  Feedback: FeedbackUpdateManyWithoutUserInput
  references: ReferenceUpdateManyWithoutUserInput
  userManager: UserManagerUpdateManyWithoutUserInput
  userReportee: UserManagerUpdateManyWithoutManagerInput
}

input BoolFieldUpdateOperationsInput {
  set: Boolean
}

input CustomerUpdateOneRequiredWithoutUsersInput {
  create: CustomerCreateWithoutUsersInput
  connectOrCreate: CustomerCreateOrConnectWithoutUsersInput
  upsert: CustomerUpsertWithoutUsersInput
  connect: CustomerWhereUniqueInput
  update: CustomerUpdateWithoutUsersInput
}

input CustomerUpsertWithoutUsersInput {
  update: CustomerUpdateWithoutUsersInput!
  create: CustomerCreateWithoutUsersInput!
}

input CustomerUpdateWithoutUsersInput {
  name: StringFieldUpdateOperationsInput
  type: EnumCustomerTypeFieldUpdateOperationsInput
  favoritedAt: NullableDateTimeFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  oktaClientId: NullableStringFieldUpdateOperationsInput
  oktaDomain: NullableStringFieldUpdateOperationsInput
  oktaClientSecret: NullableStringFieldUpdateOperationsInput
  oktaApiKey: NullableStringFieldUpdateOperationsInput
  launch: LaunchUpdateManyWithoutCustomerInput
  companies: CompanyUpdateManyWithoutCustomerInput
  integrations: CustomerIntegrationUpdateManyWithoutCustomerInput
  events: EventUpdateManyWithoutCustomerInput
  externalGroups: ExternalGroupUpdateManyWithoutCustomerInput
  externalUsers: ExternalUserUpdateManyWithoutCustomerInput
  groups: GroupUpdateManyWithoutCustomerInput
  notes: NoteUpdateManyWithoutCustomerInput
  roles: RoleUpdateManyWithoutCustomerInput
  salesLeads: SalesLeadUpdateManyWithoutCustomerInput
  syncEvents: SyncEventUpdateManyWithoutCustomerInput
  messageTemplate: MessageTemplateUpdateManyWithoutCustomerInput
  dynamicFields: DynamicUserFieldsUpdateManyWithoutCustomerInput
  lists: ListUpdateManyWithoutCustomerInput
  useCaseCollections: UseCaseCollectionsUpdateManyWithoutCustomerInput
  customerDataSources: DataSourcesOnCustomerUpdateManyWithoutCustomerInput
  dataObjectCollections: DataObjectCollectionsUpdateManyWithoutCustomerInput
}

input CompanyUpdateManyWithoutCustomerInput {
  create: [CompanyCreateWithoutCustomerInput!]
  connectOrCreate: [CompanyCreateOrConnectWithoutCustomerInput!]
  upsert: [CompanyUpsertWithWhereUniqueWithoutCustomerInput!]
  createMany: CompanyCreateManyCustomerInputEnvelope
  connect: [CompanyWhereUniqueInput!]
  set: [CompanyWhereUniqueInput!]
  disconnect: [CompanyWhereUniqueInput!]
  delete: [CompanyWhereUniqueInput!]
  update: [CompanyUpdateWithWhereUniqueWithoutCustomerInput!]
  updateMany: [CompanyUpdateManyWithWhereWithoutCustomerInput!]
  deleteMany: [CompanyScalarWhereInput!]
}

input CompanyUpsertWithWhereUniqueWithoutCustomerInput {
  where: CompanyWhereUniqueInput!
  update: CompanyUpdateWithoutCustomerInput!
  create: CompanyCreateWithoutCustomerInput!
}

input CompanyUpdateWithoutCustomerInput {
  annualRecurringRevenue: NullableIntFieldUpdateOperationsInput
  expectedToCloseAt: NullableDateTimeFieldUpdateOperationsInput
  fiscalYearStartMonth: NullableIntFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  companyType: EnumCompanyTypeFieldUpdateOperationsInput
  seatSize: NullableIntFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  fiscalYear: IntFieldUpdateOperationsInput
  renewalDate: NullableDateTimeFieldUpdateOperationsInput
  referredOn: NullableDateTimeFieldUpdateOperationsInput
  latestReferenceId: NullableIntFieldUpdateOperationsInput
  leadSource: UserUpdateOneWithoutLeadSourceForInput
  companyParent: CompanyUpdateOneWithoutSubsidiaryInput
  primaryContact: UserUpdateOneWithoutPrimaryContactForInput
  references: ReferenceUpdateManyWithoutCompanyInput
  referencesServedFor: ReferenceUpdateManyWithoutServedAsReferenceForInput
  subsidiary: CompanyUpdateManyWithoutCompanyParentInput
  starredBy: CompanyStarredUpdateManyWithoutCompanyInput
  events: EventUpdateManyWithoutCompanyInput
  notes: NoteUpdateManyWithoutCompanyInput
  account: AccountUpdateOneRequiredWithoutCompanyInput
  competitors: CompetitorUpdateManyWithoutCompanyInput
  products: ProductUpdateManyWithoutCompanyInput
  contacts: ContactsUpdateManyWithoutCompanyInput
  UserCompanyRatings: UserCompanyRatingsUpdateManyWithoutCompanyInput
  listCompanies: ListCompanyUpdateManyWithoutCompanyInput
  Launch: LaunchUpdateManyWithoutCompanyInput
}

input CompanyUpdateOneWithoutSubsidiaryInput {
  create: CompanyCreateWithoutSubsidiaryInput
  connectOrCreate: CompanyCreateOrConnectWithoutSubsidiaryInput
  upsert: CompanyUpsertWithoutSubsidiaryInput
  connect: CompanyWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: CompanyUpdateWithoutSubsidiaryInput
}

input CompanyUpsertWithoutSubsidiaryInput {
  update: CompanyUpdateWithoutSubsidiaryInput!
  create: CompanyCreateWithoutSubsidiaryInput!
}

input CompanyUpdateWithoutSubsidiaryInput {
  annualRecurringRevenue: NullableIntFieldUpdateOperationsInput
  expectedToCloseAt: NullableDateTimeFieldUpdateOperationsInput
  fiscalYearStartMonth: NullableIntFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  companyType: EnumCompanyTypeFieldUpdateOperationsInput
  seatSize: NullableIntFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  fiscalYear: IntFieldUpdateOperationsInput
  renewalDate: NullableDateTimeFieldUpdateOperationsInput
  referredOn: NullableDateTimeFieldUpdateOperationsInput
  latestReferenceId: NullableIntFieldUpdateOperationsInput
  customer: CustomerUpdateOneRequiredWithoutCompaniesInput
  leadSource: UserUpdateOneWithoutLeadSourceForInput
  companyParent: CompanyUpdateOneWithoutSubsidiaryInput
  primaryContact: UserUpdateOneWithoutPrimaryContactForInput
  references: ReferenceUpdateManyWithoutCompanyInput
  referencesServedFor: ReferenceUpdateManyWithoutServedAsReferenceForInput
  starredBy: CompanyStarredUpdateManyWithoutCompanyInput
  events: EventUpdateManyWithoutCompanyInput
  notes: NoteUpdateManyWithoutCompanyInput
  account: AccountUpdateOneRequiredWithoutCompanyInput
  competitors: CompetitorUpdateManyWithoutCompanyInput
  products: ProductUpdateManyWithoutCompanyInput
  contacts: ContactsUpdateManyWithoutCompanyInput
  UserCompanyRatings: UserCompanyRatingsUpdateManyWithoutCompanyInput
  listCompanies: ListCompanyUpdateManyWithoutCompanyInput
  Launch: LaunchUpdateManyWithoutCompanyInput
}

input UserUpdateOneWithoutPrimaryContactForInput {
  create: UserCreateWithoutPrimaryContactForInput
  connectOrCreate: UserCreateOrConnectWithoutPrimaryContactForInput
  upsert: UserUpsertWithoutPrimaryContactForInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: UserUpdateWithoutPrimaryContactForInput
}

input UserUpsertWithoutPrimaryContactForInput {
  update: UserUpdateWithoutPrimaryContactForInput!
  create: UserCreateWithoutPrimaryContactForInput!
}

input UserUpdateWithoutPrimaryContactForInput {
  admin: BoolFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  passwordHash: NullableStringFieldUpdateOperationsInput
  passwordSalt: NullableStringFieldUpdateOperationsInput
  workPhone: NullableStringFieldUpdateOperationsInput
  mobilePhone: NullableStringFieldUpdateOperationsInput
  title: NullableStringFieldUpdateOperationsInput
  token: NullableStringFieldUpdateOperationsInput
  notificationSettings: JSON
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  dynamicFields: JSON
  active: BoolFieldUpdateOperationsInput
  oktaUserId: NullableIntFieldUpdateOperationsInput
  oktaManagerId: NullableIntFieldUpdateOperationsInput
  forgetPassword: NullableStringFieldUpdateOperationsInput
  csmStatus: BoolFieldUpdateOperationsInput
  crmStatus: BoolFieldUpdateOperationsInput
  customer: CustomerUpdateOneRequiredWithoutUsersInput
  leadSourceFor: CompanyUpdateManyWithoutLeadSourceInput
  starred: CompanyStarredUpdateManyWithoutUserInput
  externalUser: ExternalUserUpdateManyWithoutUserInput
  groups: GroupUserUpdateManyWithoutUserInput
  Note: NoteUpdateManyWithoutUserInput
  roles: UserRoleUpdateManyWithoutUserInput
  userEvents: UserEventsUpdateManyWithoutUserInput
  UserCompanyRatings: UserCompanyRatingsUpdateManyWithoutUserInput
  noteUserTags: NoteUserTagsUpdateManyWithoutUserInput
  messageTemplate: MessageTemplateUpdateManyWithoutUserInput
  Feedback: FeedbackUpdateManyWithoutUserInput
  references: ReferenceUpdateManyWithoutUserInput
  userManager: UserManagerUpdateManyWithoutUserInput
  userReportee: UserManagerUpdateManyWithoutManagerInput
}

input CompanyUpdateManyWithoutLeadSourceInput {
  create: [CompanyCreateWithoutLeadSourceInput!]
  connectOrCreate: [CompanyCreateOrConnectWithoutLeadSourceInput!]
  upsert: [CompanyUpsertWithWhereUniqueWithoutLeadSourceInput!]
  createMany: CompanyCreateManyLeadSourceInputEnvelope
  connect: [CompanyWhereUniqueInput!]
  set: [CompanyWhereUniqueInput!]
  disconnect: [CompanyWhereUniqueInput!]
  delete: [CompanyWhereUniqueInput!]
  update: [CompanyUpdateWithWhereUniqueWithoutLeadSourceInput!]
  updateMany: [CompanyUpdateManyWithWhereWithoutLeadSourceInput!]
  deleteMany: [CompanyScalarWhereInput!]
}

input CompanyUpsertWithWhereUniqueWithoutLeadSourceInput {
  where: CompanyWhereUniqueInput!
  update: CompanyUpdateWithoutLeadSourceInput!
  create: CompanyCreateWithoutLeadSourceInput!
}

input CompanyUpdateWithoutLeadSourceInput {
  annualRecurringRevenue: NullableIntFieldUpdateOperationsInput
  expectedToCloseAt: NullableDateTimeFieldUpdateOperationsInput
  fiscalYearStartMonth: NullableIntFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  companyType: EnumCompanyTypeFieldUpdateOperationsInput
  seatSize: NullableIntFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  fiscalYear: IntFieldUpdateOperationsInput
  renewalDate: NullableDateTimeFieldUpdateOperationsInput
  referredOn: NullableDateTimeFieldUpdateOperationsInput
  latestReferenceId: NullableIntFieldUpdateOperationsInput
  customer: CustomerUpdateOneRequiredWithoutCompaniesInput
  companyParent: CompanyUpdateOneWithoutSubsidiaryInput
  primaryContact: UserUpdateOneWithoutPrimaryContactForInput
  references: ReferenceUpdateManyWithoutCompanyInput
  referencesServedFor: ReferenceUpdateManyWithoutServedAsReferenceForInput
  subsidiary: CompanyUpdateManyWithoutCompanyParentInput
  starredBy: CompanyStarredUpdateManyWithoutCompanyInput
  events: EventUpdateManyWithoutCompanyInput
  notes: NoteUpdateManyWithoutCompanyInput
  account: AccountUpdateOneRequiredWithoutCompanyInput
  competitors: CompetitorUpdateManyWithoutCompanyInput
  products: ProductUpdateManyWithoutCompanyInput
  contacts: ContactsUpdateManyWithoutCompanyInput
  UserCompanyRatings: UserCompanyRatingsUpdateManyWithoutCompanyInput
  listCompanies: ListCompanyUpdateManyWithoutCompanyInput
  Launch: LaunchUpdateManyWithoutCompanyInput
}

input ReferenceUpdateManyWithoutCompanyInput {
  create: [ReferenceCreateWithoutCompanyInput!]
  connectOrCreate: [ReferenceCreateOrConnectWithoutCompanyInput!]
  upsert: [ReferenceUpsertWithWhereUniqueWithoutCompanyInput!]
  createMany: ReferenceCreateManyCompanyInputEnvelope
  connect: [ReferenceWhereUniqueInput!]
  set: [ReferenceWhereUniqueInput!]
  disconnect: [ReferenceWhereUniqueInput!]
  delete: [ReferenceWhereUniqueInput!]
  update: [ReferenceUpdateWithWhereUniqueWithoutCompanyInput!]
  updateMany: [ReferenceUpdateManyWithWhereWithoutCompanyInput!]
  deleteMany: [ReferenceScalarWhereInput!]
}

input ReferenceUpsertWithWhereUniqueWithoutCompanyInput {
  where: ReferenceWhereUniqueInput!
  update: ReferenceUpdateWithoutCompanyInput!
  create: ReferenceCreateWithoutCompanyInput!
}

input ReferenceUpdateWithoutCompanyInput {
  offeredTo: BoolFieldUpdateOperationsInput
  servedAsReferenceBefore: BoolFieldUpdateOperationsInput
  servedAsReferenceAt: NullableDateTimeFieldUpdateOperationsInput
  notes: NullableStringFieldUpdateOperationsInput
  dealClosed: NullableBoolFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  servedAsReferenceFor: CompanyUpdateOneWithoutReferencesServedForInput
  offerOptions: ReferenceOnOfferOptionsUpdateManyWithoutReferenceInput
  user: UserUpdateOneWithoutReferencesInput
}

input NullableBoolFieldUpdateOperationsInput {
  set: Boolean
}

input CompanyUpdateOneWithoutReferencesServedForInput {
  create: CompanyCreateWithoutReferencesServedForInput
  connectOrCreate: CompanyCreateOrConnectWithoutReferencesServedForInput
  upsert: CompanyUpsertWithoutReferencesServedForInput
  connect: CompanyWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: CompanyUpdateWithoutReferencesServedForInput
}

input CompanyUpsertWithoutReferencesServedForInput {
  update: CompanyUpdateWithoutReferencesServedForInput!
  create: CompanyCreateWithoutReferencesServedForInput!
}

input CompanyUpdateWithoutReferencesServedForInput {
  annualRecurringRevenue: NullableIntFieldUpdateOperationsInput
  expectedToCloseAt: NullableDateTimeFieldUpdateOperationsInput
  fiscalYearStartMonth: NullableIntFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  companyType: EnumCompanyTypeFieldUpdateOperationsInput
  seatSize: NullableIntFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  fiscalYear: IntFieldUpdateOperationsInput
  renewalDate: NullableDateTimeFieldUpdateOperationsInput
  referredOn: NullableDateTimeFieldUpdateOperationsInput
  latestReferenceId: NullableIntFieldUpdateOperationsInput
  customer: CustomerUpdateOneRequiredWithoutCompaniesInput
  leadSource: UserUpdateOneWithoutLeadSourceForInput
  companyParent: CompanyUpdateOneWithoutSubsidiaryInput
  primaryContact: UserUpdateOneWithoutPrimaryContactForInput
  references: ReferenceUpdateManyWithoutCompanyInput
  subsidiary: CompanyUpdateManyWithoutCompanyParentInput
  starredBy: CompanyStarredUpdateManyWithoutCompanyInput
  events: EventUpdateManyWithoutCompanyInput
  notes: NoteUpdateManyWithoutCompanyInput
  account: AccountUpdateOneRequiredWithoutCompanyInput
  competitors: CompetitorUpdateManyWithoutCompanyInput
  products: ProductUpdateManyWithoutCompanyInput
  contacts: ContactsUpdateManyWithoutCompanyInput
  UserCompanyRatings: UserCompanyRatingsUpdateManyWithoutCompanyInput
  listCompanies: ListCompanyUpdateManyWithoutCompanyInput
  Launch: LaunchUpdateManyWithoutCompanyInput
}

input CompanyUpdateManyWithoutCompanyParentInput {
  create: [CompanyCreateWithoutCompanyParentInput!]
  connectOrCreate: [CompanyCreateOrConnectWithoutCompanyParentInput!]
  upsert: [CompanyUpsertWithWhereUniqueWithoutCompanyParentInput!]
  createMany: CompanyCreateManyCompanyParentInputEnvelope
  connect: [CompanyWhereUniqueInput!]
  set: [CompanyWhereUniqueInput!]
  disconnect: [CompanyWhereUniqueInput!]
  delete: [CompanyWhereUniqueInput!]
  update: [CompanyUpdateWithWhereUniqueWithoutCompanyParentInput!]
  updateMany: [CompanyUpdateManyWithWhereWithoutCompanyParentInput!]
  deleteMany: [CompanyScalarWhereInput!]
}

input CompanyUpsertWithWhereUniqueWithoutCompanyParentInput {
  where: CompanyWhereUniqueInput!
  update: CompanyUpdateWithoutCompanyParentInput!
  create: CompanyCreateWithoutCompanyParentInput!
}

input CompanyUpdateWithoutCompanyParentInput {
  annualRecurringRevenue: NullableIntFieldUpdateOperationsInput
  expectedToCloseAt: NullableDateTimeFieldUpdateOperationsInput
  fiscalYearStartMonth: NullableIntFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  companyType: EnumCompanyTypeFieldUpdateOperationsInput
  seatSize: NullableIntFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  fiscalYear: IntFieldUpdateOperationsInput
  renewalDate: NullableDateTimeFieldUpdateOperationsInput
  referredOn: NullableDateTimeFieldUpdateOperationsInput
  latestReferenceId: NullableIntFieldUpdateOperationsInput
  customer: CustomerUpdateOneRequiredWithoutCompaniesInput
  leadSource: UserUpdateOneWithoutLeadSourceForInput
  primaryContact: UserUpdateOneWithoutPrimaryContactForInput
  references: ReferenceUpdateManyWithoutCompanyInput
  referencesServedFor: ReferenceUpdateManyWithoutServedAsReferenceForInput
  subsidiary: CompanyUpdateManyWithoutCompanyParentInput
  starredBy: CompanyStarredUpdateManyWithoutCompanyInput
  events: EventUpdateManyWithoutCompanyInput
  notes: NoteUpdateManyWithoutCompanyInput
  account: AccountUpdateOneRequiredWithoutCompanyInput
  competitors: CompetitorUpdateManyWithoutCompanyInput
  products: ProductUpdateManyWithoutCompanyInput
  contacts: ContactsUpdateManyWithoutCompanyInput
  UserCompanyRatings: UserCompanyRatingsUpdateManyWithoutCompanyInput
  listCompanies: ListCompanyUpdateManyWithoutCompanyInput
  Launch: LaunchUpdateManyWithoutCompanyInput
}

input ReferenceUpdateManyWithoutServedAsReferenceForInput {
  create: [ReferenceCreateWithoutServedAsReferenceForInput!]
  connectOrCreate: [ReferenceCreateOrConnectWithoutServedAsReferenceForInput!]
  upsert: [ReferenceUpsertWithWhereUniqueWithoutServedAsReferenceForInput!]
  createMany: ReferenceCreateManyServedAsReferenceForInputEnvelope
  connect: [ReferenceWhereUniqueInput!]
  set: [ReferenceWhereUniqueInput!]
  disconnect: [ReferenceWhereUniqueInput!]
  delete: [ReferenceWhereUniqueInput!]
  update: [ReferenceUpdateWithWhereUniqueWithoutServedAsReferenceForInput!]
  updateMany: [ReferenceUpdateManyWithWhereWithoutServedAsReferenceForInput!]
  deleteMany: [ReferenceScalarWhereInput!]
}

input ReferenceUpsertWithWhereUniqueWithoutServedAsReferenceForInput {
  where: ReferenceWhereUniqueInput!
  update: ReferenceUpdateWithoutServedAsReferenceForInput!
  create: ReferenceCreateWithoutServedAsReferenceForInput!
}

input ReferenceUpdateWithoutServedAsReferenceForInput {
  offeredTo: BoolFieldUpdateOperationsInput
  servedAsReferenceBefore: BoolFieldUpdateOperationsInput
  servedAsReferenceAt: NullableDateTimeFieldUpdateOperationsInput
  notes: NullableStringFieldUpdateOperationsInput
  dealClosed: NullableBoolFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  company: CompanyUpdateOneRequiredWithoutReferencesInput
  offerOptions: ReferenceOnOfferOptionsUpdateManyWithoutReferenceInput
  user: UserUpdateOneWithoutReferencesInput
}

input CompanyUpdateOneRequiredWithoutReferencesInput {
  create: CompanyCreateWithoutReferencesInput
  connectOrCreate: CompanyCreateOrConnectWithoutReferencesInput
  upsert: CompanyUpsertWithoutReferencesInput
  connect: CompanyWhereUniqueInput
  update: CompanyUpdateWithoutReferencesInput
}

input CompanyUpsertWithoutReferencesInput {
  update: CompanyUpdateWithoutReferencesInput!
  create: CompanyCreateWithoutReferencesInput!
}

input CompanyUpdateWithoutReferencesInput {
  annualRecurringRevenue: NullableIntFieldUpdateOperationsInput
  expectedToCloseAt: NullableDateTimeFieldUpdateOperationsInput
  fiscalYearStartMonth: NullableIntFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  companyType: EnumCompanyTypeFieldUpdateOperationsInput
  seatSize: NullableIntFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  fiscalYear: IntFieldUpdateOperationsInput
  renewalDate: NullableDateTimeFieldUpdateOperationsInput
  referredOn: NullableDateTimeFieldUpdateOperationsInput
  latestReferenceId: NullableIntFieldUpdateOperationsInput
  customer: CustomerUpdateOneRequiredWithoutCompaniesInput
  leadSource: UserUpdateOneWithoutLeadSourceForInput
  companyParent: CompanyUpdateOneWithoutSubsidiaryInput
  primaryContact: UserUpdateOneWithoutPrimaryContactForInput
  referencesServedFor: ReferenceUpdateManyWithoutServedAsReferenceForInput
  subsidiary: CompanyUpdateManyWithoutCompanyParentInput
  starredBy: CompanyStarredUpdateManyWithoutCompanyInput
  events: EventUpdateManyWithoutCompanyInput
  notes: NoteUpdateManyWithoutCompanyInput
  account: AccountUpdateOneRequiredWithoutCompanyInput
  competitors: CompetitorUpdateManyWithoutCompanyInput
  products: ProductUpdateManyWithoutCompanyInput
  contacts: ContactsUpdateManyWithoutCompanyInput
  UserCompanyRatings: UserCompanyRatingsUpdateManyWithoutCompanyInput
  listCompanies: ListCompanyUpdateManyWithoutCompanyInput
  Launch: LaunchUpdateManyWithoutCompanyInput
}

input CompanyStarredUpdateManyWithoutCompanyInput {
  create: [CompanyStarredCreateWithoutCompanyInput!]
  connectOrCreate: [CompanyStarredCreateOrConnectWithoutCompanyInput!]
  upsert: [CompanyStarredUpsertWithWhereUniqueWithoutCompanyInput!]
  createMany: CompanyStarredCreateManyCompanyInputEnvelope
  connect: [CompanyStarredWhereUniqueInput!]
  set: [CompanyStarredWhereUniqueInput!]
  disconnect: [CompanyStarredWhereUniqueInput!]
  delete: [CompanyStarredWhereUniqueInput!]
  update: [CompanyStarredUpdateWithWhereUniqueWithoutCompanyInput!]
  updateMany: [CompanyStarredUpdateManyWithWhereWithoutCompanyInput!]
  deleteMany: [CompanyStarredScalarWhereInput!]
}

input CompanyStarredUpsertWithWhereUniqueWithoutCompanyInput {
  where: CompanyStarredWhereUniqueInput!
  update: CompanyStarredUpdateWithoutCompanyInput!
  create: CompanyStarredCreateWithoutCompanyInput!
}

input CompanyStarredUpdateWithoutCompanyInput {
  dummy: NullableIntFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutStarredInput
}

input UserUpdateOneRequiredWithoutStarredInput {
  create: UserCreateWithoutStarredInput
  connectOrCreate: UserCreateOrConnectWithoutStarredInput
  upsert: UserUpsertWithoutStarredInput
  connect: UserWhereUniqueInput
  update: UserUpdateWithoutStarredInput
}

input UserUpsertWithoutStarredInput {
  update: UserUpdateWithoutStarredInput!
  create: UserCreateWithoutStarredInput!
}

input UserUpdateWithoutStarredInput {
  admin: BoolFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  passwordHash: NullableStringFieldUpdateOperationsInput
  passwordSalt: NullableStringFieldUpdateOperationsInput
  workPhone: NullableStringFieldUpdateOperationsInput
  mobilePhone: NullableStringFieldUpdateOperationsInput
  title: NullableStringFieldUpdateOperationsInput
  token: NullableStringFieldUpdateOperationsInput
  notificationSettings: JSON
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  dynamicFields: JSON
  active: BoolFieldUpdateOperationsInput
  oktaUserId: NullableIntFieldUpdateOperationsInput
  oktaManagerId: NullableIntFieldUpdateOperationsInput
  forgetPassword: NullableStringFieldUpdateOperationsInput
  csmStatus: BoolFieldUpdateOperationsInput
  crmStatus: BoolFieldUpdateOperationsInput
  customer: CustomerUpdateOneRequiredWithoutUsersInput
  leadSourceFor: CompanyUpdateManyWithoutLeadSourceInput
  primaryContactFor: CompanyUpdateManyWithoutPrimaryContactInput
  externalUser: ExternalUserUpdateManyWithoutUserInput
  groups: GroupUserUpdateManyWithoutUserInput
  Note: NoteUpdateManyWithoutUserInput
  roles: UserRoleUpdateManyWithoutUserInput
  userEvents: UserEventsUpdateManyWithoutUserInput
  UserCompanyRatings: UserCompanyRatingsUpdateManyWithoutUserInput
  noteUserTags: NoteUserTagsUpdateManyWithoutUserInput
  messageTemplate: MessageTemplateUpdateManyWithoutUserInput
  Feedback: FeedbackUpdateManyWithoutUserInput
  references: ReferenceUpdateManyWithoutUserInput
  userManager: UserManagerUpdateManyWithoutUserInput
  userReportee: UserManagerUpdateManyWithoutManagerInput
}

input CompanyUpdateManyWithoutPrimaryContactInput {
  create: [CompanyCreateWithoutPrimaryContactInput!]
  connectOrCreate: [CompanyCreateOrConnectWithoutPrimaryContactInput!]
  upsert: [CompanyUpsertWithWhereUniqueWithoutPrimaryContactInput!]
  createMany: CompanyCreateManyPrimaryContactInputEnvelope
  connect: [CompanyWhereUniqueInput!]
  set: [CompanyWhereUniqueInput!]
  disconnect: [CompanyWhereUniqueInput!]
  delete: [CompanyWhereUniqueInput!]
  update: [CompanyUpdateWithWhereUniqueWithoutPrimaryContactInput!]
  updateMany: [CompanyUpdateManyWithWhereWithoutPrimaryContactInput!]
  deleteMany: [CompanyScalarWhereInput!]
}

input CompanyUpsertWithWhereUniqueWithoutPrimaryContactInput {
  where: CompanyWhereUniqueInput!
  update: CompanyUpdateWithoutPrimaryContactInput!
  create: CompanyCreateWithoutPrimaryContactInput!
}

input CompanyUpdateWithoutPrimaryContactInput {
  annualRecurringRevenue: NullableIntFieldUpdateOperationsInput
  expectedToCloseAt: NullableDateTimeFieldUpdateOperationsInput
  fiscalYearStartMonth: NullableIntFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  companyType: EnumCompanyTypeFieldUpdateOperationsInput
  seatSize: NullableIntFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  fiscalYear: IntFieldUpdateOperationsInput
  renewalDate: NullableDateTimeFieldUpdateOperationsInput
  referredOn: NullableDateTimeFieldUpdateOperationsInput
  latestReferenceId: NullableIntFieldUpdateOperationsInput
  customer: CustomerUpdateOneRequiredWithoutCompaniesInput
  leadSource: UserUpdateOneWithoutLeadSourceForInput
  companyParent: CompanyUpdateOneWithoutSubsidiaryInput
  references: ReferenceUpdateManyWithoutCompanyInput
  referencesServedFor: ReferenceUpdateManyWithoutServedAsReferenceForInput
  subsidiary: CompanyUpdateManyWithoutCompanyParentInput
  starredBy: CompanyStarredUpdateManyWithoutCompanyInput
  events: EventUpdateManyWithoutCompanyInput
  notes: NoteUpdateManyWithoutCompanyInput
  account: AccountUpdateOneRequiredWithoutCompanyInput
  competitors: CompetitorUpdateManyWithoutCompanyInput
  products: ProductUpdateManyWithoutCompanyInput
  contacts: ContactsUpdateManyWithoutCompanyInput
  UserCompanyRatings: UserCompanyRatingsUpdateManyWithoutCompanyInput
  listCompanies: ListCompanyUpdateManyWithoutCompanyInput
  Launch: LaunchUpdateManyWithoutCompanyInput
}

input EventUpdateManyWithoutCompanyInput {
  create: [EventCreateWithoutCompanyInput!]
  connectOrCreate: [EventCreateOrConnectWithoutCompanyInput!]
  upsert: [EventUpsertWithWhereUniqueWithoutCompanyInput!]
  createMany: EventCreateManyCompanyInputEnvelope
  connect: [EventWhereUniqueInput!]
  set: [EventWhereUniqueInput!]
  disconnect: [EventWhereUniqueInput!]
  delete: [EventWhereUniqueInput!]
  update: [EventUpdateWithWhereUniqueWithoutCompanyInput!]
  updateMany: [EventUpdateManyWithWhereWithoutCompanyInput!]
  deleteMany: [EventScalarWhereInput!]
}

input EventUpsertWithWhereUniqueWithoutCompanyInput {
  where: EventWhereUniqueInput!
  update: EventUpdateWithoutCompanyInput!
  create: EventCreateWithoutCompanyInput!
}

input EventUpdateWithoutCompanyInput {
  data: JSON
  notifiedAt: NullableDateTimeFieldUpdateOperationsInput
  text: NullableStringFieldUpdateOperationsInput
  type: EnumEventTypeFieldUpdateOperationsInput
  needsAttention: NullableEnumEventAttentionFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  customer: CustomerUpdateOneRequiredWithoutEventsInput
  Launch: LaunchUpdateManyWithoutEventsInput
  notes: NoteUpdateManyWithoutEventsInput
  userEvents: UserEventsUpdateManyWithoutEventInput
  parentEvent: EventUpdateOneWithoutChildEventsInput
  childEvents: EventUpdateManyWithoutParentEventInput
  message: NoteUpdateOneWithoutEventInput
}

input EnumEventTypeFieldUpdateOperationsInput {
  set: EventType
}

input NullableEnumEventAttentionFieldUpdateOperationsInput {
  set: EventAttention
}

input CustomerUpdateOneRequiredWithoutEventsInput {
  create: CustomerCreateWithoutEventsInput
  connectOrCreate: CustomerCreateOrConnectWithoutEventsInput
  upsert: CustomerUpsertWithoutEventsInput
  connect: CustomerWhereUniqueInput
  update: CustomerUpdateWithoutEventsInput
}

input CustomerUpsertWithoutEventsInput {
  update: CustomerUpdateWithoutEventsInput!
  create: CustomerCreateWithoutEventsInput!
}

input CustomerUpdateWithoutEventsInput {
  name: StringFieldUpdateOperationsInput
  type: EnumCustomerTypeFieldUpdateOperationsInput
  favoritedAt: NullableDateTimeFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  oktaClientId: NullableStringFieldUpdateOperationsInput
  oktaDomain: NullableStringFieldUpdateOperationsInput
  oktaClientSecret: NullableStringFieldUpdateOperationsInput
  oktaApiKey: NullableStringFieldUpdateOperationsInput
  launch: LaunchUpdateManyWithoutCustomerInput
  companies: CompanyUpdateManyWithoutCustomerInput
  integrations: CustomerIntegrationUpdateManyWithoutCustomerInput
  externalGroups: ExternalGroupUpdateManyWithoutCustomerInput
  externalUsers: ExternalUserUpdateManyWithoutCustomerInput
  groups: GroupUpdateManyWithoutCustomerInput
  notes: NoteUpdateManyWithoutCustomerInput
  roles: RoleUpdateManyWithoutCustomerInput
  salesLeads: SalesLeadUpdateManyWithoutCustomerInput
  syncEvents: SyncEventUpdateManyWithoutCustomerInput
  users: UserUpdateManyWithoutCustomerInput
  messageTemplate: MessageTemplateUpdateManyWithoutCustomerInput
  dynamicFields: DynamicUserFieldsUpdateManyWithoutCustomerInput
  lists: ListUpdateManyWithoutCustomerInput
  useCaseCollections: UseCaseCollectionsUpdateManyWithoutCustomerInput
  customerDataSources: DataSourcesOnCustomerUpdateManyWithoutCustomerInput
  dataObjectCollections: DataObjectCollectionsUpdateManyWithoutCustomerInput
}

input CustomerIntegrationUpdateManyWithoutCustomerInput {
  create: [CustomerIntegrationCreateWithoutCustomerInput!]
  connectOrCreate: [CustomerIntegrationCreateOrConnectWithoutCustomerInput!]
  upsert: [CustomerIntegrationUpsertWithWhereUniqueWithoutCustomerInput!]
  createMany: CustomerIntegrationCreateManyCustomerInputEnvelope
  connect: [CustomerIntegrationWhereUniqueInput!]
  set: [CustomerIntegrationWhereUniqueInput!]
  disconnect: [CustomerIntegrationWhereUniqueInput!]
  delete: [CustomerIntegrationWhereUniqueInput!]
  update: [CustomerIntegrationUpdateWithWhereUniqueWithoutCustomerInput!]
  updateMany: [CustomerIntegrationUpdateManyWithWhereWithoutCustomerInput!]
  deleteMany: [CustomerIntegrationScalarWhereInput!]
}

input CustomerIntegrationUpsertWithWhereUniqueWithoutCustomerInput {
  where: CustomerIntegrationWhereUniqueInput!
  update: CustomerIntegrationUpdateWithoutCustomerInput!
  create: CustomerIntegrationCreateWithoutCustomerInput!
}

input CustomerIntegrationUpdateWithoutCustomerInput {
  refreshToken: NullableStringFieldUpdateOperationsInput
  token: StringFieldUpdateOperationsInput
  type: EnumCustomerIntegrationTypeFieldUpdateOperationsInput
  url: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input EnumCustomerIntegrationTypeFieldUpdateOperationsInput {
  set: CustomerIntegrationType
}

input CustomerIntegrationUpdateWithWhereUniqueWithoutCustomerInput {
  where: CustomerIntegrationWhereUniqueInput!
  data: CustomerIntegrationUpdateWithoutCustomerInput!
}

input CustomerIntegrationUpdateManyWithWhereWithoutCustomerInput {
  where: CustomerIntegrationScalarWhereInput!
  data: CustomerIntegrationUpdateManyMutationInput!
}

input CustomerIntegrationScalarWhereInput {
  AND: [CustomerIntegrationScalarWhereInput!]
  OR: [CustomerIntegrationScalarWhereInput!]
  NOT: [CustomerIntegrationScalarWhereInput!]
  id: IntFilter
  customerId: IntFilter
  refreshToken: StringNullableFilter
  token: StringFilter
  type: EnumCustomerIntegrationTypeFilter
  url: StringNullableFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
}

input CustomerIntegrationUpdateManyMutationInput {
  refreshToken: NullableStringFieldUpdateOperationsInput
  token: StringFieldUpdateOperationsInput
  type: EnumCustomerIntegrationTypeFieldUpdateOperationsInput
  url: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ExternalGroupUpdateManyWithoutCustomerInput {
  create: [ExternalGroupCreateWithoutCustomerInput!]
  connectOrCreate: [ExternalGroupCreateOrConnectWithoutCustomerInput!]
  upsert: [ExternalGroupUpsertWithWhereUniqueWithoutCustomerInput!]
  createMany: ExternalGroupCreateManyCustomerInputEnvelope
  connect: [ExternalGroupWhereUniqueInput!]
  set: [ExternalGroupWhereUniqueInput!]
  disconnect: [ExternalGroupWhereUniqueInput!]
  delete: [ExternalGroupWhereUniqueInput!]
  update: [ExternalGroupUpdateWithWhereUniqueWithoutCustomerInput!]
  updateMany: [ExternalGroupUpdateManyWithWhereWithoutCustomerInput!]
  deleteMany: [ExternalGroupScalarWhereInput!]
}

input ExternalGroupUpsertWithWhereUniqueWithoutCustomerInput {
  where: ExternalGroupWhereUniqueInput!
  update: ExternalGroupUpdateWithoutCustomerInput!
  create: ExternalGroupCreateWithoutCustomerInput!
}

input ExternalGroupUpdateWithoutCustomerInput {
  externalId: StringFieldUpdateOperationsInput
  developerName: StringFieldUpdateOperationsInput
  name: NullableStringFieldUpdateOperationsInput
  ownerId: NullableStringFieldUpdateOperationsInput
  source: EnumCustomerIntegrationTypeFieldUpdateOperationsInput
  type: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  members: ExternalGroupMemberUpdateManyWithoutGroupInput
}

input ExternalGroupMemberUpdateManyWithoutGroupInput {
  create: [ExternalGroupMemberCreateWithoutGroupInput!]
  connectOrCreate: [ExternalGroupMemberCreateOrConnectWithoutGroupInput!]
  upsert: [ExternalGroupMemberUpsertWithWhereUniqueWithoutGroupInput!]
  createMany: ExternalGroupMemberCreateManyGroupInputEnvelope
  connect: [ExternalGroupMemberWhereUniqueInput!]
  set: [ExternalGroupMemberWhereUniqueInput!]
  disconnect: [ExternalGroupMemberWhereUniqueInput!]
  delete: [ExternalGroupMemberWhereUniqueInput!]
  update: [ExternalGroupMemberUpdateWithWhereUniqueWithoutGroupInput!]
  updateMany: [ExternalGroupMemberUpdateManyWithWhereWithoutGroupInput!]
  deleteMany: [ExternalGroupMemberScalarWhereInput!]
}

input ExternalGroupMemberUpsertWithWhereUniqueWithoutGroupInput {
  where: ExternalGroupMemberWhereUniqueInput!
  update: ExternalGroupMemberUpdateWithoutGroupInput!
  create: ExternalGroupMemberCreateWithoutGroupInput!
}

input ExternalGroupMemberUpdateWithoutGroupInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  user: ExternalUserUpdateOneRequiredWithoutExternalGroupsInput
}

input ExternalUserUpdateOneRequiredWithoutExternalGroupsInput {
  create: ExternalUserCreateWithoutExternalGroupsInput
  connectOrCreate: ExternalUserCreateOrConnectWithoutExternalGroupsInput
  upsert: ExternalUserUpsertWithoutExternalGroupsInput
  connect: ExternalUserWhereUniqueInput
  update: ExternalUserUpdateWithoutExternalGroupsInput
}

input ExternalUserUpsertWithoutExternalGroupsInput {
  update: ExternalUserUpdateWithoutExternalGroupsInput!
  create: ExternalUserCreateWithoutExternalGroupsInput!
}

input ExternalUserUpdateWithoutExternalGroupsInput {
  department: NullableStringFieldUpdateOperationsInput
  division: NullableStringFieldUpdateOperationsInput
  email: NullableStringFieldUpdateOperationsInput
  employeeNumber: NullableStringFieldUpdateOperationsInput
  externalId: StringFieldUpdateOperationsInput
  name: NullableStringFieldUpdateOperationsInput
  source: EnumCustomerIntegrationTypeFieldUpdateOperationsInput
  title: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  customer: CustomerUpdateOneRequiredWithoutExternalUsersInput
  user: UserUpdateOneWithoutExternalUserInput
}

input CustomerUpdateOneRequiredWithoutExternalUsersInput {
  create: CustomerCreateWithoutExternalUsersInput
  connectOrCreate: CustomerCreateOrConnectWithoutExternalUsersInput
  upsert: CustomerUpsertWithoutExternalUsersInput
  connect: CustomerWhereUniqueInput
  update: CustomerUpdateWithoutExternalUsersInput
}

input CustomerUpsertWithoutExternalUsersInput {
  update: CustomerUpdateWithoutExternalUsersInput!
  create: CustomerCreateWithoutExternalUsersInput!
}

input CustomerUpdateWithoutExternalUsersInput {
  name: StringFieldUpdateOperationsInput
  type: EnumCustomerTypeFieldUpdateOperationsInput
  favoritedAt: NullableDateTimeFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  oktaClientId: NullableStringFieldUpdateOperationsInput
  oktaDomain: NullableStringFieldUpdateOperationsInput
  oktaClientSecret: NullableStringFieldUpdateOperationsInput
  oktaApiKey: NullableStringFieldUpdateOperationsInput
  launch: LaunchUpdateManyWithoutCustomerInput
  companies: CompanyUpdateManyWithoutCustomerInput
  integrations: CustomerIntegrationUpdateManyWithoutCustomerInput
  events: EventUpdateManyWithoutCustomerInput
  externalGroups: ExternalGroupUpdateManyWithoutCustomerInput
  groups: GroupUpdateManyWithoutCustomerInput
  notes: NoteUpdateManyWithoutCustomerInput
  roles: RoleUpdateManyWithoutCustomerInput
  salesLeads: SalesLeadUpdateManyWithoutCustomerInput
  syncEvents: SyncEventUpdateManyWithoutCustomerInput
  users: UserUpdateManyWithoutCustomerInput
  messageTemplate: MessageTemplateUpdateManyWithoutCustomerInput
  dynamicFields: DynamicUserFieldsUpdateManyWithoutCustomerInput
  lists: ListUpdateManyWithoutCustomerInput
  useCaseCollections: UseCaseCollectionsUpdateManyWithoutCustomerInput
  customerDataSources: DataSourcesOnCustomerUpdateManyWithoutCustomerInput
  dataObjectCollections: DataObjectCollectionsUpdateManyWithoutCustomerInput
}

input EventUpdateManyWithoutCustomerInput {
  create: [EventCreateWithoutCustomerInput!]
  connectOrCreate: [EventCreateOrConnectWithoutCustomerInput!]
  upsert: [EventUpsertWithWhereUniqueWithoutCustomerInput!]
  createMany: EventCreateManyCustomerInputEnvelope
  connect: [EventWhereUniqueInput!]
  set: [EventWhereUniqueInput!]
  disconnect: [EventWhereUniqueInput!]
  delete: [EventWhereUniqueInput!]
  update: [EventUpdateWithWhereUniqueWithoutCustomerInput!]
  updateMany: [EventUpdateManyWithWhereWithoutCustomerInput!]
  deleteMany: [EventScalarWhereInput!]
}

input EventUpsertWithWhereUniqueWithoutCustomerInput {
  where: EventWhereUniqueInput!
  update: EventUpdateWithoutCustomerInput!
  create: EventCreateWithoutCustomerInput!
}

input EventUpdateWithoutCustomerInput {
  data: JSON
  notifiedAt: NullableDateTimeFieldUpdateOperationsInput
  text: NullableStringFieldUpdateOperationsInput
  type: EnumEventTypeFieldUpdateOperationsInput
  needsAttention: NullableEnumEventAttentionFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  company: CompanyUpdateOneWithoutEventsInput
  Launch: LaunchUpdateManyWithoutEventsInput
  notes: NoteUpdateManyWithoutEventsInput
  userEvents: UserEventsUpdateManyWithoutEventInput
  parentEvent: EventUpdateOneWithoutChildEventsInput
  childEvents: EventUpdateManyWithoutParentEventInput
  message: NoteUpdateOneWithoutEventInput
}

input CompanyUpdateOneWithoutEventsInput {
  create: CompanyCreateWithoutEventsInput
  connectOrCreate: CompanyCreateOrConnectWithoutEventsInput
  upsert: CompanyUpsertWithoutEventsInput
  connect: CompanyWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: CompanyUpdateWithoutEventsInput
}

input CompanyUpsertWithoutEventsInput {
  update: CompanyUpdateWithoutEventsInput!
  create: CompanyCreateWithoutEventsInput!
}

input CompanyUpdateWithoutEventsInput {
  annualRecurringRevenue: NullableIntFieldUpdateOperationsInput
  expectedToCloseAt: NullableDateTimeFieldUpdateOperationsInput
  fiscalYearStartMonth: NullableIntFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  companyType: EnumCompanyTypeFieldUpdateOperationsInput
  seatSize: NullableIntFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  fiscalYear: IntFieldUpdateOperationsInput
  renewalDate: NullableDateTimeFieldUpdateOperationsInput
  referredOn: NullableDateTimeFieldUpdateOperationsInput
  latestReferenceId: NullableIntFieldUpdateOperationsInput
  customer: CustomerUpdateOneRequiredWithoutCompaniesInput
  leadSource: UserUpdateOneWithoutLeadSourceForInput
  companyParent: CompanyUpdateOneWithoutSubsidiaryInput
  primaryContact: UserUpdateOneWithoutPrimaryContactForInput
  references: ReferenceUpdateManyWithoutCompanyInput
  referencesServedFor: ReferenceUpdateManyWithoutServedAsReferenceForInput
  subsidiary: CompanyUpdateManyWithoutCompanyParentInput
  starredBy: CompanyStarredUpdateManyWithoutCompanyInput
  notes: NoteUpdateManyWithoutCompanyInput
  account: AccountUpdateOneRequiredWithoutCompanyInput
  competitors: CompetitorUpdateManyWithoutCompanyInput
  products: ProductUpdateManyWithoutCompanyInput
  contacts: ContactsUpdateManyWithoutCompanyInput
  UserCompanyRatings: UserCompanyRatingsUpdateManyWithoutCompanyInput
  listCompanies: ListCompanyUpdateManyWithoutCompanyInput
  Launch: LaunchUpdateManyWithoutCompanyInput
}

input NoteUpdateManyWithoutCompanyInput {
  create: [NoteCreateWithoutCompanyInput!]
  connectOrCreate: [NoteCreateOrConnectWithoutCompanyInput!]
  upsert: [NoteUpsertWithWhereUniqueWithoutCompanyInput!]
  createMany: NoteCreateManyCompanyInputEnvelope
  connect: [NoteWhereUniqueInput!]
  set: [NoteWhereUniqueInput!]
  disconnect: [NoteWhereUniqueInput!]
  delete: [NoteWhereUniqueInput!]
  update: [NoteUpdateWithWhereUniqueWithoutCompanyInput!]
  updateMany: [NoteUpdateManyWithWhereWithoutCompanyInput!]
  deleteMany: [NoteScalarWhereInput!]
}

input NoteUpsertWithWhereUniqueWithoutCompanyInput {
  where: NoteWhereUniqueInput!
  update: NoteUpdateWithoutCompanyInput!
  create: NoteCreateWithoutCompanyInput!
}

input NoteUpdateWithoutCompanyInput {
  readAt: NullableDateTimeFieldUpdateOperationsInput
  flaggedAt: NullableDateTimeFieldUpdateOperationsInput
  subject: StringFieldUpdateOperationsInput
  text: StringFieldUpdateOperationsInput
  allCanView: BoolFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  delta: JSON
  customer: CustomerUpdateOneWithoutNotesInput
  events: EventUpdateOneWithoutNotesInput
  user: UserUpdateOneWithoutNoteInput
  noteUserTags: NoteUserTagsUpdateManyWithoutNoteInput
  noteGroupTags: NoteGroupTagsUpdateManyWithoutNoteInput
  Event: EventUpdateManyWithoutMessageInput
}

input CustomerUpdateOneWithoutNotesInput {
  create: CustomerCreateWithoutNotesInput
  connectOrCreate: CustomerCreateOrConnectWithoutNotesInput
  upsert: CustomerUpsertWithoutNotesInput
  connect: CustomerWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: CustomerUpdateWithoutNotesInput
}

input CustomerUpsertWithoutNotesInput {
  update: CustomerUpdateWithoutNotesInput!
  create: CustomerCreateWithoutNotesInput!
}

input CustomerUpdateWithoutNotesInput {
  name: StringFieldUpdateOperationsInput
  type: EnumCustomerTypeFieldUpdateOperationsInput
  favoritedAt: NullableDateTimeFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  oktaClientId: NullableStringFieldUpdateOperationsInput
  oktaDomain: NullableStringFieldUpdateOperationsInput
  oktaClientSecret: NullableStringFieldUpdateOperationsInput
  oktaApiKey: NullableStringFieldUpdateOperationsInput
  launch: LaunchUpdateManyWithoutCustomerInput
  companies: CompanyUpdateManyWithoutCustomerInput
  integrations: CustomerIntegrationUpdateManyWithoutCustomerInput
  events: EventUpdateManyWithoutCustomerInput
  externalGroups: ExternalGroupUpdateManyWithoutCustomerInput
  externalUsers: ExternalUserUpdateManyWithoutCustomerInput
  groups: GroupUpdateManyWithoutCustomerInput
  roles: RoleUpdateManyWithoutCustomerInput
  salesLeads: SalesLeadUpdateManyWithoutCustomerInput
  syncEvents: SyncEventUpdateManyWithoutCustomerInput
  users: UserUpdateManyWithoutCustomerInput
  messageTemplate: MessageTemplateUpdateManyWithoutCustomerInput
  dynamicFields: DynamicUserFieldsUpdateManyWithoutCustomerInput
  lists: ListUpdateManyWithoutCustomerInput
  useCaseCollections: UseCaseCollectionsUpdateManyWithoutCustomerInput
  customerDataSources: DataSourcesOnCustomerUpdateManyWithoutCustomerInput
  dataObjectCollections: DataObjectCollectionsUpdateManyWithoutCustomerInput
}

input ExternalUserUpdateManyWithoutCustomerInput {
  create: [ExternalUserCreateWithoutCustomerInput!]
  connectOrCreate: [ExternalUserCreateOrConnectWithoutCustomerInput!]
  upsert: [ExternalUserUpsertWithWhereUniqueWithoutCustomerInput!]
  createMany: ExternalUserCreateManyCustomerInputEnvelope
  connect: [ExternalUserWhereUniqueInput!]
  set: [ExternalUserWhereUniqueInput!]
  disconnect: [ExternalUserWhereUniqueInput!]
  delete: [ExternalUserWhereUniqueInput!]
  update: [ExternalUserUpdateWithWhereUniqueWithoutCustomerInput!]
  updateMany: [ExternalUserUpdateManyWithWhereWithoutCustomerInput!]
  deleteMany: [ExternalUserScalarWhereInput!]
}

input ExternalUserUpsertWithWhereUniqueWithoutCustomerInput {
  where: ExternalUserWhereUniqueInput!
  update: ExternalUserUpdateWithoutCustomerInput!
  create: ExternalUserCreateWithoutCustomerInput!
}

input ExternalUserUpdateWithoutCustomerInput {
  department: NullableStringFieldUpdateOperationsInput
  division: NullableStringFieldUpdateOperationsInput
  email: NullableStringFieldUpdateOperationsInput
  employeeNumber: NullableStringFieldUpdateOperationsInput
  externalId: StringFieldUpdateOperationsInput
  name: NullableStringFieldUpdateOperationsInput
  source: EnumCustomerIntegrationTypeFieldUpdateOperationsInput
  title: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  user: UserUpdateOneWithoutExternalUserInput
  externalGroups: ExternalGroupMemberUpdateManyWithoutUserInput
}

input UserUpdateOneWithoutExternalUserInput {
  create: UserCreateWithoutExternalUserInput
  connectOrCreate: UserCreateOrConnectWithoutExternalUserInput
  upsert: UserUpsertWithoutExternalUserInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: UserUpdateWithoutExternalUserInput
}

input UserUpsertWithoutExternalUserInput {
  update: UserUpdateWithoutExternalUserInput!
  create: UserCreateWithoutExternalUserInput!
}

input UserUpdateWithoutExternalUserInput {
  admin: BoolFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  passwordHash: NullableStringFieldUpdateOperationsInput
  passwordSalt: NullableStringFieldUpdateOperationsInput
  workPhone: NullableStringFieldUpdateOperationsInput
  mobilePhone: NullableStringFieldUpdateOperationsInput
  title: NullableStringFieldUpdateOperationsInput
  token: NullableStringFieldUpdateOperationsInput
  notificationSettings: JSON
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  dynamicFields: JSON
  active: BoolFieldUpdateOperationsInput
  oktaUserId: NullableIntFieldUpdateOperationsInput
  oktaManagerId: NullableIntFieldUpdateOperationsInput
  forgetPassword: NullableStringFieldUpdateOperationsInput
  csmStatus: BoolFieldUpdateOperationsInput
  crmStatus: BoolFieldUpdateOperationsInput
  customer: CustomerUpdateOneRequiredWithoutUsersInput
  leadSourceFor: CompanyUpdateManyWithoutLeadSourceInput
  primaryContactFor: CompanyUpdateManyWithoutPrimaryContactInput
  starred: CompanyStarredUpdateManyWithoutUserInput
  groups: GroupUserUpdateManyWithoutUserInput
  Note: NoteUpdateManyWithoutUserInput
  roles: UserRoleUpdateManyWithoutUserInput
  userEvents: UserEventsUpdateManyWithoutUserInput
  UserCompanyRatings: UserCompanyRatingsUpdateManyWithoutUserInput
  noteUserTags: NoteUserTagsUpdateManyWithoutUserInput
  messageTemplate: MessageTemplateUpdateManyWithoutUserInput
  Feedback: FeedbackUpdateManyWithoutUserInput
  references: ReferenceUpdateManyWithoutUserInput
  userManager: UserManagerUpdateManyWithoutUserInput
  userReportee: UserManagerUpdateManyWithoutManagerInput
}

input CompanyStarredUpdateManyWithoutUserInput {
  create: [CompanyStarredCreateWithoutUserInput!]
  connectOrCreate: [CompanyStarredCreateOrConnectWithoutUserInput!]
  upsert: [CompanyStarredUpsertWithWhereUniqueWithoutUserInput!]
  createMany: CompanyStarredCreateManyUserInputEnvelope
  connect: [CompanyStarredWhereUniqueInput!]
  set: [CompanyStarredWhereUniqueInput!]
  disconnect: [CompanyStarredWhereUniqueInput!]
  delete: [CompanyStarredWhereUniqueInput!]
  update: [CompanyStarredUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [CompanyStarredUpdateManyWithWhereWithoutUserInput!]
  deleteMany: [CompanyStarredScalarWhereInput!]
}

input CompanyStarredUpsertWithWhereUniqueWithoutUserInput {
  where: CompanyStarredWhereUniqueInput!
  update: CompanyStarredUpdateWithoutUserInput!
  create: CompanyStarredCreateWithoutUserInput!
}

input CompanyStarredUpdateWithoutUserInput {
  dummy: NullableIntFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  company: CompanyUpdateOneRequiredWithoutStarredByInput
}

input CompanyUpdateOneRequiredWithoutStarredByInput {
  create: CompanyCreateWithoutStarredByInput
  connectOrCreate: CompanyCreateOrConnectWithoutStarredByInput
  upsert: CompanyUpsertWithoutStarredByInput
  connect: CompanyWhereUniqueInput
  update: CompanyUpdateWithoutStarredByInput
}

input CompanyUpsertWithoutStarredByInput {
  update: CompanyUpdateWithoutStarredByInput!
  create: CompanyCreateWithoutStarredByInput!
}

input CompanyUpdateWithoutStarredByInput {
  annualRecurringRevenue: NullableIntFieldUpdateOperationsInput
  expectedToCloseAt: NullableDateTimeFieldUpdateOperationsInput
  fiscalYearStartMonth: NullableIntFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  companyType: EnumCompanyTypeFieldUpdateOperationsInput
  seatSize: NullableIntFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  fiscalYear: IntFieldUpdateOperationsInput
  renewalDate: NullableDateTimeFieldUpdateOperationsInput
  referredOn: NullableDateTimeFieldUpdateOperationsInput
  latestReferenceId: NullableIntFieldUpdateOperationsInput
  customer: CustomerUpdateOneRequiredWithoutCompaniesInput
  leadSource: UserUpdateOneWithoutLeadSourceForInput
  companyParent: CompanyUpdateOneWithoutSubsidiaryInput
  primaryContact: UserUpdateOneWithoutPrimaryContactForInput
  references: ReferenceUpdateManyWithoutCompanyInput
  referencesServedFor: ReferenceUpdateManyWithoutServedAsReferenceForInput
  subsidiary: CompanyUpdateManyWithoutCompanyParentInput
  events: EventUpdateManyWithoutCompanyInput
  notes: NoteUpdateManyWithoutCompanyInput
  account: AccountUpdateOneRequiredWithoutCompanyInput
  competitors: CompetitorUpdateManyWithoutCompanyInput
  products: ProductUpdateManyWithoutCompanyInput
  contacts: ContactsUpdateManyWithoutCompanyInput
  UserCompanyRatings: UserCompanyRatingsUpdateManyWithoutCompanyInput
  listCompanies: ListCompanyUpdateManyWithoutCompanyInput
  Launch: LaunchUpdateManyWithoutCompanyInput
}

input AccountUpdateOneRequiredWithoutCompanyInput {
  create: AccountCreateWithoutCompanyInput
  connectOrCreate: AccountCreateOrConnectWithoutCompanyInput
  upsert: AccountUpsertWithoutCompanyInput
  connect: AccountWhereUniqueInput
  update: AccountUpdateWithoutCompanyInput
}

input AccountUpsertWithoutCompanyInput {
  update: AccountUpdateWithoutCompanyInput!
  create: AccountCreateWithoutCompanyInput!
}

input AccountUpdateWithoutCompanyInput {
  accountName: StringFieldUpdateOperationsInput
  AccountUUID: StringFieldUpdateOperationsInput
}

input CompetitorUpdateManyWithoutCompanyInput {
  create: [CompetitorCreateWithoutCompanyInput!]
  connectOrCreate: [CompetitorCreateOrConnectWithoutCompanyInput!]
  upsert: [CompetitorUpsertWithWhereUniqueWithoutCompanyInput!]
  createMany: CompetitorCreateManyCompanyInputEnvelope
  connect: [CompetitorWhereUniqueInput!]
  set: [CompetitorWhereUniqueInput!]
  disconnect: [CompetitorWhereUniqueInput!]
  delete: [CompetitorWhereUniqueInput!]
  update: [CompetitorUpdateWithWhereUniqueWithoutCompanyInput!]
  updateMany: [CompetitorUpdateManyWithWhereWithoutCompanyInput!]
  deleteMany: [CompetitorScalarWhereInput!]
}

input CompetitorUpsertWithWhereUniqueWithoutCompanyInput {
  where: CompetitorWhereUniqueInput!
  update: CompetitorUpdateWithoutCompanyInput!
  create: CompetitorCreateWithoutCompanyInput!
}

input CompetitorUpdateWithoutCompanyInput {
  name: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
}

input CompetitorUpdateWithWhereUniqueWithoutCompanyInput {
  where: CompetitorWhereUniqueInput!
  data: CompetitorUpdateWithoutCompanyInput!
}

input CompetitorUpdateManyWithWhereWithoutCompanyInput {
  where: CompetitorScalarWhereInput!
  data: CompetitorUpdateManyMutationInput!
}

input CompetitorScalarWhereInput {
  AND: [CompetitorScalarWhereInput!]
  OR: [CompetitorScalarWhereInput!]
  NOT: [CompetitorScalarWhereInput!]
  id: IntFilter
  name: StringFilter
  createdAt: DateTimeFilter
  companyId: IntNullableFilter
}

input CompetitorUpdateManyMutationInput {
  name: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
}

input ProductUpdateManyWithoutCompanyInput {
  create: [ProductCreateWithoutCompanyInput!]
  connectOrCreate: [ProductCreateOrConnectWithoutCompanyInput!]
  upsert: [ProductUpsertWithWhereUniqueWithoutCompanyInput!]
  createMany: ProductCreateManyCompanyInputEnvelope
  connect: [ProductWhereUniqueInput!]
  set: [ProductWhereUniqueInput!]
  disconnect: [ProductWhereUniqueInput!]
  delete: [ProductWhereUniqueInput!]
  update: [ProductUpdateWithWhereUniqueWithoutCompanyInput!]
  updateMany: [ProductUpdateManyWithWhereWithoutCompanyInput!]
  deleteMany: [ProductScalarWhereInput!]
}

input ProductUpsertWithWhereUniqueWithoutCompanyInput {
  where: ProductWhereUniqueInput!
  update: ProductUpdateWithoutCompanyInput!
  create: ProductCreateWithoutCompanyInput!
}

input ProductUpdateWithoutCompanyInput {
  name: StringFieldUpdateOperationsInput
  orderStartDate: DateTimeFieldUpdateOperationsInput
  orderEndDate: DateTimeFieldUpdateOperationsInput
  orderTerms: IntFieldUpdateOperationsInput
  monthlyUnitPrice: IntFieldUpdateOperationsInput
  quantity: IntFieldUpdateOperationsInput
  totalPrice: IntFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ProductUpdateWithWhereUniqueWithoutCompanyInput {
  where: ProductWhereUniqueInput!
  data: ProductUpdateWithoutCompanyInput!
}

input ProductUpdateManyWithWhereWithoutCompanyInput {
  where: ProductScalarWhereInput!
  data: ProductUpdateManyMutationInput!
}

input ProductScalarWhereInput {
  AND: [ProductScalarWhereInput!]
  OR: [ProductScalarWhereInput!]
  NOT: [ProductScalarWhereInput!]
  id: IntFilter
  name: StringFilter
  orderStartDate: DateTimeFilter
  orderEndDate: DateTimeFilter
  orderTerms: IntFilter
  monthlyUnitPrice: IntFilter
  quantity: IntFilter
  totalPrice: IntFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  companyId: IntFilter
}

input ProductUpdateManyMutationInput {
  name: StringFieldUpdateOperationsInput
  orderStartDate: DateTimeFieldUpdateOperationsInput
  orderEndDate: DateTimeFieldUpdateOperationsInput
  orderTerms: IntFieldUpdateOperationsInput
  monthlyUnitPrice: IntFieldUpdateOperationsInput
  quantity: IntFieldUpdateOperationsInput
  totalPrice: IntFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ContactsUpdateManyWithoutCompanyInput {
  create: [ContactsCreateWithoutCompanyInput!]
  connectOrCreate: [ContactsCreateOrConnectWithoutCompanyInput!]
  upsert: [ContactsUpsertWithWhereUniqueWithoutCompanyInput!]
  createMany: ContactsCreateManyCompanyInputEnvelope
  connect: [ContactsWhereUniqueInput!]
  set: [ContactsWhereUniqueInput!]
  disconnect: [ContactsWhereUniqueInput!]
  delete: [ContactsWhereUniqueInput!]
  update: [ContactsUpdateWithWhereUniqueWithoutCompanyInput!]
  updateMany: [ContactsUpdateManyWithWhereWithoutCompanyInput!]
  deleteMany: [ContactsScalarWhereInput!]
}

input ContactsUpsertWithWhereUniqueWithoutCompanyInput {
  where: ContactsWhereUniqueInput!
  update: ContactsUpdateWithoutCompanyInput!
  create: ContactsCreateWithoutCompanyInput!
}

input ContactsUpdateWithoutCompanyInput {
  email: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  workPhone: NullableStringFieldUpdateOperationsInput
  mobilePhone: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  primary: BoolFieldUpdateOperationsInput
  image: NullableStringFieldUpdateOperationsInput
  launchContacts: LaunchContactsUpdateManyWithoutContactInput
}

input LaunchContactsUpdateManyWithoutContactInput {
  create: [LaunchContactsCreateWithoutContactInput!]
  connectOrCreate: [LaunchContactsCreateOrConnectWithoutContactInput!]
  upsert: [LaunchContactsUpsertWithWhereUniqueWithoutContactInput!]
  createMany: LaunchContactsCreateManyContactInputEnvelope
  connect: [LaunchContactsWhereUniqueInput!]
  set: [LaunchContactsWhereUniqueInput!]
  disconnect: [LaunchContactsWhereUniqueInput!]
  delete: [LaunchContactsWhereUniqueInput!]
  update: [LaunchContactsUpdateWithWhereUniqueWithoutContactInput!]
  updateMany: [LaunchContactsUpdateManyWithWhereWithoutContactInput!]
  deleteMany: [LaunchContactsScalarWhereInput!]
}

input LaunchContactsUpsertWithWhereUniqueWithoutContactInput {
  where: LaunchContactsWhereUniqueInput!
  update: LaunchContactsUpdateWithoutContactInput!
  create: LaunchContactsCreateWithoutContactInput!
}

input LaunchContactsUpdateWithoutContactInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  launch: LaunchUpdateOneRequiredWithoutLaunchContactsInput
}

input LaunchUpdateOneRequiredWithoutLaunchContactsInput {
  create: LaunchCreateWithoutLaunchContactsInput
  connectOrCreate: LaunchCreateOrConnectWithoutLaunchContactsInput
  upsert: LaunchUpsertWithoutLaunchContactsInput
  connect: LaunchWhereUniqueInput
  update: LaunchUpdateWithoutLaunchContactsInput
}

input LaunchUpsertWithoutLaunchContactsInput {
  update: LaunchUpdateWithoutLaunchContactsInput!
  create: LaunchCreateWithoutLaunchContactsInput!
}

input LaunchUpdateWithoutLaunchContactsInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  sendToAddress: NullableStringFieldUpdateOperationsInput
  subject: StringFieldUpdateOperationsInput
  text: StringFieldUpdateOperationsInput
  delta: JSON
  company: CompanyUpdateOneRequiredWithoutLaunchInput
  events: EventUpdateOneWithoutLaunchInput
  messageTempate: MessageTemplateUpdateOneWithoutLaunchInput
  Customer: CustomerUpdateOneWithoutLaunchInput
}

input EventUpdateOneWithoutLaunchInput {
  create: EventCreateWithoutLaunchInput
  connectOrCreate: EventCreateOrConnectWithoutLaunchInput
  upsert: EventUpsertWithoutLaunchInput
  connect: EventWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: EventUpdateWithoutLaunchInput
}

input EventUpsertWithoutLaunchInput {
  update: EventUpdateWithoutLaunchInput!
  create: EventCreateWithoutLaunchInput!
}

input EventUpdateWithoutLaunchInput {
  data: JSON
  notifiedAt: NullableDateTimeFieldUpdateOperationsInput
  text: NullableStringFieldUpdateOperationsInput
  type: EnumEventTypeFieldUpdateOperationsInput
  needsAttention: NullableEnumEventAttentionFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  company: CompanyUpdateOneWithoutEventsInput
  customer: CustomerUpdateOneRequiredWithoutEventsInput
  notes: NoteUpdateManyWithoutEventsInput
  userEvents: UserEventsUpdateManyWithoutEventInput
  parentEvent: EventUpdateOneWithoutChildEventsInput
  childEvents: EventUpdateManyWithoutParentEventInput
  message: NoteUpdateOneWithoutEventInput
}

input NoteUpdateManyWithoutEventsInput {
  create: [NoteCreateWithoutEventsInput!]
  connectOrCreate: [NoteCreateOrConnectWithoutEventsInput!]
  upsert: [NoteUpsertWithWhereUniqueWithoutEventsInput!]
  createMany: NoteCreateManyEventsInputEnvelope
  connect: [NoteWhereUniqueInput!]
  set: [NoteWhereUniqueInput!]
  disconnect: [NoteWhereUniqueInput!]
  delete: [NoteWhereUniqueInput!]
  update: [NoteUpdateWithWhereUniqueWithoutEventsInput!]
  updateMany: [NoteUpdateManyWithWhereWithoutEventsInput!]
  deleteMany: [NoteScalarWhereInput!]
}

input NoteUpsertWithWhereUniqueWithoutEventsInput {
  where: NoteWhereUniqueInput!
  update: NoteUpdateWithoutEventsInput!
  create: NoteCreateWithoutEventsInput!
}

input NoteUpdateWithoutEventsInput {
  readAt: NullableDateTimeFieldUpdateOperationsInput
  flaggedAt: NullableDateTimeFieldUpdateOperationsInput
  subject: StringFieldUpdateOperationsInput
  text: StringFieldUpdateOperationsInput
  allCanView: BoolFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  delta: JSON
  company: CompanyUpdateOneWithoutNotesInput
  customer: CustomerUpdateOneWithoutNotesInput
  user: UserUpdateOneWithoutNoteInput
  noteUserTags: NoteUserTagsUpdateManyWithoutNoteInput
  noteGroupTags: NoteGroupTagsUpdateManyWithoutNoteInput
  Event: EventUpdateManyWithoutMessageInput
}

input CompanyUpdateOneWithoutNotesInput {
  create: CompanyCreateWithoutNotesInput
  connectOrCreate: CompanyCreateOrConnectWithoutNotesInput
  upsert: CompanyUpsertWithoutNotesInput
  connect: CompanyWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: CompanyUpdateWithoutNotesInput
}

input CompanyUpsertWithoutNotesInput {
  update: CompanyUpdateWithoutNotesInput!
  create: CompanyCreateWithoutNotesInput!
}

input CompanyUpdateWithoutNotesInput {
  annualRecurringRevenue: NullableIntFieldUpdateOperationsInput
  expectedToCloseAt: NullableDateTimeFieldUpdateOperationsInput
  fiscalYearStartMonth: NullableIntFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  companyType: EnumCompanyTypeFieldUpdateOperationsInput
  seatSize: NullableIntFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  fiscalYear: IntFieldUpdateOperationsInput
  renewalDate: NullableDateTimeFieldUpdateOperationsInput
  referredOn: NullableDateTimeFieldUpdateOperationsInput
  latestReferenceId: NullableIntFieldUpdateOperationsInput
  customer: CustomerUpdateOneRequiredWithoutCompaniesInput
  leadSource: UserUpdateOneWithoutLeadSourceForInput
  companyParent: CompanyUpdateOneWithoutSubsidiaryInput
  primaryContact: UserUpdateOneWithoutPrimaryContactForInput
  references: ReferenceUpdateManyWithoutCompanyInput
  referencesServedFor: ReferenceUpdateManyWithoutServedAsReferenceForInput
  subsidiary: CompanyUpdateManyWithoutCompanyParentInput
  starredBy: CompanyStarredUpdateManyWithoutCompanyInput
  events: EventUpdateManyWithoutCompanyInput
  account: AccountUpdateOneRequiredWithoutCompanyInput
  competitors: CompetitorUpdateManyWithoutCompanyInput
  products: ProductUpdateManyWithoutCompanyInput
  contacts: ContactsUpdateManyWithoutCompanyInput
  UserCompanyRatings: UserCompanyRatingsUpdateManyWithoutCompanyInput
  listCompanies: ListCompanyUpdateManyWithoutCompanyInput
  Launch: LaunchUpdateManyWithoutCompanyInput
}

input UserCompanyRatingsUpdateManyWithoutCompanyInput {
  create: [UserCompanyRatingsCreateWithoutCompanyInput!]
  connectOrCreate: [UserCompanyRatingsCreateOrConnectWithoutCompanyInput!]
  upsert: [UserCompanyRatingsUpsertWithWhereUniqueWithoutCompanyInput!]
  createMany: UserCompanyRatingsCreateManyCompanyInputEnvelope
  connect: [UserCompanyRatingsWhereUniqueInput!]
  set: [UserCompanyRatingsWhereUniqueInput!]
  disconnect: [UserCompanyRatingsWhereUniqueInput!]
  delete: [UserCompanyRatingsWhereUniqueInput!]
  update: [UserCompanyRatingsUpdateWithWhereUniqueWithoutCompanyInput!]
  updateMany: [UserCompanyRatingsUpdateManyWithWhereWithoutCompanyInput!]
  deleteMany: [UserCompanyRatingsScalarWhereInput!]
}

input UserCompanyRatingsUpsertWithWhereUniqueWithoutCompanyInput {
  where: UserCompanyRatingsWhereUniqueInput!
  update: UserCompanyRatingsUpdateWithoutCompanyInput!
  create: UserCompanyRatingsCreateWithoutCompanyInput!
}

input UserCompanyRatingsUpdateWithoutCompanyInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutUserCompanyRatingsInput
  rating: RatingUpdateOneRequiredWithoutUserratingcompanyInput
}

input UserUpdateOneRequiredWithoutUserCompanyRatingsInput {
  create: UserCreateWithoutUserCompanyRatingsInput
  connectOrCreate: UserCreateOrConnectWithoutUserCompanyRatingsInput
  upsert: UserUpsertWithoutUserCompanyRatingsInput
  connect: UserWhereUniqueInput
  update: UserUpdateWithoutUserCompanyRatingsInput
}

input UserUpsertWithoutUserCompanyRatingsInput {
  update: UserUpdateWithoutUserCompanyRatingsInput!
  create: UserCreateWithoutUserCompanyRatingsInput!
}

input UserUpdateWithoutUserCompanyRatingsInput {
  admin: BoolFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  passwordHash: NullableStringFieldUpdateOperationsInput
  passwordSalt: NullableStringFieldUpdateOperationsInput
  workPhone: NullableStringFieldUpdateOperationsInput
  mobilePhone: NullableStringFieldUpdateOperationsInput
  title: NullableStringFieldUpdateOperationsInput
  token: NullableStringFieldUpdateOperationsInput
  notificationSettings: JSON
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  dynamicFields: JSON
  active: BoolFieldUpdateOperationsInput
  oktaUserId: NullableIntFieldUpdateOperationsInput
  oktaManagerId: NullableIntFieldUpdateOperationsInput
  forgetPassword: NullableStringFieldUpdateOperationsInput
  csmStatus: BoolFieldUpdateOperationsInput
  crmStatus: BoolFieldUpdateOperationsInput
  customer: CustomerUpdateOneRequiredWithoutUsersInput
  leadSourceFor: CompanyUpdateManyWithoutLeadSourceInput
  primaryContactFor: CompanyUpdateManyWithoutPrimaryContactInput
  starred: CompanyStarredUpdateManyWithoutUserInput
  externalUser: ExternalUserUpdateManyWithoutUserInput
  groups: GroupUserUpdateManyWithoutUserInput
  Note: NoteUpdateManyWithoutUserInput
  roles: UserRoleUpdateManyWithoutUserInput
  userEvents: UserEventsUpdateManyWithoutUserInput
  noteUserTags: NoteUserTagsUpdateManyWithoutUserInput
  messageTemplate: MessageTemplateUpdateManyWithoutUserInput
  Feedback: FeedbackUpdateManyWithoutUserInput
  references: ReferenceUpdateManyWithoutUserInput
  userManager: UserManagerUpdateManyWithoutUserInput
  userReportee: UserManagerUpdateManyWithoutManagerInput
}

input ExternalUserUpdateManyWithoutUserInput {
  create: [ExternalUserCreateWithoutUserInput!]
  connectOrCreate: [ExternalUserCreateOrConnectWithoutUserInput!]
  upsert: [ExternalUserUpsertWithWhereUniqueWithoutUserInput!]
  createMany: ExternalUserCreateManyUserInputEnvelope
  connect: [ExternalUserWhereUniqueInput!]
  set: [ExternalUserWhereUniqueInput!]
  disconnect: [ExternalUserWhereUniqueInput!]
  delete: [ExternalUserWhereUniqueInput!]
  update: [ExternalUserUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [ExternalUserUpdateManyWithWhereWithoutUserInput!]
  deleteMany: [ExternalUserScalarWhereInput!]
}

input ExternalUserUpsertWithWhereUniqueWithoutUserInput {
  where: ExternalUserWhereUniqueInput!
  update: ExternalUserUpdateWithoutUserInput!
  create: ExternalUserCreateWithoutUserInput!
}

input ExternalUserUpdateWithoutUserInput {
  department: NullableStringFieldUpdateOperationsInput
  division: NullableStringFieldUpdateOperationsInput
  email: NullableStringFieldUpdateOperationsInput
  employeeNumber: NullableStringFieldUpdateOperationsInput
  externalId: StringFieldUpdateOperationsInput
  name: NullableStringFieldUpdateOperationsInput
  source: EnumCustomerIntegrationTypeFieldUpdateOperationsInput
  title: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  customer: CustomerUpdateOneRequiredWithoutExternalUsersInput
  externalGroups: ExternalGroupMemberUpdateManyWithoutUserInput
}

input ExternalGroupMemberUpdateManyWithoutUserInput {
  create: [ExternalGroupMemberCreateWithoutUserInput!]
  connectOrCreate: [ExternalGroupMemberCreateOrConnectWithoutUserInput!]
  upsert: [ExternalGroupMemberUpsertWithWhereUniqueWithoutUserInput!]
  createMany: ExternalGroupMemberCreateManyUserInputEnvelope
  connect: [ExternalGroupMemberWhereUniqueInput!]
  set: [ExternalGroupMemberWhereUniqueInput!]
  disconnect: [ExternalGroupMemberWhereUniqueInput!]
  delete: [ExternalGroupMemberWhereUniqueInput!]
  update: [ExternalGroupMemberUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [ExternalGroupMemberUpdateManyWithWhereWithoutUserInput!]
  deleteMany: [ExternalGroupMemberScalarWhereInput!]
}

input ExternalGroupMemberUpsertWithWhereUniqueWithoutUserInput {
  where: ExternalGroupMemberWhereUniqueInput!
  update: ExternalGroupMemberUpdateWithoutUserInput!
  create: ExternalGroupMemberCreateWithoutUserInput!
}

input ExternalGroupMemberUpdateWithoutUserInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  group: ExternalGroupUpdateOneRequiredWithoutMembersInput
}

input ExternalGroupUpdateOneRequiredWithoutMembersInput {
  create: ExternalGroupCreateWithoutMembersInput
  connectOrCreate: ExternalGroupCreateOrConnectWithoutMembersInput
  upsert: ExternalGroupUpsertWithoutMembersInput
  connect: ExternalGroupWhereUniqueInput
  update: ExternalGroupUpdateWithoutMembersInput
}

input ExternalGroupUpsertWithoutMembersInput {
  update: ExternalGroupUpdateWithoutMembersInput!
  create: ExternalGroupCreateWithoutMembersInput!
}

input ExternalGroupUpdateWithoutMembersInput {
  externalId: StringFieldUpdateOperationsInput
  developerName: StringFieldUpdateOperationsInput
  name: NullableStringFieldUpdateOperationsInput
  ownerId: NullableStringFieldUpdateOperationsInput
  source: EnumCustomerIntegrationTypeFieldUpdateOperationsInput
  type: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  customer: CustomerUpdateOneRequiredWithoutExternalGroupsInput
}

input CustomerUpdateOneRequiredWithoutExternalGroupsInput {
  create: CustomerCreateWithoutExternalGroupsInput
  connectOrCreate: CustomerCreateOrConnectWithoutExternalGroupsInput
  upsert: CustomerUpsertWithoutExternalGroupsInput
  connect: CustomerWhereUniqueInput
  update: CustomerUpdateWithoutExternalGroupsInput
}

input CustomerUpsertWithoutExternalGroupsInput {
  update: CustomerUpdateWithoutExternalGroupsInput!
  create: CustomerCreateWithoutExternalGroupsInput!
}

input CustomerUpdateWithoutExternalGroupsInput {
  name: StringFieldUpdateOperationsInput
  type: EnumCustomerTypeFieldUpdateOperationsInput
  favoritedAt: NullableDateTimeFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  oktaClientId: NullableStringFieldUpdateOperationsInput
  oktaDomain: NullableStringFieldUpdateOperationsInput
  oktaClientSecret: NullableStringFieldUpdateOperationsInput
  oktaApiKey: NullableStringFieldUpdateOperationsInput
  launch: LaunchUpdateManyWithoutCustomerInput
  companies: CompanyUpdateManyWithoutCustomerInput
  integrations: CustomerIntegrationUpdateManyWithoutCustomerInput
  events: EventUpdateManyWithoutCustomerInput
  externalUsers: ExternalUserUpdateManyWithoutCustomerInput
  groups: GroupUpdateManyWithoutCustomerInput
  notes: NoteUpdateManyWithoutCustomerInput
  roles: RoleUpdateManyWithoutCustomerInput
  salesLeads: SalesLeadUpdateManyWithoutCustomerInput
  syncEvents: SyncEventUpdateManyWithoutCustomerInput
  users: UserUpdateManyWithoutCustomerInput
  messageTemplate: MessageTemplateUpdateManyWithoutCustomerInput
  dynamicFields: DynamicUserFieldsUpdateManyWithoutCustomerInput
  lists: ListUpdateManyWithoutCustomerInput
  useCaseCollections: UseCaseCollectionsUpdateManyWithoutCustomerInput
  customerDataSources: DataSourcesOnCustomerUpdateManyWithoutCustomerInput
  dataObjectCollections: DataObjectCollectionsUpdateManyWithoutCustomerInput
}

input GroupUpdateManyWithoutCustomerInput {
  create: [GroupCreateWithoutCustomerInput!]
  connectOrCreate: [GroupCreateOrConnectWithoutCustomerInput!]
  upsert: [GroupUpsertWithWhereUniqueWithoutCustomerInput!]
  createMany: GroupCreateManyCustomerInputEnvelope
  connect: [GroupWhereUniqueInput!]
  set: [GroupWhereUniqueInput!]
  disconnect: [GroupWhereUniqueInput!]
  delete: [GroupWhereUniqueInput!]
  update: [GroupUpdateWithWhereUniqueWithoutCustomerInput!]
  updateMany: [GroupUpdateManyWithWhereWithoutCustomerInput!]
  deleteMany: [GroupScalarWhereInput!]
}

input GroupUpsertWithWhereUniqueWithoutCustomerInput {
  where: GroupWhereUniqueInput!
  update: GroupUpdateWithoutCustomerInput!
  create: GroupCreateWithoutCustomerInput!
}

input GroupUpdateWithoutCustomerInput {
  name: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  users: GroupUserUpdateManyWithoutGroupInput
  parent: GroupUpdateOneWithoutChildrenInput
  children: GroupUpdateManyWithoutParentInput
  noteGroupTags: NoteGroupTagsUpdateManyWithoutGroupInput
}

input GroupUserUpdateManyWithoutGroupInput {
  create: [GroupUserCreateWithoutGroupInput!]
  connectOrCreate: [GroupUserCreateOrConnectWithoutGroupInput!]
  upsert: [GroupUserUpsertWithWhereUniqueWithoutGroupInput!]
  createMany: GroupUserCreateManyGroupInputEnvelope
  connect: [GroupUserWhereUniqueInput!]
  set: [GroupUserWhereUniqueInput!]
  disconnect: [GroupUserWhereUniqueInput!]
  delete: [GroupUserWhereUniqueInput!]
  update: [GroupUserUpdateWithWhereUniqueWithoutGroupInput!]
  updateMany: [GroupUserUpdateManyWithWhereWithoutGroupInput!]
  deleteMany: [GroupUserScalarWhereInput!]
}

input GroupUserUpsertWithWhereUniqueWithoutGroupInput {
  where: GroupUserWhereUniqueInput!
  update: GroupUserUpdateWithoutGroupInput!
  create: GroupUserCreateWithoutGroupInput!
}

input GroupUserUpdateWithoutGroupInput {
  dummy: NullableIntFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutGroupsInput
}

input UserUpdateOneRequiredWithoutGroupsInput {
  create: UserCreateWithoutGroupsInput
  connectOrCreate: UserCreateOrConnectWithoutGroupsInput
  upsert: UserUpsertWithoutGroupsInput
  connect: UserWhereUniqueInput
  update: UserUpdateWithoutGroupsInput
}

input UserUpsertWithoutGroupsInput {
  update: UserUpdateWithoutGroupsInput!
  create: UserCreateWithoutGroupsInput!
}

input UserUpdateWithoutGroupsInput {
  admin: BoolFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  passwordHash: NullableStringFieldUpdateOperationsInput
  passwordSalt: NullableStringFieldUpdateOperationsInput
  workPhone: NullableStringFieldUpdateOperationsInput
  mobilePhone: NullableStringFieldUpdateOperationsInput
  title: NullableStringFieldUpdateOperationsInput
  token: NullableStringFieldUpdateOperationsInput
  notificationSettings: JSON
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  dynamicFields: JSON
  active: BoolFieldUpdateOperationsInput
  oktaUserId: NullableIntFieldUpdateOperationsInput
  oktaManagerId: NullableIntFieldUpdateOperationsInput
  forgetPassword: NullableStringFieldUpdateOperationsInput
  csmStatus: BoolFieldUpdateOperationsInput
  crmStatus: BoolFieldUpdateOperationsInput
  customer: CustomerUpdateOneRequiredWithoutUsersInput
  leadSourceFor: CompanyUpdateManyWithoutLeadSourceInput
  primaryContactFor: CompanyUpdateManyWithoutPrimaryContactInput
  starred: CompanyStarredUpdateManyWithoutUserInput
  externalUser: ExternalUserUpdateManyWithoutUserInput
  Note: NoteUpdateManyWithoutUserInput
  roles: UserRoleUpdateManyWithoutUserInput
  userEvents: UserEventsUpdateManyWithoutUserInput
  UserCompanyRatings: UserCompanyRatingsUpdateManyWithoutUserInput
  noteUserTags: NoteUserTagsUpdateManyWithoutUserInput
  messageTemplate: MessageTemplateUpdateManyWithoutUserInput
  Feedback: FeedbackUpdateManyWithoutUserInput
  references: ReferenceUpdateManyWithoutUserInput
  userManager: UserManagerUpdateManyWithoutUserInput
  userReportee: UserManagerUpdateManyWithoutManagerInput
}

input NoteUpdateManyWithoutUserInput {
  create: [NoteCreateWithoutUserInput!]
  connectOrCreate: [NoteCreateOrConnectWithoutUserInput!]
  upsert: [NoteUpsertWithWhereUniqueWithoutUserInput!]
  createMany: NoteCreateManyUserInputEnvelope
  connect: [NoteWhereUniqueInput!]
  set: [NoteWhereUniqueInput!]
  disconnect: [NoteWhereUniqueInput!]
  delete: [NoteWhereUniqueInput!]
  update: [NoteUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [NoteUpdateManyWithWhereWithoutUserInput!]
  deleteMany: [NoteScalarWhereInput!]
}

input NoteUpsertWithWhereUniqueWithoutUserInput {
  where: NoteWhereUniqueInput!
  update: NoteUpdateWithoutUserInput!
  create: NoteCreateWithoutUserInput!
}

input NoteUpdateWithoutUserInput {
  readAt: NullableDateTimeFieldUpdateOperationsInput
  flaggedAt: NullableDateTimeFieldUpdateOperationsInput
  subject: StringFieldUpdateOperationsInput
  text: StringFieldUpdateOperationsInput
  allCanView: BoolFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  delta: JSON
  company: CompanyUpdateOneWithoutNotesInput
  customer: CustomerUpdateOneWithoutNotesInput
  events: EventUpdateOneWithoutNotesInput
  noteUserTags: NoteUserTagsUpdateManyWithoutNoteInput
  noteGroupTags: NoteGroupTagsUpdateManyWithoutNoteInput
  Event: EventUpdateManyWithoutMessageInput
}

input EventUpdateOneWithoutNotesInput {
  create: EventCreateWithoutNotesInput
  connectOrCreate: EventCreateOrConnectWithoutNotesInput
  upsert: EventUpsertWithoutNotesInput
  connect: EventWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: EventUpdateWithoutNotesInput
}

input EventUpsertWithoutNotesInput {
  update: EventUpdateWithoutNotesInput!
  create: EventCreateWithoutNotesInput!
}

input EventUpdateWithoutNotesInput {
  data: JSON
  notifiedAt: NullableDateTimeFieldUpdateOperationsInput
  text: NullableStringFieldUpdateOperationsInput
  type: EnumEventTypeFieldUpdateOperationsInput
  needsAttention: NullableEnumEventAttentionFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  company: CompanyUpdateOneWithoutEventsInput
  customer: CustomerUpdateOneRequiredWithoutEventsInput
  Launch: LaunchUpdateManyWithoutEventsInput
  userEvents: UserEventsUpdateManyWithoutEventInput
  parentEvent: EventUpdateOneWithoutChildEventsInput
  childEvents: EventUpdateManyWithoutParentEventInput
  message: NoteUpdateOneWithoutEventInput
}

input LaunchUpdateManyWithoutEventsInput {
  create: [LaunchCreateWithoutEventsInput!]
  connectOrCreate: [LaunchCreateOrConnectWithoutEventsInput!]
  upsert: [LaunchUpsertWithWhereUniqueWithoutEventsInput!]
  createMany: LaunchCreateManyEventsInputEnvelope
  connect: [LaunchWhereUniqueInput!]
  set: [LaunchWhereUniqueInput!]
  disconnect: [LaunchWhereUniqueInput!]
  delete: [LaunchWhereUniqueInput!]
  update: [LaunchUpdateWithWhereUniqueWithoutEventsInput!]
  updateMany: [LaunchUpdateManyWithWhereWithoutEventsInput!]
  deleteMany: [LaunchScalarWhereInput!]
}

input LaunchUpsertWithWhereUniqueWithoutEventsInput {
  where: LaunchWhereUniqueInput!
  update: LaunchUpdateWithoutEventsInput!
  create: LaunchCreateWithoutEventsInput!
}

input LaunchUpdateWithoutEventsInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  sendToAddress: NullableStringFieldUpdateOperationsInput
  subject: StringFieldUpdateOperationsInput
  text: StringFieldUpdateOperationsInput
  delta: JSON
  company: CompanyUpdateOneRequiredWithoutLaunchInput
  messageTempate: MessageTemplateUpdateOneWithoutLaunchInput
  launchContacts: LaunchContactsUpdateManyWithoutLaunchInput
  Customer: CustomerUpdateOneWithoutLaunchInput
}

input MessageTemplateUpdateOneWithoutLaunchInput {
  create: MessageTemplateCreateWithoutLaunchInput
  connectOrCreate: MessageTemplateCreateOrConnectWithoutLaunchInput
  upsert: MessageTemplateUpsertWithoutLaunchInput
  connect: MessageTemplateWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: MessageTemplateUpdateWithoutLaunchInput
}

input MessageTemplateUpsertWithoutLaunchInput {
  update: MessageTemplateUpdateWithoutLaunchInput!
  create: MessageTemplateCreateWithoutLaunchInput!
}

input MessageTemplateUpdateWithoutLaunchInput {
  eventType: EnumEventTypeFieldUpdateOperationsInput
  companyType: EnumCompanyTypeFieldUpdateOperationsInput
  messageType: EnumMessageTypeFieldUpdateOperationsInput
  sendToAddress: NullableStringFieldUpdateOperationsInput
  title: NullableStringFieldUpdateOperationsInput
  subject: StringFieldUpdateOperationsInput
  text: StringFieldUpdateOperationsInput
  delta: JSON
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
  customer: CustomerUpdateOneRequiredWithoutMessageTemplateInput
  user: UserUpdateOneRequiredWithoutMessageTemplateInput
}

input EnumMessageTypeFieldUpdateOperationsInput {
  set: MessageType
}

input CustomerUpdateOneRequiredWithoutMessageTemplateInput {
  create: CustomerCreateWithoutMessageTemplateInput
  connectOrCreate: CustomerCreateOrConnectWithoutMessageTemplateInput
  upsert: CustomerUpsertWithoutMessageTemplateInput
  connect: CustomerWhereUniqueInput
  update: CustomerUpdateWithoutMessageTemplateInput
}

input CustomerUpsertWithoutMessageTemplateInput {
  update: CustomerUpdateWithoutMessageTemplateInput!
  create: CustomerCreateWithoutMessageTemplateInput!
}

input CustomerUpdateWithoutMessageTemplateInput {
  name: StringFieldUpdateOperationsInput
  type: EnumCustomerTypeFieldUpdateOperationsInput
  favoritedAt: NullableDateTimeFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  oktaClientId: NullableStringFieldUpdateOperationsInput
  oktaDomain: NullableStringFieldUpdateOperationsInput
  oktaClientSecret: NullableStringFieldUpdateOperationsInput
  oktaApiKey: NullableStringFieldUpdateOperationsInput
  launch: LaunchUpdateManyWithoutCustomerInput
  companies: CompanyUpdateManyWithoutCustomerInput
  integrations: CustomerIntegrationUpdateManyWithoutCustomerInput
  events: EventUpdateManyWithoutCustomerInput
  externalGroups: ExternalGroupUpdateManyWithoutCustomerInput
  externalUsers: ExternalUserUpdateManyWithoutCustomerInput
  groups: GroupUpdateManyWithoutCustomerInput
  notes: NoteUpdateManyWithoutCustomerInput
  roles: RoleUpdateManyWithoutCustomerInput
  salesLeads: SalesLeadUpdateManyWithoutCustomerInput
  syncEvents: SyncEventUpdateManyWithoutCustomerInput
  users: UserUpdateManyWithoutCustomerInput
  dynamicFields: DynamicUserFieldsUpdateManyWithoutCustomerInput
  lists: ListUpdateManyWithoutCustomerInput
  useCaseCollections: UseCaseCollectionsUpdateManyWithoutCustomerInput
  customerDataSources: DataSourcesOnCustomerUpdateManyWithoutCustomerInput
  dataObjectCollections: DataObjectCollectionsUpdateManyWithoutCustomerInput
}

input NoteUpdateManyWithoutCustomerInput {
  create: [NoteCreateWithoutCustomerInput!]
  connectOrCreate: [NoteCreateOrConnectWithoutCustomerInput!]
  upsert: [NoteUpsertWithWhereUniqueWithoutCustomerInput!]
  createMany: NoteCreateManyCustomerInputEnvelope
  connect: [NoteWhereUniqueInput!]
  set: [NoteWhereUniqueInput!]
  disconnect: [NoteWhereUniqueInput!]
  delete: [NoteWhereUniqueInput!]
  update: [NoteUpdateWithWhereUniqueWithoutCustomerInput!]
  updateMany: [NoteUpdateManyWithWhereWithoutCustomerInput!]
  deleteMany: [NoteScalarWhereInput!]
}

input NoteUpsertWithWhereUniqueWithoutCustomerInput {
  where: NoteWhereUniqueInput!
  update: NoteUpdateWithoutCustomerInput!
  create: NoteCreateWithoutCustomerInput!
}

input NoteUpdateWithoutCustomerInput {
  readAt: NullableDateTimeFieldUpdateOperationsInput
  flaggedAt: NullableDateTimeFieldUpdateOperationsInput
  subject: StringFieldUpdateOperationsInput
  text: StringFieldUpdateOperationsInput
  allCanView: BoolFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  delta: JSON
  company: CompanyUpdateOneWithoutNotesInput
  events: EventUpdateOneWithoutNotesInput
  user: UserUpdateOneWithoutNoteInput
  noteUserTags: NoteUserTagsUpdateManyWithoutNoteInput
  noteGroupTags: NoteGroupTagsUpdateManyWithoutNoteInput
  Event: EventUpdateManyWithoutMessageInput
}

input UserUpdateOneWithoutNoteInput {
  create: UserCreateWithoutNoteInput
  connectOrCreate: UserCreateOrConnectWithoutNoteInput
  upsert: UserUpsertWithoutNoteInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: UserUpdateWithoutNoteInput
}

input UserUpsertWithoutNoteInput {
  update: UserUpdateWithoutNoteInput!
  create: UserCreateWithoutNoteInput!
}

input UserUpdateWithoutNoteInput {
  admin: BoolFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  passwordHash: NullableStringFieldUpdateOperationsInput
  passwordSalt: NullableStringFieldUpdateOperationsInput
  workPhone: NullableStringFieldUpdateOperationsInput
  mobilePhone: NullableStringFieldUpdateOperationsInput
  title: NullableStringFieldUpdateOperationsInput
  token: NullableStringFieldUpdateOperationsInput
  notificationSettings: JSON
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  dynamicFields: JSON
  active: BoolFieldUpdateOperationsInput
  oktaUserId: NullableIntFieldUpdateOperationsInput
  oktaManagerId: NullableIntFieldUpdateOperationsInput
  forgetPassword: NullableStringFieldUpdateOperationsInput
  csmStatus: BoolFieldUpdateOperationsInput
  crmStatus: BoolFieldUpdateOperationsInput
  customer: CustomerUpdateOneRequiredWithoutUsersInput
  leadSourceFor: CompanyUpdateManyWithoutLeadSourceInput
  primaryContactFor: CompanyUpdateManyWithoutPrimaryContactInput
  starred: CompanyStarredUpdateManyWithoutUserInput
  externalUser: ExternalUserUpdateManyWithoutUserInput
  groups: GroupUserUpdateManyWithoutUserInput
  roles: UserRoleUpdateManyWithoutUserInput
  userEvents: UserEventsUpdateManyWithoutUserInput
  UserCompanyRatings: UserCompanyRatingsUpdateManyWithoutUserInput
  noteUserTags: NoteUserTagsUpdateManyWithoutUserInput
  messageTemplate: MessageTemplateUpdateManyWithoutUserInput
  Feedback: FeedbackUpdateManyWithoutUserInput
  references: ReferenceUpdateManyWithoutUserInput
  userManager: UserManagerUpdateManyWithoutUserInput
  userReportee: UserManagerUpdateManyWithoutManagerInput
}

input GroupUserUpdateManyWithoutUserInput {
  create: [GroupUserCreateWithoutUserInput!]
  connectOrCreate: [GroupUserCreateOrConnectWithoutUserInput!]
  upsert: [GroupUserUpsertWithWhereUniqueWithoutUserInput!]
  createMany: GroupUserCreateManyUserInputEnvelope
  connect: [GroupUserWhereUniqueInput!]
  set: [GroupUserWhereUniqueInput!]
  disconnect: [GroupUserWhereUniqueInput!]
  delete: [GroupUserWhereUniqueInput!]
  update: [GroupUserUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [GroupUserUpdateManyWithWhereWithoutUserInput!]
  deleteMany: [GroupUserScalarWhereInput!]
}

input GroupUserUpsertWithWhereUniqueWithoutUserInput {
  where: GroupUserWhereUniqueInput!
  update: GroupUserUpdateWithoutUserInput!
  create: GroupUserCreateWithoutUserInput!
}

input GroupUserUpdateWithoutUserInput {
  dummy: NullableIntFieldUpdateOperationsInput
  group: GroupUpdateOneRequiredWithoutUsersInput
}

input GroupUpdateOneRequiredWithoutUsersInput {
  create: GroupCreateWithoutUsersInput
  connectOrCreate: GroupCreateOrConnectWithoutUsersInput
  upsert: GroupUpsertWithoutUsersInput
  connect: GroupWhereUniqueInput
  update: GroupUpdateWithoutUsersInput
}

input GroupUpsertWithoutUsersInput {
  update: GroupUpdateWithoutUsersInput!
  create: GroupCreateWithoutUsersInput!
}

input GroupUpdateWithoutUsersInput {
  name: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  customer: CustomerUpdateOneRequiredWithoutGroupsInput
  parent: GroupUpdateOneWithoutChildrenInput
  children: GroupUpdateManyWithoutParentInput
  noteGroupTags: NoteGroupTagsUpdateManyWithoutGroupInput
}

input CustomerUpdateOneRequiredWithoutGroupsInput {
  create: CustomerCreateWithoutGroupsInput
  connectOrCreate: CustomerCreateOrConnectWithoutGroupsInput
  upsert: CustomerUpsertWithoutGroupsInput
  connect: CustomerWhereUniqueInput
  update: CustomerUpdateWithoutGroupsInput
}

input CustomerUpsertWithoutGroupsInput {
  update: CustomerUpdateWithoutGroupsInput!
  create: CustomerCreateWithoutGroupsInput!
}

input CustomerUpdateWithoutGroupsInput {
  name: StringFieldUpdateOperationsInput
  type: EnumCustomerTypeFieldUpdateOperationsInput
  favoritedAt: NullableDateTimeFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  oktaClientId: NullableStringFieldUpdateOperationsInput
  oktaDomain: NullableStringFieldUpdateOperationsInput
  oktaClientSecret: NullableStringFieldUpdateOperationsInput
  oktaApiKey: NullableStringFieldUpdateOperationsInput
  launch: LaunchUpdateManyWithoutCustomerInput
  companies: CompanyUpdateManyWithoutCustomerInput
  integrations: CustomerIntegrationUpdateManyWithoutCustomerInput
  events: EventUpdateManyWithoutCustomerInput
  externalGroups: ExternalGroupUpdateManyWithoutCustomerInput
  externalUsers: ExternalUserUpdateManyWithoutCustomerInput
  notes: NoteUpdateManyWithoutCustomerInput
  roles: RoleUpdateManyWithoutCustomerInput
  salesLeads: SalesLeadUpdateManyWithoutCustomerInput
  syncEvents: SyncEventUpdateManyWithoutCustomerInput
  users: UserUpdateManyWithoutCustomerInput
  messageTemplate: MessageTemplateUpdateManyWithoutCustomerInput
  dynamicFields: DynamicUserFieldsUpdateManyWithoutCustomerInput
  lists: ListUpdateManyWithoutCustomerInput
  useCaseCollections: UseCaseCollectionsUpdateManyWithoutCustomerInput
  customerDataSources: DataSourcesOnCustomerUpdateManyWithoutCustomerInput
  dataObjectCollections: DataObjectCollectionsUpdateManyWithoutCustomerInput
}

input RoleUpdateManyWithoutCustomerInput {
  create: [RoleCreateWithoutCustomerInput!]
  connectOrCreate: [RoleCreateOrConnectWithoutCustomerInput!]
  upsert: [RoleUpsertWithWhereUniqueWithoutCustomerInput!]
  createMany: RoleCreateManyCustomerInputEnvelope
  connect: [RoleWhereUniqueInput!]
  set: [RoleWhereUniqueInput!]
  disconnect: [RoleWhereUniqueInput!]
  delete: [RoleWhereUniqueInput!]
  update: [RoleUpdateWithWhereUniqueWithoutCustomerInput!]
  updateMany: [RoleUpdateManyWithWhereWithoutCustomerInput!]
  deleteMany: [RoleScalarWhereInput!]
}

input RoleUpsertWithWhereUniqueWithoutCustomerInput {
  where: RoleWhereUniqueInput!
  update: RoleUpdateWithoutCustomerInput!
  create: RoleCreateWithoutCustomerInput!
}

input RoleUpdateWithoutCustomerInput {
  name: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  capabilities: RoleUpdatecapabilitiesInput
  userRoles: UserRoleUpdateManyWithoutRoleInput
}

input RoleUpdatecapabilitiesInput {
  set: [Int!]
  push: [Int!]
}

input UserRoleUpdateManyWithoutRoleInput {
  create: [UserRoleCreateWithoutRoleInput!]
  connectOrCreate: [UserRoleCreateOrConnectWithoutRoleInput!]
  upsert: [UserRoleUpsertWithWhereUniqueWithoutRoleInput!]
  createMany: UserRoleCreateManyRoleInputEnvelope
  connect: [UserRoleWhereUniqueInput!]
  set: [UserRoleWhereUniqueInput!]
  disconnect: [UserRoleWhereUniqueInput!]
  delete: [UserRoleWhereUniqueInput!]
  update: [UserRoleUpdateWithWhereUniqueWithoutRoleInput!]
  updateMany: [UserRoleUpdateManyWithWhereWithoutRoleInput!]
  deleteMany: [UserRoleScalarWhereInput!]
}

input UserRoleUpsertWithWhereUniqueWithoutRoleInput {
  where: UserRoleWhereUniqueInput!
  update: UserRoleUpdateWithoutRoleInput!
  create: UserRoleCreateWithoutRoleInput!
}

input UserRoleUpdateWithoutRoleInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutRolesInput
}

input UserUpdateOneRequiredWithoutRolesInput {
  create: UserCreateWithoutRolesInput
  connectOrCreate: UserCreateOrConnectWithoutRolesInput
  upsert: UserUpsertWithoutRolesInput
  connect: UserWhereUniqueInput
  update: UserUpdateWithoutRolesInput
}

input UserUpsertWithoutRolesInput {
  update: UserUpdateWithoutRolesInput!
  create: UserCreateWithoutRolesInput!
}

input UserUpdateWithoutRolesInput {
  admin: BoolFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  passwordHash: NullableStringFieldUpdateOperationsInput
  passwordSalt: NullableStringFieldUpdateOperationsInput
  workPhone: NullableStringFieldUpdateOperationsInput
  mobilePhone: NullableStringFieldUpdateOperationsInput
  title: NullableStringFieldUpdateOperationsInput
  token: NullableStringFieldUpdateOperationsInput
  notificationSettings: JSON
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  dynamicFields: JSON
  active: BoolFieldUpdateOperationsInput
  oktaUserId: NullableIntFieldUpdateOperationsInput
  oktaManagerId: NullableIntFieldUpdateOperationsInput
  forgetPassword: NullableStringFieldUpdateOperationsInput
  csmStatus: BoolFieldUpdateOperationsInput
  crmStatus: BoolFieldUpdateOperationsInput
  customer: CustomerUpdateOneRequiredWithoutUsersInput
  leadSourceFor: CompanyUpdateManyWithoutLeadSourceInput
  primaryContactFor: CompanyUpdateManyWithoutPrimaryContactInput
  starred: CompanyStarredUpdateManyWithoutUserInput
  externalUser: ExternalUserUpdateManyWithoutUserInput
  groups: GroupUserUpdateManyWithoutUserInput
  Note: NoteUpdateManyWithoutUserInput
  userEvents: UserEventsUpdateManyWithoutUserInput
  UserCompanyRatings: UserCompanyRatingsUpdateManyWithoutUserInput
  noteUserTags: NoteUserTagsUpdateManyWithoutUserInput
  messageTemplate: MessageTemplateUpdateManyWithoutUserInput
  Feedback: FeedbackUpdateManyWithoutUserInput
  references: ReferenceUpdateManyWithoutUserInput
  userManager: UserManagerUpdateManyWithoutUserInput
  userReportee: UserManagerUpdateManyWithoutManagerInput
}

input UserEventsUpdateManyWithoutUserInput {
  create: [UserEventsCreateWithoutUserInput!]
  connectOrCreate: [UserEventsCreateOrConnectWithoutUserInput!]
  upsert: [UserEventsUpsertWithWhereUniqueWithoutUserInput!]
  createMany: UserEventsCreateManyUserInputEnvelope
  connect: [UserEventsWhereUniqueInput!]
  set: [UserEventsWhereUniqueInput!]
  disconnect: [UserEventsWhereUniqueInput!]
  delete: [UserEventsWhereUniqueInput!]
  update: [UserEventsUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [UserEventsUpdateManyWithWhereWithoutUserInput!]
  deleteMany: [UserEventsScalarWhereInput!]
}

input UserEventsUpsertWithWhereUniqueWithoutUserInput {
  where: UserEventsWhereUniqueInput!
  update: UserEventsUpdateWithoutUserInput!
  create: UserEventsCreateWithoutUserInput!
}

input UserEventsUpdateWithoutUserInput {
  readAt: NullableDateTimeFieldUpdateOperationsInput
  flaggedAt: NullableIntFieldUpdateOperationsInput
  hideAt: NullableDateTimeFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  event: EventUpdateOneRequiredWithoutUserEventsInput
}

input EventUpdateOneRequiredWithoutUserEventsInput {
  create: EventCreateWithoutUserEventsInput
  connectOrCreate: EventCreateOrConnectWithoutUserEventsInput
  upsert: EventUpsertWithoutUserEventsInput
  connect: EventWhereUniqueInput
  update: EventUpdateWithoutUserEventsInput
}

input EventUpsertWithoutUserEventsInput {
  update: EventUpdateWithoutUserEventsInput!
  create: EventCreateWithoutUserEventsInput!
}

input EventUpdateWithoutUserEventsInput {
  data: JSON
  notifiedAt: NullableDateTimeFieldUpdateOperationsInput
  text: NullableStringFieldUpdateOperationsInput
  type: EnumEventTypeFieldUpdateOperationsInput
  needsAttention: NullableEnumEventAttentionFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  company: CompanyUpdateOneWithoutEventsInput
  customer: CustomerUpdateOneRequiredWithoutEventsInput
  Launch: LaunchUpdateManyWithoutEventsInput
  notes: NoteUpdateManyWithoutEventsInput
  parentEvent: EventUpdateOneWithoutChildEventsInput
  childEvents: EventUpdateManyWithoutParentEventInput
  message: NoteUpdateOneWithoutEventInput
}

input EventUpdateOneWithoutChildEventsInput {
  create: EventCreateWithoutChildEventsInput
  connectOrCreate: EventCreateOrConnectWithoutChildEventsInput
  upsert: EventUpsertWithoutChildEventsInput
  connect: EventWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: EventUpdateWithoutChildEventsInput
}

input EventUpsertWithoutChildEventsInput {
  update: EventUpdateWithoutChildEventsInput!
  create: EventCreateWithoutChildEventsInput!
}

input EventUpdateWithoutChildEventsInput {
  data: JSON
  notifiedAt: NullableDateTimeFieldUpdateOperationsInput
  text: NullableStringFieldUpdateOperationsInput
  type: EnumEventTypeFieldUpdateOperationsInput
  needsAttention: NullableEnumEventAttentionFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  company: CompanyUpdateOneWithoutEventsInput
  customer: CustomerUpdateOneRequiredWithoutEventsInput
  Launch: LaunchUpdateManyWithoutEventsInput
  notes: NoteUpdateManyWithoutEventsInput
  userEvents: UserEventsUpdateManyWithoutEventInput
  parentEvent: EventUpdateOneWithoutChildEventsInput
  message: NoteUpdateOneWithoutEventInput
}

input UserEventsUpdateManyWithoutEventInput {
  create: [UserEventsCreateWithoutEventInput!]
  connectOrCreate: [UserEventsCreateOrConnectWithoutEventInput!]
  upsert: [UserEventsUpsertWithWhereUniqueWithoutEventInput!]
  createMany: UserEventsCreateManyEventInputEnvelope
  connect: [UserEventsWhereUniqueInput!]
  set: [UserEventsWhereUniqueInput!]
  disconnect: [UserEventsWhereUniqueInput!]
  delete: [UserEventsWhereUniqueInput!]
  update: [UserEventsUpdateWithWhereUniqueWithoutEventInput!]
  updateMany: [UserEventsUpdateManyWithWhereWithoutEventInput!]
  deleteMany: [UserEventsScalarWhereInput!]
}

input UserEventsUpsertWithWhereUniqueWithoutEventInput {
  where: UserEventsWhereUniqueInput!
  update: UserEventsUpdateWithoutEventInput!
  create: UserEventsCreateWithoutEventInput!
}

input UserEventsUpdateWithoutEventInput {
  readAt: NullableDateTimeFieldUpdateOperationsInput
  flaggedAt: NullableIntFieldUpdateOperationsInput
  hideAt: NullableDateTimeFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutUserEventsInput
}

input UserUpdateOneRequiredWithoutUserEventsInput {
  create: UserCreateWithoutUserEventsInput
  connectOrCreate: UserCreateOrConnectWithoutUserEventsInput
  upsert: UserUpsertWithoutUserEventsInput
  connect: UserWhereUniqueInput
  update: UserUpdateWithoutUserEventsInput
}

input UserUpsertWithoutUserEventsInput {
  update: UserUpdateWithoutUserEventsInput!
  create: UserCreateWithoutUserEventsInput!
}

input UserUpdateWithoutUserEventsInput {
  admin: BoolFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  passwordHash: NullableStringFieldUpdateOperationsInput
  passwordSalt: NullableStringFieldUpdateOperationsInput
  workPhone: NullableStringFieldUpdateOperationsInput
  mobilePhone: NullableStringFieldUpdateOperationsInput
  title: NullableStringFieldUpdateOperationsInput
  token: NullableStringFieldUpdateOperationsInput
  notificationSettings: JSON
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  dynamicFields: JSON
  active: BoolFieldUpdateOperationsInput
  oktaUserId: NullableIntFieldUpdateOperationsInput
  oktaManagerId: NullableIntFieldUpdateOperationsInput
  forgetPassword: NullableStringFieldUpdateOperationsInput
  csmStatus: BoolFieldUpdateOperationsInput
  crmStatus: BoolFieldUpdateOperationsInput
  customer: CustomerUpdateOneRequiredWithoutUsersInput
  leadSourceFor: CompanyUpdateManyWithoutLeadSourceInput
  primaryContactFor: CompanyUpdateManyWithoutPrimaryContactInput
  starred: CompanyStarredUpdateManyWithoutUserInput
  externalUser: ExternalUserUpdateManyWithoutUserInput
  groups: GroupUserUpdateManyWithoutUserInput
  Note: NoteUpdateManyWithoutUserInput
  roles: UserRoleUpdateManyWithoutUserInput
  UserCompanyRatings: UserCompanyRatingsUpdateManyWithoutUserInput
  noteUserTags: NoteUserTagsUpdateManyWithoutUserInput
  messageTemplate: MessageTemplateUpdateManyWithoutUserInput
  Feedback: FeedbackUpdateManyWithoutUserInput
  references: ReferenceUpdateManyWithoutUserInput
  userManager: UserManagerUpdateManyWithoutUserInput
  userReportee: UserManagerUpdateManyWithoutManagerInput
}

input UserRoleUpdateManyWithoutUserInput {
  create: [UserRoleCreateWithoutUserInput!]
  connectOrCreate: [UserRoleCreateOrConnectWithoutUserInput!]
  upsert: [UserRoleUpsertWithWhereUniqueWithoutUserInput!]
  createMany: UserRoleCreateManyUserInputEnvelope
  connect: [UserRoleWhereUniqueInput!]
  set: [UserRoleWhereUniqueInput!]
  disconnect: [UserRoleWhereUniqueInput!]
  delete: [UserRoleWhereUniqueInput!]
  update: [UserRoleUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [UserRoleUpdateManyWithWhereWithoutUserInput!]
  deleteMany: [UserRoleScalarWhereInput!]
}

input UserRoleUpsertWithWhereUniqueWithoutUserInput {
  where: UserRoleWhereUniqueInput!
  update: UserRoleUpdateWithoutUserInput!
  create: UserRoleCreateWithoutUserInput!
}

input UserRoleUpdateWithoutUserInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  role: RoleUpdateOneRequiredWithoutUserRolesInput
}

input RoleUpdateOneRequiredWithoutUserRolesInput {
  create: RoleCreateWithoutUserRolesInput
  connectOrCreate: RoleCreateOrConnectWithoutUserRolesInput
  upsert: RoleUpsertWithoutUserRolesInput
  connect: RoleWhereUniqueInput
  update: RoleUpdateWithoutUserRolesInput
}

input RoleUpsertWithoutUserRolesInput {
  update: RoleUpdateWithoutUserRolesInput!
  create: RoleCreateWithoutUserRolesInput!
}

input RoleUpdateWithoutUserRolesInput {
  name: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  capabilities: RoleUpdatecapabilitiesInput
  customer: CustomerUpdateOneRequiredWithoutRolesInput
}

input CustomerUpdateOneRequiredWithoutRolesInput {
  create: CustomerCreateWithoutRolesInput
  connectOrCreate: CustomerCreateOrConnectWithoutRolesInput
  upsert: CustomerUpsertWithoutRolesInput
  connect: CustomerWhereUniqueInput
  update: CustomerUpdateWithoutRolesInput
}

input CustomerUpsertWithoutRolesInput {
  update: CustomerUpdateWithoutRolesInput!
  create: CustomerCreateWithoutRolesInput!
}

input CustomerUpdateWithoutRolesInput {
  name: StringFieldUpdateOperationsInput
  type: EnumCustomerTypeFieldUpdateOperationsInput
  favoritedAt: NullableDateTimeFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  oktaClientId: NullableStringFieldUpdateOperationsInput
  oktaDomain: NullableStringFieldUpdateOperationsInput
  oktaClientSecret: NullableStringFieldUpdateOperationsInput
  oktaApiKey: NullableStringFieldUpdateOperationsInput
  launch: LaunchUpdateManyWithoutCustomerInput
  companies: CompanyUpdateManyWithoutCustomerInput
  integrations: CustomerIntegrationUpdateManyWithoutCustomerInput
  events: EventUpdateManyWithoutCustomerInput
  externalGroups: ExternalGroupUpdateManyWithoutCustomerInput
  externalUsers: ExternalUserUpdateManyWithoutCustomerInput
  groups: GroupUpdateManyWithoutCustomerInput
  notes: NoteUpdateManyWithoutCustomerInput
  salesLeads: SalesLeadUpdateManyWithoutCustomerInput
  syncEvents: SyncEventUpdateManyWithoutCustomerInput
  users: UserUpdateManyWithoutCustomerInput
  messageTemplate: MessageTemplateUpdateManyWithoutCustomerInput
  dynamicFields: DynamicUserFieldsUpdateManyWithoutCustomerInput
  lists: ListUpdateManyWithoutCustomerInput
  useCaseCollections: UseCaseCollectionsUpdateManyWithoutCustomerInput
  customerDataSources: DataSourcesOnCustomerUpdateManyWithoutCustomerInput
  dataObjectCollections: DataObjectCollectionsUpdateManyWithoutCustomerInput
}

input SalesLeadUpdateManyWithoutCustomerInput {
  create: [SalesLeadCreateWithoutCustomerInput!]
  connectOrCreate: [SalesLeadCreateOrConnectWithoutCustomerInput!]
  upsert: [SalesLeadUpsertWithWhereUniqueWithoutCustomerInput!]
  createMany: SalesLeadCreateManyCustomerInputEnvelope
  connect: [SalesLeadWhereUniqueInput!]
  set: [SalesLeadWhereUniqueInput!]
  disconnect: [SalesLeadWhereUniqueInput!]
  delete: [SalesLeadWhereUniqueInput!]
  update: [SalesLeadUpdateWithWhereUniqueWithoutCustomerInput!]
  updateMany: [SalesLeadUpdateManyWithWhereWithoutCustomerInput!]
  deleteMany: [SalesLeadScalarWhereInput!]
}

input SalesLeadUpsertWithWhereUniqueWithoutCustomerInput {
  where: SalesLeadWhereUniqueInput!
  update: SalesLeadUpdateWithoutCustomerInput!
  create: SalesLeadCreateWithoutCustomerInput!
}

input SalesLeadUpdateWithoutCustomerInput {
  company: StringFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  email: NullableStringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  processedAt: NullableDateTimeFieldUpdateOperationsInput
  source: StringFieldUpdateOperationsInput
  status: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input SalesLeadUpdateWithWhereUniqueWithoutCustomerInput {
  where: SalesLeadWhereUniqueInput!
  data: SalesLeadUpdateWithoutCustomerInput!
}

input SalesLeadUpdateManyWithWhereWithoutCustomerInput {
  where: SalesLeadScalarWhereInput!
  data: SalesLeadUpdateManyMutationInput!
}

input SalesLeadScalarWhereInput {
  AND: [SalesLeadScalarWhereInput!]
  OR: [SalesLeadScalarWhereInput!]
  NOT: [SalesLeadScalarWhereInput!]
  id: IntFilter
  company: StringFilter
  customerId: IntFilter
  description: StringNullableFilter
  email: StringNullableFilter
  name: StringFilter
  processedAt: DateTimeNullableFilter
  source: StringFilter
  status: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
}

input SalesLeadUpdateManyMutationInput {
  company: StringFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  email: NullableStringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  processedAt: NullableDateTimeFieldUpdateOperationsInput
  source: StringFieldUpdateOperationsInput
  status: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input SyncEventUpdateManyWithoutCustomerInput {
  create: [SyncEventCreateWithoutCustomerInput!]
  connectOrCreate: [SyncEventCreateOrConnectWithoutCustomerInput!]
  upsert: [SyncEventUpsertWithWhereUniqueWithoutCustomerInput!]
  createMany: SyncEventCreateManyCustomerInputEnvelope
  connect: [SyncEventWhereUniqueInput!]
  set: [SyncEventWhereUniqueInput!]
  disconnect: [SyncEventWhereUniqueInput!]
  delete: [SyncEventWhereUniqueInput!]
  update: [SyncEventUpdateWithWhereUniqueWithoutCustomerInput!]
  updateMany: [SyncEventUpdateManyWithWhereWithoutCustomerInput!]
  deleteMany: [SyncEventScalarWhereInput!]
}

input SyncEventUpsertWithWhereUniqueWithoutCustomerInput {
  where: SyncEventWhereUniqueInput!
  update: SyncEventUpdateWithoutCustomerInput!
  create: SyncEventCreateWithoutCustomerInput!
}

input SyncEventUpdateWithoutCustomerInput {
  completedAt: NullableDateTimeFieldUpdateOperationsInput
  entityType: EnumSyncEventEntityTypeFieldUpdateOperationsInput
  recordsCreated: IntFieldUpdateOperationsInput
  recordsDeleted: IntFieldUpdateOperationsInput
  recordsUpdated: IntFieldUpdateOperationsInput
  replayId: NullableStringFieldUpdateOperationsInput
  startedAt: DateTimeFieldUpdateOperationsInput
  type: EnumSyncEventTypeFieldUpdateOperationsInput
}

input EnumSyncEventEntityTypeFieldUpdateOperationsInput {
  set: SyncEventEntityType
}

input EnumSyncEventTypeFieldUpdateOperationsInput {
  set: SyncEventType
}

input SyncEventUpdateWithWhereUniqueWithoutCustomerInput {
  where: SyncEventWhereUniqueInput!
  data: SyncEventUpdateWithoutCustomerInput!
}

input SyncEventUpdateManyWithWhereWithoutCustomerInput {
  where: SyncEventScalarWhereInput!
  data: SyncEventUpdateManyMutationInput!
}

input SyncEventScalarWhereInput {
  AND: [SyncEventScalarWhereInput!]
  OR: [SyncEventScalarWhereInput!]
  NOT: [SyncEventScalarWhereInput!]
  id: IntFilter
  completedAt: DateTimeNullableFilter
  customerId: IntFilter
  entityType: EnumSyncEventEntityTypeFilter
  recordsCreated: IntFilter
  recordsDeleted: IntFilter
  recordsUpdated: IntFilter
  replayId: StringNullableFilter
  startedAt: DateTimeFilter
  type: EnumSyncEventTypeFilter
}

input SyncEventUpdateManyMutationInput {
  completedAt: NullableDateTimeFieldUpdateOperationsInput
  entityType: EnumSyncEventEntityTypeFieldUpdateOperationsInput
  recordsCreated: IntFieldUpdateOperationsInput
  recordsDeleted: IntFieldUpdateOperationsInput
  recordsUpdated: IntFieldUpdateOperationsInput
  replayId: NullableStringFieldUpdateOperationsInput
  startedAt: DateTimeFieldUpdateOperationsInput
  type: EnumSyncEventTypeFieldUpdateOperationsInput
}

input UserUpdateManyWithoutCustomerInput {
  create: [UserCreateWithoutCustomerInput!]
  connectOrCreate: [UserCreateOrConnectWithoutCustomerInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutCustomerInput!]
  createMany: UserCreateManyCustomerInputEnvelope
  connect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  delete: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutCustomerInput!]
  updateMany: [UserUpdateManyWithWhereWithoutCustomerInput!]
  deleteMany: [UserScalarWhereInput!]
}

input UserUpsertWithWhereUniqueWithoutCustomerInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutCustomerInput!
  create: UserCreateWithoutCustomerInput!
}

input UserUpdateWithoutCustomerInput {
  admin: BoolFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  passwordHash: NullableStringFieldUpdateOperationsInput
  passwordSalt: NullableStringFieldUpdateOperationsInput
  workPhone: NullableStringFieldUpdateOperationsInput
  mobilePhone: NullableStringFieldUpdateOperationsInput
  title: NullableStringFieldUpdateOperationsInput
  token: NullableStringFieldUpdateOperationsInput
  notificationSettings: JSON
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  dynamicFields: JSON
  active: BoolFieldUpdateOperationsInput
  oktaUserId: NullableIntFieldUpdateOperationsInput
  oktaManagerId: NullableIntFieldUpdateOperationsInput
  forgetPassword: NullableStringFieldUpdateOperationsInput
  csmStatus: BoolFieldUpdateOperationsInput
  crmStatus: BoolFieldUpdateOperationsInput
  leadSourceFor: CompanyUpdateManyWithoutLeadSourceInput
  primaryContactFor: CompanyUpdateManyWithoutPrimaryContactInput
  starred: CompanyStarredUpdateManyWithoutUserInput
  externalUser: ExternalUserUpdateManyWithoutUserInput
  groups: GroupUserUpdateManyWithoutUserInput
  Note: NoteUpdateManyWithoutUserInput
  roles: UserRoleUpdateManyWithoutUserInput
  userEvents: UserEventsUpdateManyWithoutUserInput
  UserCompanyRatings: UserCompanyRatingsUpdateManyWithoutUserInput
  noteUserTags: NoteUserTagsUpdateManyWithoutUserInput
  messageTemplate: MessageTemplateUpdateManyWithoutUserInput
  Feedback: FeedbackUpdateManyWithoutUserInput
  references: ReferenceUpdateManyWithoutUserInput
  userManager: UserManagerUpdateManyWithoutUserInput
  userReportee: UserManagerUpdateManyWithoutManagerInput
}

input UserCompanyRatingsUpdateManyWithoutUserInput {
  create: [UserCompanyRatingsCreateWithoutUserInput!]
  connectOrCreate: [UserCompanyRatingsCreateOrConnectWithoutUserInput!]
  upsert: [UserCompanyRatingsUpsertWithWhereUniqueWithoutUserInput!]
  createMany: UserCompanyRatingsCreateManyUserInputEnvelope
  connect: [UserCompanyRatingsWhereUniqueInput!]
  set: [UserCompanyRatingsWhereUniqueInput!]
  disconnect: [UserCompanyRatingsWhereUniqueInput!]
  delete: [UserCompanyRatingsWhereUniqueInput!]
  update: [UserCompanyRatingsUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [UserCompanyRatingsUpdateManyWithWhereWithoutUserInput!]
  deleteMany: [UserCompanyRatingsScalarWhereInput!]
}

input UserCompanyRatingsUpsertWithWhereUniqueWithoutUserInput {
  where: UserCompanyRatingsWhereUniqueInput!
  update: UserCompanyRatingsUpdateWithoutUserInput!
  create: UserCompanyRatingsCreateWithoutUserInput!
}

input UserCompanyRatingsUpdateWithoutUserInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  rating: RatingUpdateOneRequiredWithoutUserratingcompanyInput
  company: CompanyUpdateOneRequiredWithoutUserCompanyRatingsInput
}

input RatingUpdateOneRequiredWithoutUserratingcompanyInput {
  create: RatingCreateWithoutUserratingcompanyInput
  connectOrCreate: RatingCreateOrConnectWithoutUserratingcompanyInput
  upsert: RatingUpsertWithoutUserratingcompanyInput
  connect: RatingWhereUniqueInput
  update: RatingUpdateWithoutUserratingcompanyInput
}

input RatingUpsertWithoutUserratingcompanyInput {
  update: RatingUpdateWithoutUserratingcompanyInput!
  create: RatingCreateWithoutUserratingcompanyInput!
}

input RatingUpdateWithoutUserratingcompanyInput {
  status: EnumRatingStatusFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input EnumRatingStatusFieldUpdateOperationsInput {
  set: RatingStatus
}

input CompanyUpdateOneRequiredWithoutUserCompanyRatingsInput {
  create: CompanyCreateWithoutUserCompanyRatingsInput
  connectOrCreate: CompanyCreateOrConnectWithoutUserCompanyRatingsInput
  upsert: CompanyUpsertWithoutUserCompanyRatingsInput
  connect: CompanyWhereUniqueInput
  update: CompanyUpdateWithoutUserCompanyRatingsInput
}

input CompanyUpsertWithoutUserCompanyRatingsInput {
  update: CompanyUpdateWithoutUserCompanyRatingsInput!
  create: CompanyCreateWithoutUserCompanyRatingsInput!
}

input CompanyUpdateWithoutUserCompanyRatingsInput {
  annualRecurringRevenue: NullableIntFieldUpdateOperationsInput
  expectedToCloseAt: NullableDateTimeFieldUpdateOperationsInput
  fiscalYearStartMonth: NullableIntFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  companyType: EnumCompanyTypeFieldUpdateOperationsInput
  seatSize: NullableIntFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  fiscalYear: IntFieldUpdateOperationsInput
  renewalDate: NullableDateTimeFieldUpdateOperationsInput
  referredOn: NullableDateTimeFieldUpdateOperationsInput
  latestReferenceId: NullableIntFieldUpdateOperationsInput
  customer: CustomerUpdateOneRequiredWithoutCompaniesInput
  leadSource: UserUpdateOneWithoutLeadSourceForInput
  companyParent: CompanyUpdateOneWithoutSubsidiaryInput
  primaryContact: UserUpdateOneWithoutPrimaryContactForInput
  references: ReferenceUpdateManyWithoutCompanyInput
  referencesServedFor: ReferenceUpdateManyWithoutServedAsReferenceForInput
  subsidiary: CompanyUpdateManyWithoutCompanyParentInput
  starredBy: CompanyStarredUpdateManyWithoutCompanyInput
  events: EventUpdateManyWithoutCompanyInput
  notes: NoteUpdateManyWithoutCompanyInput
  account: AccountUpdateOneRequiredWithoutCompanyInput
  competitors: CompetitorUpdateManyWithoutCompanyInput
  products: ProductUpdateManyWithoutCompanyInput
  contacts: ContactsUpdateManyWithoutCompanyInput
  listCompanies: ListCompanyUpdateManyWithoutCompanyInput
  Launch: LaunchUpdateManyWithoutCompanyInput
}

input ListCompanyUpdateManyWithoutCompanyInput {
  create: [ListCompanyCreateWithoutCompanyInput!]
  connectOrCreate: [ListCompanyCreateOrConnectWithoutCompanyInput!]
  upsert: [ListCompanyUpsertWithWhereUniqueWithoutCompanyInput!]
  createMany: ListCompanyCreateManyCompanyInputEnvelope
  connect: [ListCompanyWhereUniqueInput!]
  set: [ListCompanyWhereUniqueInput!]
  disconnect: [ListCompanyWhereUniqueInput!]
  delete: [ListCompanyWhereUniqueInput!]
  update: [ListCompanyUpdateWithWhereUniqueWithoutCompanyInput!]
  updateMany: [ListCompanyUpdateManyWithWhereWithoutCompanyInput!]
  deleteMany: [ListCompanyScalarWhereInput!]
}

input ListCompanyUpsertWithWhereUniqueWithoutCompanyInput {
  where: ListCompanyWhereUniqueInput!
  update: ListCompanyUpdateWithoutCompanyInput!
  create: ListCompanyCreateWithoutCompanyInput!
}

input ListCompanyUpdateWithoutCompanyInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  list: ListUpdateOneRequiredWithoutListCompaniesInput
}

input ListUpdateOneRequiredWithoutListCompaniesInput {
  create: ListCreateWithoutListCompaniesInput
  connectOrCreate: ListCreateOrConnectWithoutListCompaniesInput
  upsert: ListUpsertWithoutListCompaniesInput
  connect: ListWhereUniqueInput
  update: ListUpdateWithoutListCompaniesInput
}

input ListUpsertWithoutListCompaniesInput {
  update: ListUpdateWithoutListCompaniesInput!
  create: ListCreateWithoutListCompaniesInput!
}

input ListUpdateWithoutListCompaniesInput {
  name: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  customer: CustomerUpdateOneRequiredWithoutListsInput
  parent: ListUpdateOneWithoutChildrenInput
  children: ListUpdateManyWithoutParentInput
}

input CustomerUpdateOneRequiredWithoutListsInput {
  create: CustomerCreateWithoutListsInput
  connectOrCreate: CustomerCreateOrConnectWithoutListsInput
  upsert: CustomerUpsertWithoutListsInput
  connect: CustomerWhereUniqueInput
  update: CustomerUpdateWithoutListsInput
}

input CustomerUpsertWithoutListsInput {
  update: CustomerUpdateWithoutListsInput!
  create: CustomerCreateWithoutListsInput!
}

input CustomerUpdateWithoutListsInput {
  name: StringFieldUpdateOperationsInput
  type: EnumCustomerTypeFieldUpdateOperationsInput
  favoritedAt: NullableDateTimeFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  oktaClientId: NullableStringFieldUpdateOperationsInput
  oktaDomain: NullableStringFieldUpdateOperationsInput
  oktaClientSecret: NullableStringFieldUpdateOperationsInput
  oktaApiKey: NullableStringFieldUpdateOperationsInput
  launch: LaunchUpdateManyWithoutCustomerInput
  companies: CompanyUpdateManyWithoutCustomerInput
  integrations: CustomerIntegrationUpdateManyWithoutCustomerInput
  events: EventUpdateManyWithoutCustomerInput
  externalGroups: ExternalGroupUpdateManyWithoutCustomerInput
  externalUsers: ExternalUserUpdateManyWithoutCustomerInput
  groups: GroupUpdateManyWithoutCustomerInput
  notes: NoteUpdateManyWithoutCustomerInput
  roles: RoleUpdateManyWithoutCustomerInput
  salesLeads: SalesLeadUpdateManyWithoutCustomerInput
  syncEvents: SyncEventUpdateManyWithoutCustomerInput
  users: UserUpdateManyWithoutCustomerInput
  messageTemplate: MessageTemplateUpdateManyWithoutCustomerInput
  dynamicFields: DynamicUserFieldsUpdateManyWithoutCustomerInput
  useCaseCollections: UseCaseCollectionsUpdateManyWithoutCustomerInput
  customerDataSources: DataSourcesOnCustomerUpdateManyWithoutCustomerInput
  dataObjectCollections: DataObjectCollectionsUpdateManyWithoutCustomerInput
}

input MessageTemplateUpdateManyWithoutCustomerInput {
  create: [MessageTemplateCreateWithoutCustomerInput!]
  connectOrCreate: [MessageTemplateCreateOrConnectWithoutCustomerInput!]
  upsert: [MessageTemplateUpsertWithWhereUniqueWithoutCustomerInput!]
  createMany: MessageTemplateCreateManyCustomerInputEnvelope
  connect: [MessageTemplateWhereUniqueInput!]
  set: [MessageTemplateWhereUniqueInput!]
  disconnect: [MessageTemplateWhereUniqueInput!]
  delete: [MessageTemplateWhereUniqueInput!]
  update: [MessageTemplateUpdateWithWhereUniqueWithoutCustomerInput!]
  updateMany: [MessageTemplateUpdateManyWithWhereWithoutCustomerInput!]
  deleteMany: [MessageTemplateScalarWhereInput!]
}

input MessageTemplateUpsertWithWhereUniqueWithoutCustomerInput {
  where: MessageTemplateWhereUniqueInput!
  update: MessageTemplateUpdateWithoutCustomerInput!
  create: MessageTemplateCreateWithoutCustomerInput!
}

input MessageTemplateUpdateWithoutCustomerInput {
  eventType: EnumEventTypeFieldUpdateOperationsInput
  companyType: EnumCompanyTypeFieldUpdateOperationsInput
  messageType: EnumMessageTypeFieldUpdateOperationsInput
  sendToAddress: NullableStringFieldUpdateOperationsInput
  title: NullableStringFieldUpdateOperationsInput
  subject: StringFieldUpdateOperationsInput
  text: StringFieldUpdateOperationsInput
  delta: JSON
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutMessageTemplateInput
  launch: LaunchUpdateManyWithoutMessageTempateInput
}

input UserUpdateOneRequiredWithoutMessageTemplateInput {
  create: UserCreateWithoutMessageTemplateInput
  connectOrCreate: UserCreateOrConnectWithoutMessageTemplateInput
  upsert: UserUpsertWithoutMessageTemplateInput
  connect: UserWhereUniqueInput
  update: UserUpdateWithoutMessageTemplateInput
}

input UserUpsertWithoutMessageTemplateInput {
  update: UserUpdateWithoutMessageTemplateInput!
  create: UserCreateWithoutMessageTemplateInput!
}

input UserUpdateWithoutMessageTemplateInput {
  admin: BoolFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  passwordHash: NullableStringFieldUpdateOperationsInput
  passwordSalt: NullableStringFieldUpdateOperationsInput
  workPhone: NullableStringFieldUpdateOperationsInput
  mobilePhone: NullableStringFieldUpdateOperationsInput
  title: NullableStringFieldUpdateOperationsInput
  token: NullableStringFieldUpdateOperationsInput
  notificationSettings: JSON
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  dynamicFields: JSON
  active: BoolFieldUpdateOperationsInput
  oktaUserId: NullableIntFieldUpdateOperationsInput
  oktaManagerId: NullableIntFieldUpdateOperationsInput
  forgetPassword: NullableStringFieldUpdateOperationsInput
  csmStatus: BoolFieldUpdateOperationsInput
  crmStatus: BoolFieldUpdateOperationsInput
  customer: CustomerUpdateOneRequiredWithoutUsersInput
  leadSourceFor: CompanyUpdateManyWithoutLeadSourceInput
  primaryContactFor: CompanyUpdateManyWithoutPrimaryContactInput
  starred: CompanyStarredUpdateManyWithoutUserInput
  externalUser: ExternalUserUpdateManyWithoutUserInput
  groups: GroupUserUpdateManyWithoutUserInput
  Note: NoteUpdateManyWithoutUserInput
  roles: UserRoleUpdateManyWithoutUserInput
  userEvents: UserEventsUpdateManyWithoutUserInput
  UserCompanyRatings: UserCompanyRatingsUpdateManyWithoutUserInput
  noteUserTags: NoteUserTagsUpdateManyWithoutUserInput
  Feedback: FeedbackUpdateManyWithoutUserInput
  references: ReferenceUpdateManyWithoutUserInput
  userManager: UserManagerUpdateManyWithoutUserInput
  userReportee: UserManagerUpdateManyWithoutManagerInput
}

input NoteUserTagsUpdateManyWithoutUserInput {
  create: [NoteUserTagsCreateWithoutUserInput!]
  connectOrCreate: [NoteUserTagsCreateOrConnectWithoutUserInput!]
  upsert: [NoteUserTagsUpsertWithWhereUniqueWithoutUserInput!]
  createMany: NoteUserTagsCreateManyUserInputEnvelope
  connect: [NoteUserTagsWhereUniqueInput!]
  set: [NoteUserTagsWhereUniqueInput!]
  disconnect: [NoteUserTagsWhereUniqueInput!]
  delete: [NoteUserTagsWhereUniqueInput!]
  update: [NoteUserTagsUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [NoteUserTagsUpdateManyWithWhereWithoutUserInput!]
  deleteMany: [NoteUserTagsScalarWhereInput!]
}

input NoteUserTagsUpsertWithWhereUniqueWithoutUserInput {
  where: NoteUserTagsWhereUniqueInput!
  update: NoteUserTagsUpdateWithoutUserInput!
  create: NoteUserTagsCreateWithoutUserInput!
}

input NoteUserTagsUpdateWithoutUserInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  note: NoteUpdateOneRequiredWithoutNoteUserTagsInput
}

input NoteUpdateOneRequiredWithoutNoteUserTagsInput {
  create: NoteCreateWithoutNoteUserTagsInput
  connectOrCreate: NoteCreateOrConnectWithoutNoteUserTagsInput
  upsert: NoteUpsertWithoutNoteUserTagsInput
  connect: NoteWhereUniqueInput
  update: NoteUpdateWithoutNoteUserTagsInput
}

input NoteUpsertWithoutNoteUserTagsInput {
  update: NoteUpdateWithoutNoteUserTagsInput!
  create: NoteCreateWithoutNoteUserTagsInput!
}

input NoteUpdateWithoutNoteUserTagsInput {
  readAt: NullableDateTimeFieldUpdateOperationsInput
  flaggedAt: NullableDateTimeFieldUpdateOperationsInput
  subject: StringFieldUpdateOperationsInput
  text: StringFieldUpdateOperationsInput
  allCanView: BoolFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  delta: JSON
  company: CompanyUpdateOneWithoutNotesInput
  customer: CustomerUpdateOneWithoutNotesInput
  events: EventUpdateOneWithoutNotesInput
  user: UserUpdateOneWithoutNoteInput
  noteGroupTags: NoteGroupTagsUpdateManyWithoutNoteInput
  Event: EventUpdateManyWithoutMessageInput
}

input NoteGroupTagsUpdateManyWithoutNoteInput {
  create: [NoteGroupTagsCreateWithoutNoteInput!]
  connectOrCreate: [NoteGroupTagsCreateOrConnectWithoutNoteInput!]
  upsert: [NoteGroupTagsUpsertWithWhereUniqueWithoutNoteInput!]
  createMany: NoteGroupTagsCreateManyNoteInputEnvelope
  connect: [NoteGroupTagsWhereUniqueInput!]
  set: [NoteGroupTagsWhereUniqueInput!]
  disconnect: [NoteGroupTagsWhereUniqueInput!]
  delete: [NoteGroupTagsWhereUniqueInput!]
  update: [NoteGroupTagsUpdateWithWhereUniqueWithoutNoteInput!]
  updateMany: [NoteGroupTagsUpdateManyWithWhereWithoutNoteInput!]
  deleteMany: [NoteGroupTagsScalarWhereInput!]
}

input NoteGroupTagsUpsertWithWhereUniqueWithoutNoteInput {
  where: NoteGroupTagsWhereUniqueInput!
  update: NoteGroupTagsUpdateWithoutNoteInput!
  create: NoteGroupTagsCreateWithoutNoteInput!
}

input NoteGroupTagsUpdateWithoutNoteInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  group: GroupUpdateOneRequiredWithoutNoteGroupTagsInput
}

input GroupUpdateOneRequiredWithoutNoteGroupTagsInput {
  create: GroupCreateWithoutNoteGroupTagsInput
  connectOrCreate: GroupCreateOrConnectWithoutNoteGroupTagsInput
  upsert: GroupUpsertWithoutNoteGroupTagsInput
  connect: GroupWhereUniqueInput
  update: GroupUpdateWithoutNoteGroupTagsInput
}

input GroupUpsertWithoutNoteGroupTagsInput {
  update: GroupUpdateWithoutNoteGroupTagsInput!
  create: GroupCreateWithoutNoteGroupTagsInput!
}

input GroupUpdateWithoutNoteGroupTagsInput {
  name: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  customer: CustomerUpdateOneRequiredWithoutGroupsInput
  users: GroupUserUpdateManyWithoutGroupInput
  parent: GroupUpdateOneWithoutChildrenInput
  children: GroupUpdateManyWithoutParentInput
}

input GroupUpdateOneWithoutChildrenInput {
  create: GroupCreateWithoutChildrenInput
  connectOrCreate: GroupCreateOrConnectWithoutChildrenInput
  upsert: GroupUpsertWithoutChildrenInput
  connect: GroupWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: GroupUpdateWithoutChildrenInput
}

input GroupUpsertWithoutChildrenInput {
  update: GroupUpdateWithoutChildrenInput!
  create: GroupCreateWithoutChildrenInput!
}

input GroupUpdateWithoutChildrenInput {
  name: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  customer: CustomerUpdateOneRequiredWithoutGroupsInput
  users: GroupUserUpdateManyWithoutGroupInput
  parent: GroupUpdateOneWithoutChildrenInput
  noteGroupTags: NoteGroupTagsUpdateManyWithoutGroupInput
}

input NoteGroupTagsUpdateManyWithoutGroupInput {
  create: [NoteGroupTagsCreateWithoutGroupInput!]
  connectOrCreate: [NoteGroupTagsCreateOrConnectWithoutGroupInput!]
  upsert: [NoteGroupTagsUpsertWithWhereUniqueWithoutGroupInput!]
  createMany: NoteGroupTagsCreateManyGroupInputEnvelope
  connect: [NoteGroupTagsWhereUniqueInput!]
  set: [NoteGroupTagsWhereUniqueInput!]
  disconnect: [NoteGroupTagsWhereUniqueInput!]
  delete: [NoteGroupTagsWhereUniqueInput!]
  update: [NoteGroupTagsUpdateWithWhereUniqueWithoutGroupInput!]
  updateMany: [NoteGroupTagsUpdateManyWithWhereWithoutGroupInput!]
  deleteMany: [NoteGroupTagsScalarWhereInput!]
}

input NoteGroupTagsUpsertWithWhereUniqueWithoutGroupInput {
  where: NoteGroupTagsWhereUniqueInput!
  update: NoteGroupTagsUpdateWithoutGroupInput!
  create: NoteGroupTagsCreateWithoutGroupInput!
}

input NoteGroupTagsUpdateWithoutGroupInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  note: NoteUpdateOneRequiredWithoutNoteGroupTagsInput
}

input NoteUpdateOneRequiredWithoutNoteGroupTagsInput {
  create: NoteCreateWithoutNoteGroupTagsInput
  connectOrCreate: NoteCreateOrConnectWithoutNoteGroupTagsInput
  upsert: NoteUpsertWithoutNoteGroupTagsInput
  connect: NoteWhereUniqueInput
  update: NoteUpdateWithoutNoteGroupTagsInput
}

input NoteUpsertWithoutNoteGroupTagsInput {
  update: NoteUpdateWithoutNoteGroupTagsInput!
  create: NoteCreateWithoutNoteGroupTagsInput!
}

input NoteUpdateWithoutNoteGroupTagsInput {
  readAt: NullableDateTimeFieldUpdateOperationsInput
  flaggedAt: NullableDateTimeFieldUpdateOperationsInput
  subject: StringFieldUpdateOperationsInput
  text: StringFieldUpdateOperationsInput
  allCanView: BoolFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  delta: JSON
  company: CompanyUpdateOneWithoutNotesInput
  customer: CustomerUpdateOneWithoutNotesInput
  events: EventUpdateOneWithoutNotesInput
  user: UserUpdateOneWithoutNoteInput
  noteUserTags: NoteUserTagsUpdateManyWithoutNoteInput
  Event: EventUpdateManyWithoutMessageInput
}

input NoteUserTagsUpdateManyWithoutNoteInput {
  create: [NoteUserTagsCreateWithoutNoteInput!]
  connectOrCreate: [NoteUserTagsCreateOrConnectWithoutNoteInput!]
  upsert: [NoteUserTagsUpsertWithWhereUniqueWithoutNoteInput!]
  createMany: NoteUserTagsCreateManyNoteInputEnvelope
  connect: [NoteUserTagsWhereUniqueInput!]
  set: [NoteUserTagsWhereUniqueInput!]
  disconnect: [NoteUserTagsWhereUniqueInput!]
  delete: [NoteUserTagsWhereUniqueInput!]
  update: [NoteUserTagsUpdateWithWhereUniqueWithoutNoteInput!]
  updateMany: [NoteUserTagsUpdateManyWithWhereWithoutNoteInput!]
  deleteMany: [NoteUserTagsScalarWhereInput!]
}

input NoteUserTagsUpsertWithWhereUniqueWithoutNoteInput {
  where: NoteUserTagsWhereUniqueInput!
  update: NoteUserTagsUpdateWithoutNoteInput!
  create: NoteUserTagsCreateWithoutNoteInput!
}

input NoteUserTagsUpdateWithoutNoteInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutNoteUserTagsInput
}

input UserUpdateOneRequiredWithoutNoteUserTagsInput {
  create: UserCreateWithoutNoteUserTagsInput
  connectOrCreate: UserCreateOrConnectWithoutNoteUserTagsInput
  upsert: UserUpsertWithoutNoteUserTagsInput
  connect: UserWhereUniqueInput
  update: UserUpdateWithoutNoteUserTagsInput
}

input UserUpsertWithoutNoteUserTagsInput {
  update: UserUpdateWithoutNoteUserTagsInput!
  create: UserCreateWithoutNoteUserTagsInput!
}

input UserUpdateWithoutNoteUserTagsInput {
  admin: BoolFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  passwordHash: NullableStringFieldUpdateOperationsInput
  passwordSalt: NullableStringFieldUpdateOperationsInput
  workPhone: NullableStringFieldUpdateOperationsInput
  mobilePhone: NullableStringFieldUpdateOperationsInput
  title: NullableStringFieldUpdateOperationsInput
  token: NullableStringFieldUpdateOperationsInput
  notificationSettings: JSON
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  dynamicFields: JSON
  active: BoolFieldUpdateOperationsInput
  oktaUserId: NullableIntFieldUpdateOperationsInput
  oktaManagerId: NullableIntFieldUpdateOperationsInput
  forgetPassword: NullableStringFieldUpdateOperationsInput
  csmStatus: BoolFieldUpdateOperationsInput
  crmStatus: BoolFieldUpdateOperationsInput
  customer: CustomerUpdateOneRequiredWithoutUsersInput
  leadSourceFor: CompanyUpdateManyWithoutLeadSourceInput
  primaryContactFor: CompanyUpdateManyWithoutPrimaryContactInput
  starred: CompanyStarredUpdateManyWithoutUserInput
  externalUser: ExternalUserUpdateManyWithoutUserInput
  groups: GroupUserUpdateManyWithoutUserInput
  Note: NoteUpdateManyWithoutUserInput
  roles: UserRoleUpdateManyWithoutUserInput
  userEvents: UserEventsUpdateManyWithoutUserInput
  UserCompanyRatings: UserCompanyRatingsUpdateManyWithoutUserInput
  messageTemplate: MessageTemplateUpdateManyWithoutUserInput
  Feedback: FeedbackUpdateManyWithoutUserInput
  references: ReferenceUpdateManyWithoutUserInput
  userManager: UserManagerUpdateManyWithoutUserInput
  userReportee: UserManagerUpdateManyWithoutManagerInput
}

input MessageTemplateUpdateManyWithoutUserInput {
  create: [MessageTemplateCreateWithoutUserInput!]
  connectOrCreate: [MessageTemplateCreateOrConnectWithoutUserInput!]
  upsert: [MessageTemplateUpsertWithWhereUniqueWithoutUserInput!]
  createMany: MessageTemplateCreateManyUserInputEnvelope
  connect: [MessageTemplateWhereUniqueInput!]
  set: [MessageTemplateWhereUniqueInput!]
  disconnect: [MessageTemplateWhereUniqueInput!]
  delete: [MessageTemplateWhereUniqueInput!]
  update: [MessageTemplateUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [MessageTemplateUpdateManyWithWhereWithoutUserInput!]
  deleteMany: [MessageTemplateScalarWhereInput!]
}

input MessageTemplateUpsertWithWhereUniqueWithoutUserInput {
  where: MessageTemplateWhereUniqueInput!
  update: MessageTemplateUpdateWithoutUserInput!
  create: MessageTemplateCreateWithoutUserInput!
}

input MessageTemplateUpdateWithoutUserInput {
  eventType: EnumEventTypeFieldUpdateOperationsInput
  companyType: EnumCompanyTypeFieldUpdateOperationsInput
  messageType: EnumMessageTypeFieldUpdateOperationsInput
  sendToAddress: NullableStringFieldUpdateOperationsInput
  title: NullableStringFieldUpdateOperationsInput
  subject: StringFieldUpdateOperationsInput
  text: StringFieldUpdateOperationsInput
  delta: JSON
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
  customer: CustomerUpdateOneRequiredWithoutMessageTemplateInput
  launch: LaunchUpdateManyWithoutMessageTempateInput
}

input LaunchUpdateManyWithoutMessageTempateInput {
  create: [LaunchCreateWithoutMessageTempateInput!]
  connectOrCreate: [LaunchCreateOrConnectWithoutMessageTempateInput!]
  upsert: [LaunchUpsertWithWhereUniqueWithoutMessageTempateInput!]
  createMany: LaunchCreateManyMessageTempateInputEnvelope
  connect: [LaunchWhereUniqueInput!]
  set: [LaunchWhereUniqueInput!]
  disconnect: [LaunchWhereUniqueInput!]
  delete: [LaunchWhereUniqueInput!]
  update: [LaunchUpdateWithWhereUniqueWithoutMessageTempateInput!]
  updateMany: [LaunchUpdateManyWithWhereWithoutMessageTempateInput!]
  deleteMany: [LaunchScalarWhereInput!]
}

input LaunchUpsertWithWhereUniqueWithoutMessageTempateInput {
  where: LaunchWhereUniqueInput!
  update: LaunchUpdateWithoutMessageTempateInput!
  create: LaunchCreateWithoutMessageTempateInput!
}

input LaunchUpdateWithoutMessageTempateInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  sendToAddress: NullableStringFieldUpdateOperationsInput
  subject: StringFieldUpdateOperationsInput
  text: StringFieldUpdateOperationsInput
  delta: JSON
  company: CompanyUpdateOneRequiredWithoutLaunchInput
  events: EventUpdateOneWithoutLaunchInput
  launchContacts: LaunchContactsUpdateManyWithoutLaunchInput
  Customer: CustomerUpdateOneWithoutLaunchInput
}

input LaunchContactsUpdateManyWithoutLaunchInput {
  create: [LaunchContactsCreateWithoutLaunchInput!]
  connectOrCreate: [LaunchContactsCreateOrConnectWithoutLaunchInput!]
  upsert: [LaunchContactsUpsertWithWhereUniqueWithoutLaunchInput!]
  createMany: LaunchContactsCreateManyLaunchInputEnvelope
  connect: [LaunchContactsWhereUniqueInput!]
  set: [LaunchContactsWhereUniqueInput!]
  disconnect: [LaunchContactsWhereUniqueInput!]
  delete: [LaunchContactsWhereUniqueInput!]
  update: [LaunchContactsUpdateWithWhereUniqueWithoutLaunchInput!]
  updateMany: [LaunchContactsUpdateManyWithWhereWithoutLaunchInput!]
  deleteMany: [LaunchContactsScalarWhereInput!]
}

input LaunchContactsUpsertWithWhereUniqueWithoutLaunchInput {
  where: LaunchContactsWhereUniqueInput!
  update: LaunchContactsUpdateWithoutLaunchInput!
  create: LaunchContactsCreateWithoutLaunchInput!
}

input LaunchContactsUpdateWithoutLaunchInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  contact: ContactsUpdateOneRequiredWithoutLaunchContactsInput
}

input ContactsUpdateOneRequiredWithoutLaunchContactsInput {
  create: ContactsCreateWithoutLaunchContactsInput
  connectOrCreate: ContactsCreateOrConnectWithoutLaunchContactsInput
  upsert: ContactsUpsertWithoutLaunchContactsInput
  connect: ContactsWhereUniqueInput
  update: ContactsUpdateWithoutLaunchContactsInput
}

input ContactsUpsertWithoutLaunchContactsInput {
  update: ContactsUpdateWithoutLaunchContactsInput!
  create: ContactsCreateWithoutLaunchContactsInput!
}

input ContactsUpdateWithoutLaunchContactsInput {
  email: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  workPhone: NullableStringFieldUpdateOperationsInput
  mobilePhone: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  primary: BoolFieldUpdateOperationsInput
  image: NullableStringFieldUpdateOperationsInput
  company: CompanyUpdateOneWithoutContactsInput
}

input CompanyUpdateOneWithoutContactsInput {
  create: CompanyCreateWithoutContactsInput
  connectOrCreate: CompanyCreateOrConnectWithoutContactsInput
  upsert: CompanyUpsertWithoutContactsInput
  connect: CompanyWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: CompanyUpdateWithoutContactsInput
}

input CompanyUpsertWithoutContactsInput {
  update: CompanyUpdateWithoutContactsInput!
  create: CompanyCreateWithoutContactsInput!
}

input CompanyUpdateWithoutContactsInput {
  annualRecurringRevenue: NullableIntFieldUpdateOperationsInput
  expectedToCloseAt: NullableDateTimeFieldUpdateOperationsInput
  fiscalYearStartMonth: NullableIntFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  companyType: EnumCompanyTypeFieldUpdateOperationsInput
  seatSize: NullableIntFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  fiscalYear: IntFieldUpdateOperationsInput
  renewalDate: NullableDateTimeFieldUpdateOperationsInput
  referredOn: NullableDateTimeFieldUpdateOperationsInput
  latestReferenceId: NullableIntFieldUpdateOperationsInput
  customer: CustomerUpdateOneRequiredWithoutCompaniesInput
  leadSource: UserUpdateOneWithoutLeadSourceForInput
  companyParent: CompanyUpdateOneWithoutSubsidiaryInput
  primaryContact: UserUpdateOneWithoutPrimaryContactForInput
  references: ReferenceUpdateManyWithoutCompanyInput
  referencesServedFor: ReferenceUpdateManyWithoutServedAsReferenceForInput
  subsidiary: CompanyUpdateManyWithoutCompanyParentInput
  starredBy: CompanyStarredUpdateManyWithoutCompanyInput
  events: EventUpdateManyWithoutCompanyInput
  notes: NoteUpdateManyWithoutCompanyInput
  account: AccountUpdateOneRequiredWithoutCompanyInput
  competitors: CompetitorUpdateManyWithoutCompanyInput
  products: ProductUpdateManyWithoutCompanyInput
  UserCompanyRatings: UserCompanyRatingsUpdateManyWithoutCompanyInput
  listCompanies: ListCompanyUpdateManyWithoutCompanyInput
  Launch: LaunchUpdateManyWithoutCompanyInput
}

input LaunchUpdateManyWithoutCompanyInput {
  create: [LaunchCreateWithoutCompanyInput!]
  connectOrCreate: [LaunchCreateOrConnectWithoutCompanyInput!]
  upsert: [LaunchUpsertWithWhereUniqueWithoutCompanyInput!]
  createMany: LaunchCreateManyCompanyInputEnvelope
  connect: [LaunchWhereUniqueInput!]
  set: [LaunchWhereUniqueInput!]
  disconnect: [LaunchWhereUniqueInput!]
  delete: [LaunchWhereUniqueInput!]
  update: [LaunchUpdateWithWhereUniqueWithoutCompanyInput!]
  updateMany: [LaunchUpdateManyWithWhereWithoutCompanyInput!]
  deleteMany: [LaunchScalarWhereInput!]
}

input LaunchUpsertWithWhereUniqueWithoutCompanyInput {
  where: LaunchWhereUniqueInput!
  update: LaunchUpdateWithoutCompanyInput!
  create: LaunchCreateWithoutCompanyInput!
}

input LaunchUpdateWithoutCompanyInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  sendToAddress: NullableStringFieldUpdateOperationsInput
  subject: StringFieldUpdateOperationsInput
  text: StringFieldUpdateOperationsInput
  delta: JSON
  events: EventUpdateOneWithoutLaunchInput
  messageTempate: MessageTemplateUpdateOneWithoutLaunchInput
  launchContacts: LaunchContactsUpdateManyWithoutLaunchInput
  Customer: CustomerUpdateOneWithoutLaunchInput
}

input CustomerUpdateOneWithoutLaunchInput {
  create: CustomerCreateWithoutLaunchInput
  connectOrCreate: CustomerCreateOrConnectWithoutLaunchInput
  upsert: CustomerUpsertWithoutLaunchInput
  connect: CustomerWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: CustomerUpdateWithoutLaunchInput
}

input CustomerUpsertWithoutLaunchInput {
  update: CustomerUpdateWithoutLaunchInput!
  create: CustomerCreateWithoutLaunchInput!
}

input CustomerUpdateWithoutLaunchInput {
  name: StringFieldUpdateOperationsInput
  type: EnumCustomerTypeFieldUpdateOperationsInput
  favoritedAt: NullableDateTimeFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  oktaClientId: NullableStringFieldUpdateOperationsInput
  oktaDomain: NullableStringFieldUpdateOperationsInput
  oktaClientSecret: NullableStringFieldUpdateOperationsInput
  oktaApiKey: NullableStringFieldUpdateOperationsInput
  companies: CompanyUpdateManyWithoutCustomerInput
  integrations: CustomerIntegrationUpdateManyWithoutCustomerInput
  events: EventUpdateManyWithoutCustomerInput
  externalGroups: ExternalGroupUpdateManyWithoutCustomerInput
  externalUsers: ExternalUserUpdateManyWithoutCustomerInput
  groups: GroupUpdateManyWithoutCustomerInput
  notes: NoteUpdateManyWithoutCustomerInput
  roles: RoleUpdateManyWithoutCustomerInput
  salesLeads: SalesLeadUpdateManyWithoutCustomerInput
  syncEvents: SyncEventUpdateManyWithoutCustomerInput
  users: UserUpdateManyWithoutCustomerInput
  messageTemplate: MessageTemplateUpdateManyWithoutCustomerInput
  dynamicFields: DynamicUserFieldsUpdateManyWithoutCustomerInput
  lists: ListUpdateManyWithoutCustomerInput
  useCaseCollections: UseCaseCollectionsUpdateManyWithoutCustomerInput
  customerDataSources: DataSourcesOnCustomerUpdateManyWithoutCustomerInput
  dataObjectCollections: DataObjectCollectionsUpdateManyWithoutCustomerInput
}

input DynamicUserFieldsUpdateManyWithoutCustomerInput {
  create: [DynamicUserFieldsCreateWithoutCustomerInput!]
  connectOrCreate: [DynamicUserFieldsCreateOrConnectWithoutCustomerInput!]
  upsert: [DynamicUserFieldsUpsertWithWhereUniqueWithoutCustomerInput!]
  createMany: DynamicUserFieldsCreateManyCustomerInputEnvelope
  connect: [DynamicUserFieldsWhereUniqueInput!]
  set: [DynamicUserFieldsWhereUniqueInput!]
  disconnect: [DynamicUserFieldsWhereUniqueInput!]
  delete: [DynamicUserFieldsWhereUniqueInput!]
  update: [DynamicUserFieldsUpdateWithWhereUniqueWithoutCustomerInput!]
  updateMany: [DynamicUserFieldsUpdateManyWithWhereWithoutCustomerInput!]
  deleteMany: [DynamicUserFieldsScalarWhereInput!]
}

input DynamicUserFieldsUpsertWithWhereUniqueWithoutCustomerInput {
  where: DynamicUserFieldsWhereUniqueInput!
  update: DynamicUserFieldsUpdateWithoutCustomerInput!
  create: DynamicUserFieldsCreateWithoutCustomerInput!
}

input DynamicUserFieldsUpdateWithoutCustomerInput {
  fieldName: StringFieldUpdateOperationsInput
  fieldLabel: StringFieldUpdateOperationsInput
  fieldType: NullableEnumFieldTypesFieldUpdateOperationsInput
  display: BoolFieldUpdateOperationsInput
  allowedValues: JSON
  isDefault: BoolFieldUpdateOperationsInput
  order: NullableIntFieldUpdateOperationsInput
}

input NullableEnumFieldTypesFieldUpdateOperationsInput {
  set: FieldTypes
}

input DynamicUserFieldsUpdateWithWhereUniqueWithoutCustomerInput {
  where: DynamicUserFieldsWhereUniqueInput!
  data: DynamicUserFieldsUpdateWithoutCustomerInput!
}

input DynamicUserFieldsUpdateManyWithWhereWithoutCustomerInput {
  where: DynamicUserFieldsScalarWhereInput!
  data: DynamicUserFieldsUpdateManyMutationInput!
}

input DynamicUserFieldsScalarWhereInput {
  AND: [DynamicUserFieldsScalarWhereInput!]
  OR: [DynamicUserFieldsScalarWhereInput!]
  NOT: [DynamicUserFieldsScalarWhereInput!]
  id: IntFilter
  fieldName: StringFilter
  fieldLabel: StringFilter
  fieldType: EnumFieldTypesNullableFilter
  display: BoolFilter
  allowedValues: JsonNullableFilter
  isDefault: BoolFilter
  customerId: IntFilter
  order: IntNullableFilter
}

input DynamicUserFieldsUpdateManyMutationInput {
  fieldName: StringFieldUpdateOperationsInput
  fieldLabel: StringFieldUpdateOperationsInput
  fieldType: NullableEnumFieldTypesFieldUpdateOperationsInput
  display: BoolFieldUpdateOperationsInput
  allowedValues: JSON
  isDefault: BoolFieldUpdateOperationsInput
  order: NullableIntFieldUpdateOperationsInput
}

input ListUpdateManyWithoutCustomerInput {
  create: [ListCreateWithoutCustomerInput!]
  connectOrCreate: [ListCreateOrConnectWithoutCustomerInput!]
  upsert: [ListUpsertWithWhereUniqueWithoutCustomerInput!]
  createMany: ListCreateManyCustomerInputEnvelope
  connect: [ListWhereUniqueInput!]
  set: [ListWhereUniqueInput!]
  disconnect: [ListWhereUniqueInput!]
  delete: [ListWhereUniqueInput!]
  update: [ListUpdateWithWhereUniqueWithoutCustomerInput!]
  updateMany: [ListUpdateManyWithWhereWithoutCustomerInput!]
  deleteMany: [ListScalarWhereInput!]
}

input ListUpsertWithWhereUniqueWithoutCustomerInput {
  where: ListWhereUniqueInput!
  update: ListUpdateWithoutCustomerInput!
  create: ListCreateWithoutCustomerInput!
}

input ListUpdateWithoutCustomerInput {
  name: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  listCompanies: ListCompanyUpdateManyWithoutListInput
  parent: ListUpdateOneWithoutChildrenInput
  children: ListUpdateManyWithoutParentInput
}

input ListCompanyUpdateManyWithoutListInput {
  create: [ListCompanyCreateWithoutListInput!]
  connectOrCreate: [ListCompanyCreateOrConnectWithoutListInput!]
  upsert: [ListCompanyUpsertWithWhereUniqueWithoutListInput!]
  createMany: ListCompanyCreateManyListInputEnvelope
  connect: [ListCompanyWhereUniqueInput!]
  set: [ListCompanyWhereUniqueInput!]
  disconnect: [ListCompanyWhereUniqueInput!]
  delete: [ListCompanyWhereUniqueInput!]
  update: [ListCompanyUpdateWithWhereUniqueWithoutListInput!]
  updateMany: [ListCompanyUpdateManyWithWhereWithoutListInput!]
  deleteMany: [ListCompanyScalarWhereInput!]
}

input ListCompanyUpsertWithWhereUniqueWithoutListInput {
  where: ListCompanyWhereUniqueInput!
  update: ListCompanyUpdateWithoutListInput!
  create: ListCompanyCreateWithoutListInput!
}

input ListCompanyUpdateWithoutListInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  company: CompanyUpdateOneRequiredWithoutListCompaniesInput
}

input CompanyUpdateOneRequiredWithoutListCompaniesInput {
  create: CompanyCreateWithoutListCompaniesInput
  connectOrCreate: CompanyCreateOrConnectWithoutListCompaniesInput
  upsert: CompanyUpsertWithoutListCompaniesInput
  connect: CompanyWhereUniqueInput
  update: CompanyUpdateWithoutListCompaniesInput
}

input CompanyUpsertWithoutListCompaniesInput {
  update: CompanyUpdateWithoutListCompaniesInput!
  create: CompanyCreateWithoutListCompaniesInput!
}

input CompanyUpdateWithoutListCompaniesInput {
  annualRecurringRevenue: NullableIntFieldUpdateOperationsInput
  expectedToCloseAt: NullableDateTimeFieldUpdateOperationsInput
  fiscalYearStartMonth: NullableIntFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  companyType: EnumCompanyTypeFieldUpdateOperationsInput
  seatSize: NullableIntFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  fiscalYear: IntFieldUpdateOperationsInput
  renewalDate: NullableDateTimeFieldUpdateOperationsInput
  referredOn: NullableDateTimeFieldUpdateOperationsInput
  latestReferenceId: NullableIntFieldUpdateOperationsInput
  customer: CustomerUpdateOneRequiredWithoutCompaniesInput
  leadSource: UserUpdateOneWithoutLeadSourceForInput
  companyParent: CompanyUpdateOneWithoutSubsidiaryInput
  primaryContact: UserUpdateOneWithoutPrimaryContactForInput
  references: ReferenceUpdateManyWithoutCompanyInput
  referencesServedFor: ReferenceUpdateManyWithoutServedAsReferenceForInput
  subsidiary: CompanyUpdateManyWithoutCompanyParentInput
  starredBy: CompanyStarredUpdateManyWithoutCompanyInput
  events: EventUpdateManyWithoutCompanyInput
  notes: NoteUpdateManyWithoutCompanyInput
  account: AccountUpdateOneRequiredWithoutCompanyInput
  competitors: CompetitorUpdateManyWithoutCompanyInput
  products: ProductUpdateManyWithoutCompanyInput
  contacts: ContactsUpdateManyWithoutCompanyInput
  UserCompanyRatings: UserCompanyRatingsUpdateManyWithoutCompanyInput
  Launch: LaunchUpdateManyWithoutCompanyInput
}

input ListCompanyUpdateWithWhereUniqueWithoutListInput {
  where: ListCompanyWhereUniqueInput!
  data: ListCompanyUpdateWithoutListInput!
}

input ListCompanyUpdateManyWithWhereWithoutListInput {
  where: ListCompanyScalarWhereInput!
  data: ListCompanyUpdateManyMutationInput!
}

input ListCompanyScalarWhereInput {
  AND: [ListCompanyScalarWhereInput!]
  OR: [ListCompanyScalarWhereInput!]
  NOT: [ListCompanyScalarWhereInput!]
  id: IntFilter
  listId: IntFilter
  companyId: IntFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
}

input ListCompanyUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ListUpdateOneWithoutChildrenInput {
  create: ListCreateWithoutChildrenInput
  connectOrCreate: ListCreateOrConnectWithoutChildrenInput
  upsert: ListUpsertWithoutChildrenInput
  connect: ListWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: ListUpdateWithoutChildrenInput
}

input ListUpsertWithoutChildrenInput {
  update: ListUpdateWithoutChildrenInput!
  create: ListCreateWithoutChildrenInput!
}

input ListUpdateWithoutChildrenInput {
  name: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  customer: CustomerUpdateOneRequiredWithoutListsInput
  listCompanies: ListCompanyUpdateManyWithoutListInput
  parent: ListUpdateOneWithoutChildrenInput
}

input ListUpdateManyWithoutParentInput {
  create: [ListCreateWithoutParentInput!]
  connectOrCreate: [ListCreateOrConnectWithoutParentInput!]
  upsert: [ListUpsertWithWhereUniqueWithoutParentInput!]
  createMany: ListCreateManyParentInputEnvelope
  connect: [ListWhereUniqueInput!]
  set: [ListWhereUniqueInput!]
  disconnect: [ListWhereUniqueInput!]
  delete: [ListWhereUniqueInput!]
  update: [ListUpdateWithWhereUniqueWithoutParentInput!]
  updateMany: [ListUpdateManyWithWhereWithoutParentInput!]
  deleteMany: [ListScalarWhereInput!]
}

input ListUpsertWithWhereUniqueWithoutParentInput {
  where: ListWhereUniqueInput!
  update: ListUpdateWithoutParentInput!
  create: ListCreateWithoutParentInput!
}

input ListUpdateWithoutParentInput {
  name: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  customer: CustomerUpdateOneRequiredWithoutListsInput
  listCompanies: ListCompanyUpdateManyWithoutListInput
  children: ListUpdateManyWithoutParentInput
}

input ListUpdateWithWhereUniqueWithoutParentInput {
  where: ListWhereUniqueInput!
  data: ListUpdateWithoutParentInput!
}

input ListUpdateManyWithWhereWithoutParentInput {
  where: ListScalarWhereInput!
  data: ListUpdateManyMutationInput!
}

input ListScalarWhereInput {
  AND: [ListScalarWhereInput!]
  OR: [ListScalarWhereInput!]
  NOT: [ListScalarWhereInput!]
  id: IntFilter
  customerId: IntFilter
  name: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  parentId: IntNullableFilter
}

input ListUpdateManyMutationInput {
  name: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ListUpdateWithWhereUniqueWithoutCustomerInput {
  where: ListWhereUniqueInput!
  data: ListUpdateWithoutCustomerInput!
}

input ListUpdateManyWithWhereWithoutCustomerInput {
  where: ListScalarWhereInput!
  data: ListUpdateManyMutationInput!
}

input UseCaseCollectionsUpdateManyWithoutCustomerInput {
  create: [UseCaseCollectionsCreateWithoutCustomerInput!]
  connectOrCreate: [UseCaseCollectionsCreateOrConnectWithoutCustomerInput!]
  upsert: [UseCaseCollectionsUpsertWithWhereUniqueWithoutCustomerInput!]
  createMany: UseCaseCollectionsCreateManyCustomerInputEnvelope
  connect: [UseCaseCollectionsWhereUniqueInput!]
  set: [UseCaseCollectionsWhereUniqueInput!]
  disconnect: [UseCaseCollectionsWhereUniqueInput!]
  delete: [UseCaseCollectionsWhereUniqueInput!]
  update: [UseCaseCollectionsUpdateWithWhereUniqueWithoutCustomerInput!]
  updateMany: [UseCaseCollectionsUpdateManyWithWhereWithoutCustomerInput!]
  deleteMany: [UseCaseCollectionsScalarWhereInput!]
}

input UseCaseCollectionsUpsertWithWhereUniqueWithoutCustomerInput {
  where: UseCaseCollectionsWhereUniqueInput!
  update: UseCaseCollectionsUpdateWithoutCustomerInput!
  create: UseCaseCollectionsCreateWithoutCustomerInput!
}

input UseCaseCollectionsUpdateWithoutCustomerInput {
  name: StringFieldUpdateOperationsInput
  default: BoolFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
  useCasesOnCollections: UseCasesOnCollectionsUpdateManyWithoutCollectionInput
}

input UseCasesOnCollectionsUpdateManyWithoutCollectionInput {
  create: [UseCasesOnCollectionsCreateWithoutCollectionInput!]
  connectOrCreate: [UseCasesOnCollectionsCreateOrConnectWithoutCollectionInput!]
  upsert: [UseCasesOnCollectionsUpsertWithWhereUniqueWithoutCollectionInput!]
  createMany: UseCasesOnCollectionsCreateManyCollectionInputEnvelope
  connect: [UseCasesOnCollectionsWhereUniqueInput!]
  set: [UseCasesOnCollectionsWhereUniqueInput!]
  disconnect: [UseCasesOnCollectionsWhereUniqueInput!]
  delete: [UseCasesOnCollectionsWhereUniqueInput!]
  update: [UseCasesOnCollectionsUpdateWithWhereUniqueWithoutCollectionInput!]
  updateMany: [UseCasesOnCollectionsUpdateManyWithWhereWithoutCollectionInput!]
  deleteMany: [UseCasesOnCollectionsScalarWhereInput!]
}

input UseCasesOnCollectionsUpsertWithWhereUniqueWithoutCollectionInput {
  where: UseCasesOnCollectionsWhereUniqueInput!
  update: UseCasesOnCollectionsUpdateWithoutCollectionInput!
  create: UseCasesOnCollectionsCreateWithoutCollectionInput!
}

input UseCasesOnCollectionsUpdateWithoutCollectionInput {
  status: BoolFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
  useCase: UseCasesUpdateOneRequiredWithoutUseCasesOnCollectionsInput
}

input UseCasesUpdateOneRequiredWithoutUseCasesOnCollectionsInput {
  create: UseCasesCreateWithoutUseCasesOnCollectionsInput
  connectOrCreate: UseCasesCreateOrConnectWithoutUseCasesOnCollectionsInput
  upsert: UseCasesUpsertWithoutUseCasesOnCollectionsInput
  connect: UseCasesWhereUniqueInput
  update: UseCasesUpdateWithoutUseCasesOnCollectionsInput
}

input UseCasesUpsertWithoutUseCasesOnCollectionsInput {
  update: UseCasesUpdateWithoutUseCasesOnCollectionsInput!
  create: UseCasesCreateWithoutUseCasesOnCollectionsInput!
}

input UseCasesUpdateWithoutUseCasesOnCollectionsInput {
  name: StringFieldUpdateOperationsInput
  displayName: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
}

input UseCasesOnCollectionsUpdateWithWhereUniqueWithoutCollectionInput {
  where: UseCasesOnCollectionsWhereUniqueInput!
  data: UseCasesOnCollectionsUpdateWithoutCollectionInput!
}

input UseCasesOnCollectionsUpdateManyWithWhereWithoutCollectionInput {
  where: UseCasesOnCollectionsScalarWhereInput!
  data: UseCasesOnCollectionsUpdateManyMutationInput!
}

input UseCasesOnCollectionsScalarWhereInput {
  AND: [UseCasesOnCollectionsScalarWhereInput!]
  OR: [UseCasesOnCollectionsScalarWhereInput!]
  NOT: [UseCasesOnCollectionsScalarWhereInput!]
  id: IntFilter
  status: BoolFilter
  useCaseId: IntFilter
  collectionId: IntFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeNullableFilter
}

input UseCasesOnCollectionsUpdateManyMutationInput {
  status: BoolFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
}

input UseCaseCollectionsUpdateWithWhereUniqueWithoutCustomerInput {
  where: UseCaseCollectionsWhereUniqueInput!
  data: UseCaseCollectionsUpdateWithoutCustomerInput!
}

input UseCaseCollectionsUpdateManyWithWhereWithoutCustomerInput {
  where: UseCaseCollectionsScalarWhereInput!
  data: UseCaseCollectionsUpdateManyMutationInput!
}

input UseCaseCollectionsScalarWhereInput {
  AND: [UseCaseCollectionsScalarWhereInput!]
  OR: [UseCaseCollectionsScalarWhereInput!]
  NOT: [UseCaseCollectionsScalarWhereInput!]
  id: IntFilter
  name: StringFilter
  customerId: IntFilter
  default: BoolFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeNullableFilter
}

input UseCaseCollectionsUpdateManyMutationInput {
  name: StringFieldUpdateOperationsInput
  default: BoolFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
}

input DataSourcesOnCustomerUpdateManyWithoutCustomerInput {
  create: [DataSourcesOnCustomerCreateWithoutCustomerInput!]
  connectOrCreate: [DataSourcesOnCustomerCreateOrConnectWithoutCustomerInput!]
  upsert: [DataSourcesOnCustomerUpsertWithWhereUniqueWithoutCustomerInput!]
  createMany: DataSourcesOnCustomerCreateManyCustomerInputEnvelope
  connect: [DataSourcesOnCustomerWhereUniqueInput!]
  set: [DataSourcesOnCustomerWhereUniqueInput!]
  disconnect: [DataSourcesOnCustomerWhereUniqueInput!]
  delete: [DataSourcesOnCustomerWhereUniqueInput!]
  update: [DataSourcesOnCustomerUpdateWithWhereUniqueWithoutCustomerInput!]
  updateMany: [DataSourcesOnCustomerUpdateManyWithWhereWithoutCustomerInput!]
  deleteMany: [DataSourcesOnCustomerScalarWhereInput!]
}

input DataSourcesOnCustomerUpsertWithWhereUniqueWithoutCustomerInput {
  where: DataSourcesOnCustomerWhereUniqueInput!
  update: DataSourcesOnCustomerUpdateWithoutCustomerInput!
  create: DataSourcesOnCustomerCreateWithoutCustomerInput!
}

input DataSourcesOnCustomerUpdateWithoutCustomerInput {
  status: BoolFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
  dataSource: DataSourcesUpdateOneRequiredWithoutCustomerDataSourcesInput
}

input DataSourcesUpdateOneRequiredWithoutCustomerDataSourcesInput {
  create: DataSourcesCreateWithoutCustomerDataSourcesInput
  connectOrCreate: DataSourcesCreateOrConnectWithoutCustomerDataSourcesInput
  upsert: DataSourcesUpsertWithoutCustomerDataSourcesInput
  connect: DataSourcesWhereUniqueInput
  update: DataSourcesUpdateWithoutCustomerDataSourcesInput
}

input DataSourcesUpsertWithoutCustomerDataSourcesInput {
  update: DataSourcesUpdateWithoutCustomerDataSourcesInput!
  create: DataSourcesCreateWithoutCustomerDataSourcesInput!
}

input DataSourcesUpdateWithoutCustomerDataSourcesInput {
  name: StringFieldUpdateOperationsInput
  icon: NullableStringFieldUpdateOperationsInput
  sourceType: EnumSourceTypesFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  dataObjects: CustomerDataObjectsUpdateManyWithoutDataSourceInput
}

input EnumSourceTypesFieldUpdateOperationsInput {
  set: SourceTypes
}

input CustomerDataObjectsUpdateManyWithoutDataSourceInput {
  create: [CustomerDataObjectsCreateWithoutDataSourceInput!]
  connectOrCreate: [CustomerDataObjectsCreateOrConnectWithoutDataSourceInput!]
  upsert: [CustomerDataObjectsUpsertWithWhereUniqueWithoutDataSourceInput!]
  createMany: CustomerDataObjectsCreateManyDataSourceInputEnvelope
  connect: [CustomerDataObjectsWhereUniqueInput!]
  set: [CustomerDataObjectsWhereUniqueInput!]
  disconnect: [CustomerDataObjectsWhereUniqueInput!]
  delete: [CustomerDataObjectsWhereUniqueInput!]
  update: [CustomerDataObjectsUpdateWithWhereUniqueWithoutDataSourceInput!]
  updateMany: [CustomerDataObjectsUpdateManyWithWhereWithoutDataSourceInput!]
  deleteMany: [CustomerDataObjectsScalarWhereInput!]
}

input CustomerDataObjectsUpsertWithWhereUniqueWithoutDataSourceInput {
  where: CustomerDataObjectsWhereUniqueInput!
  update: CustomerDataObjectsUpdateWithoutDataSourceInput!
  create: CustomerDataObjectsCreateWithoutDataSourceInput!
}

input CustomerDataObjectsUpdateWithoutDataSourceInput {
  name: StringFieldUpdateOperationsInput
  displayName: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  dataObjectCollectionOnDataObject: DataObjectCollectionOnDataObjectUpdateManyWithoutDataObjectInput
}

input DataObjectCollectionOnDataObjectUpdateManyWithoutDataObjectInput {
  create: [DataObjectCollectionOnDataObjectCreateWithoutDataObjectInput!]
  connectOrCreate: [DataObjectCollectionOnDataObjectCreateOrConnectWithoutDataObjectInput!]
  upsert: [DataObjectCollectionOnDataObjectUpsertWithWhereUniqueWithoutDataObjectInput!]
  createMany: DataObjectCollectionOnDataObjectCreateManyDataObjectInputEnvelope
  connect: [DataObjectCollectionOnDataObjectWhereUniqueInput!]
  set: [DataObjectCollectionOnDataObjectWhereUniqueInput!]
  disconnect: [DataObjectCollectionOnDataObjectWhereUniqueInput!]
  delete: [DataObjectCollectionOnDataObjectWhereUniqueInput!]
  update: [DataObjectCollectionOnDataObjectUpdateWithWhereUniqueWithoutDataObjectInput!]
  updateMany: [DataObjectCollectionOnDataObjectUpdateManyWithWhereWithoutDataObjectInput!]
  deleteMany: [DataObjectCollectionOnDataObjectScalarWhereInput!]
}

input DataObjectCollectionOnDataObjectUpsertWithWhereUniqueWithoutDataObjectInput {
  where: DataObjectCollectionOnDataObjectWhereUniqueInput!
  update: DataObjectCollectionOnDataObjectUpdateWithoutDataObjectInput!
  create: DataObjectCollectionOnDataObjectCreateWithoutDataObjectInput!
}

input DataObjectCollectionOnDataObjectUpdateWithoutDataObjectInput {
  status: BoolFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
  dataObjectCollections: DataObjectCollectionsUpdateOneRequiredWithoutDataObjectCollectionOnDataObjectInput
}

input DataObjectCollectionsUpdateOneRequiredWithoutDataObjectCollectionOnDataObjectInput {
  create: DataObjectCollectionsCreateWithoutDataObjectCollectionOnDataObjectInput
  connectOrCreate: DataObjectCollectionsCreateOrConnectWithoutDataObjectCollectionOnDataObjectInput
  upsert: DataObjectCollectionsUpsertWithoutDataObjectCollectionOnDataObjectInput
  connect: DataObjectCollectionsWhereUniqueInput
  update: DataObjectCollectionsUpdateWithoutDataObjectCollectionOnDataObjectInput
}

input DataObjectCollectionsUpsertWithoutDataObjectCollectionOnDataObjectInput {
  update: DataObjectCollectionsUpdateWithoutDataObjectCollectionOnDataObjectInput!
  create: DataObjectCollectionsCreateWithoutDataObjectCollectionOnDataObjectInput!
}

input DataObjectCollectionsUpdateWithoutDataObjectCollectionOnDataObjectInput {
  name: StringFieldUpdateOperationsInput
  default: BoolFieldUpdateOperationsInput
  isAllAccess: BoolFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
  customer: CustomerUpdateOneRequiredWithoutDataObjectCollectionsInput
}

input CustomerUpdateOneRequiredWithoutDataObjectCollectionsInput {
  create: CustomerCreateWithoutDataObjectCollectionsInput
  connectOrCreate: CustomerCreateOrConnectWithoutDataObjectCollectionsInput
  upsert: CustomerUpsertWithoutDataObjectCollectionsInput
  connect: CustomerWhereUniqueInput
  update: CustomerUpdateWithoutDataObjectCollectionsInput
}

input CustomerUpsertWithoutDataObjectCollectionsInput {
  update: CustomerUpdateWithoutDataObjectCollectionsInput!
  create: CustomerCreateWithoutDataObjectCollectionsInput!
}

input CustomerUpdateWithoutDataObjectCollectionsInput {
  name: StringFieldUpdateOperationsInput
  type: EnumCustomerTypeFieldUpdateOperationsInput
  favoritedAt: NullableDateTimeFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  oktaClientId: NullableStringFieldUpdateOperationsInput
  oktaDomain: NullableStringFieldUpdateOperationsInput
  oktaClientSecret: NullableStringFieldUpdateOperationsInput
  oktaApiKey: NullableStringFieldUpdateOperationsInput
  launch: LaunchUpdateManyWithoutCustomerInput
  companies: CompanyUpdateManyWithoutCustomerInput
  integrations: CustomerIntegrationUpdateManyWithoutCustomerInput
  events: EventUpdateManyWithoutCustomerInput
  externalGroups: ExternalGroupUpdateManyWithoutCustomerInput
  externalUsers: ExternalUserUpdateManyWithoutCustomerInput
  groups: GroupUpdateManyWithoutCustomerInput
  notes: NoteUpdateManyWithoutCustomerInput
  roles: RoleUpdateManyWithoutCustomerInput
  salesLeads: SalesLeadUpdateManyWithoutCustomerInput
  syncEvents: SyncEventUpdateManyWithoutCustomerInput
  users: UserUpdateManyWithoutCustomerInput
  messageTemplate: MessageTemplateUpdateManyWithoutCustomerInput
  dynamicFields: DynamicUserFieldsUpdateManyWithoutCustomerInput
  lists: ListUpdateManyWithoutCustomerInput
  useCaseCollections: UseCaseCollectionsUpdateManyWithoutCustomerInput
  customerDataSources: DataSourcesOnCustomerUpdateManyWithoutCustomerInput
}

input DataObjectCollectionOnDataObjectUpdateWithWhereUniqueWithoutDataObjectInput {
  where: DataObjectCollectionOnDataObjectWhereUniqueInput!
  data: DataObjectCollectionOnDataObjectUpdateWithoutDataObjectInput!
}

input DataObjectCollectionOnDataObjectUpdateManyWithWhereWithoutDataObjectInput {
  where: DataObjectCollectionOnDataObjectScalarWhereInput!
  data: DataObjectCollectionOnDataObjectUpdateManyMutationInput!
}

input DataObjectCollectionOnDataObjectScalarWhereInput {
  AND: [DataObjectCollectionOnDataObjectScalarWhereInput!]
  OR: [DataObjectCollectionOnDataObjectScalarWhereInput!]
  NOT: [DataObjectCollectionOnDataObjectScalarWhereInput!]
  id: IntFilter
  dataObjectCollectionId: IntFilter
  status: BoolFilter
  dataObjectId: IntFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeNullableFilter
}

input DataObjectCollectionOnDataObjectUpdateManyMutationInput {
  status: BoolFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
}

input CustomerDataObjectsUpdateWithWhereUniqueWithoutDataSourceInput {
  where: CustomerDataObjectsWhereUniqueInput!
  data: CustomerDataObjectsUpdateWithoutDataSourceInput!
}

input CustomerDataObjectsUpdateManyWithWhereWithoutDataSourceInput {
  where: CustomerDataObjectsScalarWhereInput!
  data: CustomerDataObjectsUpdateManyMutationInput!
}

input CustomerDataObjectsScalarWhereInput {
  AND: [CustomerDataObjectsScalarWhereInput!]
  OR: [CustomerDataObjectsScalarWhereInput!]
  NOT: [CustomerDataObjectsScalarWhereInput!]
  id: IntFilter
  name: StringFilter
  displayName: StringFilter
  dataSourceId: IntFilter
  createdAt: DateTimeFilter
}

input CustomerDataObjectsUpdateManyMutationInput {
  name: StringFieldUpdateOperationsInput
  displayName: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
}

input DataSourcesOnCustomerUpdateWithWhereUniqueWithoutCustomerInput {
  where: DataSourcesOnCustomerWhereUniqueInput!
  data: DataSourcesOnCustomerUpdateWithoutCustomerInput!
}

input DataSourcesOnCustomerUpdateManyWithWhereWithoutCustomerInput {
  where: DataSourcesOnCustomerScalarWhereInput!
  data: DataSourcesOnCustomerUpdateManyMutationInput!
}

input DataSourcesOnCustomerScalarWhereInput {
  AND: [DataSourcesOnCustomerScalarWhereInput!]
  OR: [DataSourcesOnCustomerScalarWhereInput!]
  NOT: [DataSourcesOnCustomerScalarWhereInput!]
  id: IntFilter
  status: BoolFilter
  dataSourceId: IntFilter
  customerId: IntFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeNullableFilter
}

input DataSourcesOnCustomerUpdateManyMutationInput {
  status: BoolFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
}

input DataObjectCollectionsUpdateManyWithoutCustomerInput {
  create: [DataObjectCollectionsCreateWithoutCustomerInput!]
  connectOrCreate: [DataObjectCollectionsCreateOrConnectWithoutCustomerInput!]
  upsert: [DataObjectCollectionsUpsertWithWhereUniqueWithoutCustomerInput!]
  createMany: DataObjectCollectionsCreateManyCustomerInputEnvelope
  connect: [DataObjectCollectionsWhereUniqueInput!]
  set: [DataObjectCollectionsWhereUniqueInput!]
  disconnect: [DataObjectCollectionsWhereUniqueInput!]
  delete: [DataObjectCollectionsWhereUniqueInput!]
  update: [DataObjectCollectionsUpdateWithWhereUniqueWithoutCustomerInput!]
  updateMany: [DataObjectCollectionsUpdateManyWithWhereWithoutCustomerInput!]
  deleteMany: [DataObjectCollectionsScalarWhereInput!]
}

input DataObjectCollectionsUpsertWithWhereUniqueWithoutCustomerInput {
  where: DataObjectCollectionsWhereUniqueInput!
  update: DataObjectCollectionsUpdateWithoutCustomerInput!
  create: DataObjectCollectionsCreateWithoutCustomerInput!
}

input DataObjectCollectionsUpdateWithoutCustomerInput {
  name: StringFieldUpdateOperationsInput
  default: BoolFieldUpdateOperationsInput
  isAllAccess: BoolFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
  dataObjectCollectionOnDataObject: DataObjectCollectionOnDataObjectUpdateManyWithoutDataObjectCollectionsInput
}

input DataObjectCollectionOnDataObjectUpdateManyWithoutDataObjectCollectionsInput {
  create: [DataObjectCollectionOnDataObjectCreateWithoutDataObjectCollectionsInput!]
  connectOrCreate: [DataObjectCollectionOnDataObjectCreateOrConnectWithoutDataObjectCollectionsInput!]
  upsert: [DataObjectCollectionOnDataObjectUpsertWithWhereUniqueWithoutDataObjectCollectionsInput!]
  createMany: DataObjectCollectionOnDataObjectCreateManyDataObjectCollectionsInputEnvelope
  connect: [DataObjectCollectionOnDataObjectWhereUniqueInput!]
  set: [DataObjectCollectionOnDataObjectWhereUniqueInput!]
  disconnect: [DataObjectCollectionOnDataObjectWhereUniqueInput!]
  delete: [DataObjectCollectionOnDataObjectWhereUniqueInput!]
  update: [DataObjectCollectionOnDataObjectUpdateWithWhereUniqueWithoutDataObjectCollectionsInput!]
  updateMany: [DataObjectCollectionOnDataObjectUpdateManyWithWhereWithoutDataObjectCollectionsInput!]
  deleteMany: [DataObjectCollectionOnDataObjectScalarWhereInput!]
}

input DataObjectCollectionOnDataObjectUpsertWithWhereUniqueWithoutDataObjectCollectionsInput {
  where: DataObjectCollectionOnDataObjectWhereUniqueInput!
  update: DataObjectCollectionOnDataObjectUpdateWithoutDataObjectCollectionsInput!
  create: DataObjectCollectionOnDataObjectCreateWithoutDataObjectCollectionsInput!
}

input DataObjectCollectionOnDataObjectUpdateWithoutDataObjectCollectionsInput {
  status: BoolFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
  dataObject: CustomerDataObjectsUpdateOneRequiredWithoutDataObjectCollectionOnDataObjectInput
}

input CustomerDataObjectsUpdateOneRequiredWithoutDataObjectCollectionOnDataObjectInput {
  create: CustomerDataObjectsCreateWithoutDataObjectCollectionOnDataObjectInput
  connectOrCreate: CustomerDataObjectsCreateOrConnectWithoutDataObjectCollectionOnDataObjectInput
  upsert: CustomerDataObjectsUpsertWithoutDataObjectCollectionOnDataObjectInput
  connect: CustomerDataObjectsWhereUniqueInput
  update: CustomerDataObjectsUpdateWithoutDataObjectCollectionOnDataObjectInput
}

input CustomerDataObjectsUpsertWithoutDataObjectCollectionOnDataObjectInput {
  update: CustomerDataObjectsUpdateWithoutDataObjectCollectionOnDataObjectInput!
  create: CustomerDataObjectsCreateWithoutDataObjectCollectionOnDataObjectInput!
}

input CustomerDataObjectsUpdateWithoutDataObjectCollectionOnDataObjectInput {
  name: StringFieldUpdateOperationsInput
  displayName: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  dataSource: DataSourcesUpdateOneRequiredWithoutDataObjectsInput
}

input DataSourcesUpdateOneRequiredWithoutDataObjectsInput {
  create: DataSourcesCreateWithoutDataObjectsInput
  connectOrCreate: DataSourcesCreateOrConnectWithoutDataObjectsInput
  upsert: DataSourcesUpsertWithoutDataObjectsInput
  connect: DataSourcesWhereUniqueInput
  update: DataSourcesUpdateWithoutDataObjectsInput
}

input DataSourcesUpsertWithoutDataObjectsInput {
  update: DataSourcesUpdateWithoutDataObjectsInput!
  create: DataSourcesCreateWithoutDataObjectsInput!
}

input DataSourcesUpdateWithoutDataObjectsInput {
  name: StringFieldUpdateOperationsInput
  icon: NullableStringFieldUpdateOperationsInput
  sourceType: EnumSourceTypesFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  customerDataSources: DataSourcesOnCustomerUpdateManyWithoutDataSourceInput
}

input DataSourcesOnCustomerUpdateManyWithoutDataSourceInput {
  create: [DataSourcesOnCustomerCreateWithoutDataSourceInput!]
  connectOrCreate: [DataSourcesOnCustomerCreateOrConnectWithoutDataSourceInput!]
  upsert: [DataSourcesOnCustomerUpsertWithWhereUniqueWithoutDataSourceInput!]
  createMany: DataSourcesOnCustomerCreateManyDataSourceInputEnvelope
  connect: [DataSourcesOnCustomerWhereUniqueInput!]
  set: [DataSourcesOnCustomerWhereUniqueInput!]
  disconnect: [DataSourcesOnCustomerWhereUniqueInput!]
  delete: [DataSourcesOnCustomerWhereUniqueInput!]
  update: [DataSourcesOnCustomerUpdateWithWhereUniqueWithoutDataSourceInput!]
  updateMany: [DataSourcesOnCustomerUpdateManyWithWhereWithoutDataSourceInput!]
  deleteMany: [DataSourcesOnCustomerScalarWhereInput!]
}

input DataSourcesOnCustomerUpsertWithWhereUniqueWithoutDataSourceInput {
  where: DataSourcesOnCustomerWhereUniqueInput!
  update: DataSourcesOnCustomerUpdateWithoutDataSourceInput!
  create: DataSourcesOnCustomerCreateWithoutDataSourceInput!
}

input DataSourcesOnCustomerUpdateWithoutDataSourceInput {
  status: BoolFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
  customer: CustomerUpdateOneRequiredWithoutCustomerDataSourcesInput
}

input CustomerUpdateOneRequiredWithoutCustomerDataSourcesInput {
  create: CustomerCreateWithoutCustomerDataSourcesInput
  connectOrCreate: CustomerCreateOrConnectWithoutCustomerDataSourcesInput
  upsert: CustomerUpsertWithoutCustomerDataSourcesInput
  connect: CustomerWhereUniqueInput
  update: CustomerUpdateWithoutCustomerDataSourcesInput
}

input CustomerUpsertWithoutCustomerDataSourcesInput {
  update: CustomerUpdateWithoutCustomerDataSourcesInput!
  create: CustomerCreateWithoutCustomerDataSourcesInput!
}

input CustomerUpdateWithoutCustomerDataSourcesInput {
  name: StringFieldUpdateOperationsInput
  type: EnumCustomerTypeFieldUpdateOperationsInput
  favoritedAt: NullableDateTimeFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  oktaClientId: NullableStringFieldUpdateOperationsInput
  oktaDomain: NullableStringFieldUpdateOperationsInput
  oktaClientSecret: NullableStringFieldUpdateOperationsInput
  oktaApiKey: NullableStringFieldUpdateOperationsInput
  launch: LaunchUpdateManyWithoutCustomerInput
  companies: CompanyUpdateManyWithoutCustomerInput
  integrations: CustomerIntegrationUpdateManyWithoutCustomerInput
  events: EventUpdateManyWithoutCustomerInput
  externalGroups: ExternalGroupUpdateManyWithoutCustomerInput
  externalUsers: ExternalUserUpdateManyWithoutCustomerInput
  groups: GroupUpdateManyWithoutCustomerInput
  notes: NoteUpdateManyWithoutCustomerInput
  roles: RoleUpdateManyWithoutCustomerInput
  salesLeads: SalesLeadUpdateManyWithoutCustomerInput
  syncEvents: SyncEventUpdateManyWithoutCustomerInput
  users: UserUpdateManyWithoutCustomerInput
  messageTemplate: MessageTemplateUpdateManyWithoutCustomerInput
  dynamicFields: DynamicUserFieldsUpdateManyWithoutCustomerInput
  lists: ListUpdateManyWithoutCustomerInput
  useCaseCollections: UseCaseCollectionsUpdateManyWithoutCustomerInput
  dataObjectCollections: DataObjectCollectionsUpdateManyWithoutCustomerInput
}

input DataSourcesOnCustomerUpdateWithWhereUniqueWithoutDataSourceInput {
  where: DataSourcesOnCustomerWhereUniqueInput!
  data: DataSourcesOnCustomerUpdateWithoutDataSourceInput!
}

input DataSourcesOnCustomerUpdateManyWithWhereWithoutDataSourceInput {
  where: DataSourcesOnCustomerScalarWhereInput!
  data: DataSourcesOnCustomerUpdateManyMutationInput!
}

input DataObjectCollectionOnDataObjectUpdateWithWhereUniqueWithoutDataObjectCollectionsInput {
  where: DataObjectCollectionOnDataObjectWhereUniqueInput!
  data: DataObjectCollectionOnDataObjectUpdateWithoutDataObjectCollectionsInput!
}

input DataObjectCollectionOnDataObjectUpdateManyWithWhereWithoutDataObjectCollectionsInput {
  where: DataObjectCollectionOnDataObjectScalarWhereInput!
  data: DataObjectCollectionOnDataObjectUpdateManyMutationInput!
}

input DataObjectCollectionsUpdateWithWhereUniqueWithoutCustomerInput {
  where: DataObjectCollectionsWhereUniqueInput!
  data: DataObjectCollectionsUpdateWithoutCustomerInput!
}

input DataObjectCollectionsUpdateManyWithWhereWithoutCustomerInput {
  where: DataObjectCollectionsScalarWhereInput!
  data: DataObjectCollectionsUpdateManyMutationInput!
}

input DataObjectCollectionsScalarWhereInput {
  AND: [DataObjectCollectionsScalarWhereInput!]
  OR: [DataObjectCollectionsScalarWhereInput!]
  NOT: [DataObjectCollectionsScalarWhereInput!]
  id: IntFilter
  name: StringFilter
  customerId: IntFilter
  default: BoolFilter
  isAllAccess: BoolFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeNullableFilter
}

input DataObjectCollectionsUpdateManyMutationInput {
  name: StringFieldUpdateOperationsInput
  default: BoolFieldUpdateOperationsInput
  isAllAccess: BoolFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
}

input LaunchUpdateWithWhereUniqueWithoutCompanyInput {
  where: LaunchWhereUniqueInput!
  data: LaunchUpdateWithoutCompanyInput!
}

input LaunchUpdateManyWithWhereWithoutCompanyInput {
  where: LaunchScalarWhereInput!
  data: LaunchUpdateManyMutationInput!
}

input LaunchScalarWhereInput {
  AND: [LaunchScalarWhereInput!]
  OR: [LaunchScalarWhereInput!]
  NOT: [LaunchScalarWhereInput!]
  id: IntFilter
  createdAt: DateTimeFilter
  companyId: IntFilter
  eventId: IntNullableFilter
  messageTemplateId: IntNullableFilter
  sendToAddress: StringNullableFilter
  subject: StringFilter
  text: StringFilter
  delta: JsonNullableFilter
  customerId: IntNullableFilter
}

input LaunchUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  sendToAddress: NullableStringFieldUpdateOperationsInput
  subject: StringFieldUpdateOperationsInput
  text: StringFieldUpdateOperationsInput
  delta: JSON
}

input LaunchContactsUpdateWithWhereUniqueWithoutLaunchInput {
  where: LaunchContactsWhereUniqueInput!
  data: LaunchContactsUpdateWithoutLaunchInput!
}

input LaunchContactsUpdateManyWithWhereWithoutLaunchInput {
  where: LaunchContactsScalarWhereInput!
  data: LaunchContactsUpdateManyMutationInput!
}

input LaunchContactsScalarWhereInput {
  AND: [LaunchContactsScalarWhereInput!]
  OR: [LaunchContactsScalarWhereInput!]
  NOT: [LaunchContactsScalarWhereInput!]
  id: IntFilter
  launchId: IntFilter
  contactId: IntFilter
  createdAt: DateTimeFilter
}

input LaunchContactsUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
}

input LaunchUpdateWithWhereUniqueWithoutMessageTempateInput {
  where: LaunchWhereUniqueInput!
  data: LaunchUpdateWithoutMessageTempateInput!
}

input LaunchUpdateManyWithWhereWithoutMessageTempateInput {
  where: LaunchScalarWhereInput!
  data: LaunchUpdateManyMutationInput!
}

input MessageTemplateUpdateWithWhereUniqueWithoutUserInput {
  where: MessageTemplateWhereUniqueInput!
  data: MessageTemplateUpdateWithoutUserInput!
}

input MessageTemplateUpdateManyWithWhereWithoutUserInput {
  where: MessageTemplateScalarWhereInput!
  data: MessageTemplateUpdateManyMutationInput!
}

input MessageTemplateScalarWhereInput {
  AND: [MessageTemplateScalarWhereInput!]
  OR: [MessageTemplateScalarWhereInput!]
  NOT: [MessageTemplateScalarWhereInput!]
  id: IntFilter
  eventType: EnumEventTypeFilter
  companyType: EnumCompanyTypeFilter
  messageType: EnumMessageTypeFilter
  sendToAddress: StringNullableFilter
  title: StringNullableFilter
  subject: StringFilter
  text: StringFilter
  customerId: IntFilter
  userId: IntFilter
  delta: JsonNullableFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeNullableFilter
}

input MessageTemplateUpdateManyMutationInput {
  eventType: EnumEventTypeFieldUpdateOperationsInput
  companyType: EnumCompanyTypeFieldUpdateOperationsInput
  messageType: EnumMessageTypeFieldUpdateOperationsInput
  sendToAddress: NullableStringFieldUpdateOperationsInput
  title: NullableStringFieldUpdateOperationsInput
  subject: StringFieldUpdateOperationsInput
  text: StringFieldUpdateOperationsInput
  delta: JSON
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
}

input FeedbackUpdateManyWithoutUserInput {
  create: [FeedbackCreateWithoutUserInput!]
  connectOrCreate: [FeedbackCreateOrConnectWithoutUserInput!]
  upsert: [FeedbackUpsertWithWhereUniqueWithoutUserInput!]
  createMany: FeedbackCreateManyUserInputEnvelope
  connect: [FeedbackWhereUniqueInput!]
  set: [FeedbackWhereUniqueInput!]
  disconnect: [FeedbackWhereUniqueInput!]
  delete: [FeedbackWhereUniqueInput!]
  update: [FeedbackUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [FeedbackUpdateManyWithWhereWithoutUserInput!]
  deleteMany: [FeedbackScalarWhereInput!]
}

input FeedbackUpsertWithWhereUniqueWithoutUserInput {
  where: FeedbackWhereUniqueInput!
  update: FeedbackUpdateWithoutUserInput!
  create: FeedbackCreateWithoutUserInput!
}

input FeedbackUpdateWithoutUserInput {
  feedbackValue: FloatFieldUpdateOperationsInput
  feedback: StringFieldUpdateOperationsInput
}

input FloatFieldUpdateOperationsInput {
  set: Float
  increment: Float
  decrement: Float
  multiply: Float
  divide: Float
}

input FeedbackUpdateWithWhereUniqueWithoutUserInput {
  where: FeedbackWhereUniqueInput!
  data: FeedbackUpdateWithoutUserInput!
}

input FeedbackUpdateManyWithWhereWithoutUserInput {
  where: FeedbackScalarWhereInput!
  data: FeedbackUpdateManyMutationInput!
}

input FeedbackScalarWhereInput {
  AND: [FeedbackScalarWhereInput!]
  OR: [FeedbackScalarWhereInput!]
  NOT: [FeedbackScalarWhereInput!]
  feedbackId: IntFilter
  feedbackValue: FloatFilter
  feedback: StringFilter
  userId: IntFilter
}

input FeedbackUpdateManyMutationInput {
  feedbackValue: FloatFieldUpdateOperationsInput
  feedback: StringFieldUpdateOperationsInput
}

input ReferenceUpdateManyWithoutUserInput {
  create: [ReferenceCreateWithoutUserInput!]
  connectOrCreate: [ReferenceCreateOrConnectWithoutUserInput!]
  upsert: [ReferenceUpsertWithWhereUniqueWithoutUserInput!]
  createMany: ReferenceCreateManyUserInputEnvelope
  connect: [ReferenceWhereUniqueInput!]
  set: [ReferenceWhereUniqueInput!]
  disconnect: [ReferenceWhereUniqueInput!]
  delete: [ReferenceWhereUniqueInput!]
  update: [ReferenceUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [ReferenceUpdateManyWithWhereWithoutUserInput!]
  deleteMany: [ReferenceScalarWhereInput!]
}

input ReferenceUpsertWithWhereUniqueWithoutUserInput {
  where: ReferenceWhereUniqueInput!
  update: ReferenceUpdateWithoutUserInput!
  create: ReferenceCreateWithoutUserInput!
}

input ReferenceUpdateWithoutUserInput {
  offeredTo: BoolFieldUpdateOperationsInput
  servedAsReferenceBefore: BoolFieldUpdateOperationsInput
  servedAsReferenceAt: NullableDateTimeFieldUpdateOperationsInput
  notes: NullableStringFieldUpdateOperationsInput
  dealClosed: NullableBoolFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  company: CompanyUpdateOneRequiredWithoutReferencesInput
  servedAsReferenceFor: CompanyUpdateOneWithoutReferencesServedForInput
  offerOptions: ReferenceOnOfferOptionsUpdateManyWithoutReferenceInput
}

input ReferenceOnOfferOptionsUpdateManyWithoutReferenceInput {
  create: [ReferenceOnOfferOptionsCreateWithoutReferenceInput!]
  connectOrCreate: [ReferenceOnOfferOptionsCreateOrConnectWithoutReferenceInput!]
  upsert: [ReferenceOnOfferOptionsUpsertWithWhereUniqueWithoutReferenceInput!]
  createMany: ReferenceOnOfferOptionsCreateManyReferenceInputEnvelope
  connect: [ReferenceOnOfferOptionsWhereUniqueInput!]
  set: [ReferenceOnOfferOptionsWhereUniqueInput!]
  disconnect: [ReferenceOnOfferOptionsWhereUniqueInput!]
  delete: [ReferenceOnOfferOptionsWhereUniqueInput!]
  update: [ReferenceOnOfferOptionsUpdateWithWhereUniqueWithoutReferenceInput!]
  updateMany: [ReferenceOnOfferOptionsUpdateManyWithWhereWithoutReferenceInput!]
  deleteMany: [ReferenceOnOfferOptionsScalarWhereInput!]
}

input ReferenceOnOfferOptionsUpsertWithWhereUniqueWithoutReferenceInput {
  where: ReferenceOnOfferOptionsWhereUniqueInput!
  update: ReferenceOnOfferOptionsUpdateWithoutReferenceInput!
  create: ReferenceOnOfferOptionsCreateWithoutReferenceInput!
}

input ReferenceOnOfferOptionsUpdateWithoutReferenceInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  offerOption: OfferOptionUpdateOneRequiredWithoutReferencesInput
}

input OfferOptionUpdateOneRequiredWithoutReferencesInput {
  create: OfferOptionCreateWithoutReferencesInput
  connectOrCreate: OfferOptionCreateOrConnectWithoutReferencesInput
  upsert: OfferOptionUpsertWithoutReferencesInput
  connect: OfferOptionWhereUniqueInput
  update: OfferOptionUpdateWithoutReferencesInput
}

input OfferOptionUpsertWithoutReferencesInput {
  update: OfferOptionUpdateWithoutReferencesInput!
  create: OfferOptionCreateWithoutReferencesInput!
}

input OfferOptionUpdateWithoutReferencesInput {
  offerType: StringFieldUpdateOperationsInput
  status: BoolFieldUpdateOperationsInput
}

input ReferenceOnOfferOptionsUpdateWithWhereUniqueWithoutReferenceInput {
  where: ReferenceOnOfferOptionsWhereUniqueInput!
  data: ReferenceOnOfferOptionsUpdateWithoutReferenceInput!
}

input ReferenceOnOfferOptionsUpdateManyWithWhereWithoutReferenceInput {
  where: ReferenceOnOfferOptionsScalarWhereInput!
  data: ReferenceOnOfferOptionsUpdateManyMutationInput!
}

input ReferenceOnOfferOptionsScalarWhereInput {
  AND: [ReferenceOnOfferOptionsScalarWhereInput!]
  OR: [ReferenceOnOfferOptionsScalarWhereInput!]
  NOT: [ReferenceOnOfferOptionsScalarWhereInput!]
  createdAt: DateTimeFilter
  referenceId: IntFilter
  offerOptionId: IntFilter
}

input ReferenceOnOfferOptionsUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
}

input ReferenceUpdateWithWhereUniqueWithoutUserInput {
  where: ReferenceWhereUniqueInput!
  data: ReferenceUpdateWithoutUserInput!
}

input ReferenceUpdateManyWithWhereWithoutUserInput {
  where: ReferenceScalarWhereInput!
  data: ReferenceUpdateManyMutationInput!
}

input ReferenceScalarWhereInput {
  AND: [ReferenceScalarWhereInput!]
  OR: [ReferenceScalarWhereInput!]
  NOT: [ReferenceScalarWhereInput!]
  id: IntFilter
  companyId: IntFilter
  offeredTo: BoolFilter
  servedAsReferenceBefore: BoolFilter
  servedAsReferenceForId: IntNullableFilter
  servedAsReferenceAt: DateTimeNullableFilter
  notes: StringNullableFilter
  dealClosed: BoolNullableFilter
  createdAt: DateTimeFilter
  userId: IntFilter
}

input ReferenceUpdateManyMutationInput {
  offeredTo: BoolFieldUpdateOperationsInput
  servedAsReferenceBefore: BoolFieldUpdateOperationsInput
  servedAsReferenceAt: NullableDateTimeFieldUpdateOperationsInput
  notes: NullableStringFieldUpdateOperationsInput
  dealClosed: NullableBoolFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
}

input UserManagerUpdateManyWithoutUserInput {
  create: [UserManagerCreateWithoutUserInput!]
  connectOrCreate: [UserManagerCreateOrConnectWithoutUserInput!]
  upsert: [UserManagerUpsertWithWhereUniqueWithoutUserInput!]
  createMany: UserManagerCreateManyUserInputEnvelope
  connect: [UserManagerWhereUniqueInput!]
  set: [UserManagerWhereUniqueInput!]
  disconnect: [UserManagerWhereUniqueInput!]
  delete: [UserManagerWhereUniqueInput!]
  update: [UserManagerUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [UserManagerUpdateManyWithWhereWithoutUserInput!]
  deleteMany: [UserManagerScalarWhereInput!]
}

input UserManagerUpsertWithWhereUniqueWithoutUserInput {
  where: UserManagerWhereUniqueInput!
  update: UserManagerUpdateWithoutUserInput!
  create: UserManagerCreateWithoutUserInput!
}

input UserManagerUpdateWithoutUserInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  manager: UserUpdateOneRequiredWithoutUserReporteeInput
}

input UserUpdateOneRequiredWithoutUserReporteeInput {
  create: UserCreateWithoutUserReporteeInput
  connectOrCreate: UserCreateOrConnectWithoutUserReporteeInput
  upsert: UserUpsertWithoutUserReporteeInput
  connect: UserWhereUniqueInput
  update: UserUpdateWithoutUserReporteeInput
}

input UserUpsertWithoutUserReporteeInput {
  update: UserUpdateWithoutUserReporteeInput!
  create: UserCreateWithoutUserReporteeInput!
}

input UserUpdateWithoutUserReporteeInput {
  admin: BoolFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  passwordHash: NullableStringFieldUpdateOperationsInput
  passwordSalt: NullableStringFieldUpdateOperationsInput
  workPhone: NullableStringFieldUpdateOperationsInput
  mobilePhone: NullableStringFieldUpdateOperationsInput
  title: NullableStringFieldUpdateOperationsInput
  token: NullableStringFieldUpdateOperationsInput
  notificationSettings: JSON
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  dynamicFields: JSON
  active: BoolFieldUpdateOperationsInput
  oktaUserId: NullableIntFieldUpdateOperationsInput
  oktaManagerId: NullableIntFieldUpdateOperationsInput
  forgetPassword: NullableStringFieldUpdateOperationsInput
  csmStatus: BoolFieldUpdateOperationsInput
  crmStatus: BoolFieldUpdateOperationsInput
  customer: CustomerUpdateOneRequiredWithoutUsersInput
  leadSourceFor: CompanyUpdateManyWithoutLeadSourceInput
  primaryContactFor: CompanyUpdateManyWithoutPrimaryContactInput
  starred: CompanyStarredUpdateManyWithoutUserInput
  externalUser: ExternalUserUpdateManyWithoutUserInput
  groups: GroupUserUpdateManyWithoutUserInput
  Note: NoteUpdateManyWithoutUserInput
  roles: UserRoleUpdateManyWithoutUserInput
  userEvents: UserEventsUpdateManyWithoutUserInput
  UserCompanyRatings: UserCompanyRatingsUpdateManyWithoutUserInput
  noteUserTags: NoteUserTagsUpdateManyWithoutUserInput
  messageTemplate: MessageTemplateUpdateManyWithoutUserInput
  Feedback: FeedbackUpdateManyWithoutUserInput
  references: ReferenceUpdateManyWithoutUserInput
  userManager: UserManagerUpdateManyWithoutUserInput
}

input UserManagerUpdateWithWhereUniqueWithoutUserInput {
  where: UserManagerWhereUniqueInput!
  data: UserManagerUpdateWithoutUserInput!
}

input UserManagerUpdateManyWithWhereWithoutUserInput {
  where: UserManagerScalarWhereInput!
  data: UserManagerUpdateManyMutationInput!
}

input UserManagerScalarWhereInput {
  AND: [UserManagerScalarWhereInput!]
  OR: [UserManagerScalarWhereInput!]
  NOT: [UserManagerScalarWhereInput!]
  id: IntFilter
  userId: IntFilter
  managerId: IntFilter
  createdAt: DateTimeFilter
}

input UserManagerUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
}

input UserManagerUpdateManyWithoutManagerInput {
  create: [UserManagerCreateWithoutManagerInput!]
  connectOrCreate: [UserManagerCreateOrConnectWithoutManagerInput!]
  upsert: [UserManagerUpsertWithWhereUniqueWithoutManagerInput!]
  createMany: UserManagerCreateManyManagerInputEnvelope
  connect: [UserManagerWhereUniqueInput!]
  set: [UserManagerWhereUniqueInput!]
  disconnect: [UserManagerWhereUniqueInput!]
  delete: [UserManagerWhereUniqueInput!]
  update: [UserManagerUpdateWithWhereUniqueWithoutManagerInput!]
  updateMany: [UserManagerUpdateManyWithWhereWithoutManagerInput!]
  deleteMany: [UserManagerScalarWhereInput!]
}

input UserManagerUpsertWithWhereUniqueWithoutManagerInput {
  where: UserManagerWhereUniqueInput!
  update: UserManagerUpdateWithoutManagerInput!
  create: UserManagerCreateWithoutManagerInput!
}

input UserManagerUpdateWithoutManagerInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutUserManagerInput
}

input UserUpdateOneRequiredWithoutUserManagerInput {
  create: UserCreateWithoutUserManagerInput
  connectOrCreate: UserCreateOrConnectWithoutUserManagerInput
  upsert: UserUpsertWithoutUserManagerInput
  connect: UserWhereUniqueInput
  update: UserUpdateWithoutUserManagerInput
}

input UserUpsertWithoutUserManagerInput {
  update: UserUpdateWithoutUserManagerInput!
  create: UserCreateWithoutUserManagerInput!
}

input UserUpdateWithoutUserManagerInput {
  admin: BoolFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  passwordHash: NullableStringFieldUpdateOperationsInput
  passwordSalt: NullableStringFieldUpdateOperationsInput
  workPhone: NullableStringFieldUpdateOperationsInput
  mobilePhone: NullableStringFieldUpdateOperationsInput
  title: NullableStringFieldUpdateOperationsInput
  token: NullableStringFieldUpdateOperationsInput
  notificationSettings: JSON
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  dynamicFields: JSON
  active: BoolFieldUpdateOperationsInput
  oktaUserId: NullableIntFieldUpdateOperationsInput
  oktaManagerId: NullableIntFieldUpdateOperationsInput
  forgetPassword: NullableStringFieldUpdateOperationsInput
  csmStatus: BoolFieldUpdateOperationsInput
  crmStatus: BoolFieldUpdateOperationsInput
  customer: CustomerUpdateOneRequiredWithoutUsersInput
  leadSourceFor: CompanyUpdateManyWithoutLeadSourceInput
  primaryContactFor: CompanyUpdateManyWithoutPrimaryContactInput
  starred: CompanyStarredUpdateManyWithoutUserInput
  externalUser: ExternalUserUpdateManyWithoutUserInput
  groups: GroupUserUpdateManyWithoutUserInput
  Note: NoteUpdateManyWithoutUserInput
  roles: UserRoleUpdateManyWithoutUserInput
  userEvents: UserEventsUpdateManyWithoutUserInput
  UserCompanyRatings: UserCompanyRatingsUpdateManyWithoutUserInput
  noteUserTags: NoteUserTagsUpdateManyWithoutUserInput
  messageTemplate: MessageTemplateUpdateManyWithoutUserInput
  Feedback: FeedbackUpdateManyWithoutUserInput
  references: ReferenceUpdateManyWithoutUserInput
  userReportee: UserManagerUpdateManyWithoutManagerInput
}

input UserManagerUpdateWithWhereUniqueWithoutManagerInput {
  where: UserManagerWhereUniqueInput!
  data: UserManagerUpdateWithoutManagerInput!
}

input UserManagerUpdateManyWithWhereWithoutManagerInput {
  where: UserManagerScalarWhereInput!
  data: UserManagerUpdateManyMutationInput!
}

input NoteUserTagsUpdateWithWhereUniqueWithoutNoteInput {
  where: NoteUserTagsWhereUniqueInput!
  data: NoteUserTagsUpdateWithoutNoteInput!
}

input NoteUserTagsUpdateManyWithWhereWithoutNoteInput {
  where: NoteUserTagsScalarWhereInput!
  data: NoteUserTagsUpdateManyMutationInput!
}

input NoteUserTagsScalarWhereInput {
  AND: [NoteUserTagsScalarWhereInput!]
  OR: [NoteUserTagsScalarWhereInput!]
  NOT: [NoteUserTagsScalarWhereInput!]
  noteId: IntFilter
  userId: IntFilter
  createdAt: DateTimeFilter
}

input NoteUserTagsUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
}

input EventUpdateManyWithoutMessageInput {
  create: [EventCreateWithoutMessageInput!]
  connectOrCreate: [EventCreateOrConnectWithoutMessageInput!]
  upsert: [EventUpsertWithWhereUniqueWithoutMessageInput!]
  createMany: EventCreateManyMessageInputEnvelope
  connect: [EventWhereUniqueInput!]
  set: [EventWhereUniqueInput!]
  disconnect: [EventWhereUniqueInput!]
  delete: [EventWhereUniqueInput!]
  update: [EventUpdateWithWhereUniqueWithoutMessageInput!]
  updateMany: [EventUpdateManyWithWhereWithoutMessageInput!]
  deleteMany: [EventScalarWhereInput!]
}

input EventUpsertWithWhereUniqueWithoutMessageInput {
  where: EventWhereUniqueInput!
  update: EventUpdateWithoutMessageInput!
  create: EventCreateWithoutMessageInput!
}

input EventUpdateWithoutMessageInput {
  data: JSON
  notifiedAt: NullableDateTimeFieldUpdateOperationsInput
  text: NullableStringFieldUpdateOperationsInput
  type: EnumEventTypeFieldUpdateOperationsInput
  needsAttention: NullableEnumEventAttentionFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  company: CompanyUpdateOneWithoutEventsInput
  customer: CustomerUpdateOneRequiredWithoutEventsInput
  Launch: LaunchUpdateManyWithoutEventsInput
  notes: NoteUpdateManyWithoutEventsInput
  userEvents: UserEventsUpdateManyWithoutEventInput
  parentEvent: EventUpdateOneWithoutChildEventsInput
  childEvents: EventUpdateManyWithoutParentEventInput
}

input EventUpdateManyWithoutParentEventInput {
  create: [EventCreateWithoutParentEventInput!]
  connectOrCreate: [EventCreateOrConnectWithoutParentEventInput!]
  upsert: [EventUpsertWithWhereUniqueWithoutParentEventInput!]
  createMany: EventCreateManyParentEventInputEnvelope
  connect: [EventWhereUniqueInput!]
  set: [EventWhereUniqueInput!]
  disconnect: [EventWhereUniqueInput!]
  delete: [EventWhereUniqueInput!]
  update: [EventUpdateWithWhereUniqueWithoutParentEventInput!]
  updateMany: [EventUpdateManyWithWhereWithoutParentEventInput!]
  deleteMany: [EventScalarWhereInput!]
}

input EventUpsertWithWhereUniqueWithoutParentEventInput {
  where: EventWhereUniqueInput!
  update: EventUpdateWithoutParentEventInput!
  create: EventCreateWithoutParentEventInput!
}

input EventUpdateWithoutParentEventInput {
  data: JSON
  notifiedAt: NullableDateTimeFieldUpdateOperationsInput
  text: NullableStringFieldUpdateOperationsInput
  type: EnumEventTypeFieldUpdateOperationsInput
  needsAttention: NullableEnumEventAttentionFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  company: CompanyUpdateOneWithoutEventsInput
  customer: CustomerUpdateOneRequiredWithoutEventsInput
  Launch: LaunchUpdateManyWithoutEventsInput
  notes: NoteUpdateManyWithoutEventsInput
  userEvents: UserEventsUpdateManyWithoutEventInput
  childEvents: EventUpdateManyWithoutParentEventInput
  message: NoteUpdateOneWithoutEventInput
}

input NoteUpdateOneWithoutEventInput {
  create: NoteCreateWithoutEventInput
  connectOrCreate: NoteCreateOrConnectWithoutEventInput
  upsert: NoteUpsertWithoutEventInput
  connect: NoteWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: NoteUpdateWithoutEventInput
}

input NoteUpsertWithoutEventInput {
  update: NoteUpdateWithoutEventInput!
  create: NoteCreateWithoutEventInput!
}

input NoteUpdateWithoutEventInput {
  readAt: NullableDateTimeFieldUpdateOperationsInput
  flaggedAt: NullableDateTimeFieldUpdateOperationsInput
  subject: StringFieldUpdateOperationsInput
  text: StringFieldUpdateOperationsInput
  allCanView: BoolFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  delta: JSON
  company: CompanyUpdateOneWithoutNotesInput
  customer: CustomerUpdateOneWithoutNotesInput
  events: EventUpdateOneWithoutNotesInput
  user: UserUpdateOneWithoutNoteInput
  noteUserTags: NoteUserTagsUpdateManyWithoutNoteInput
  noteGroupTags: NoteGroupTagsUpdateManyWithoutNoteInput
}

input EventUpdateWithWhereUniqueWithoutParentEventInput {
  where: EventWhereUniqueInput!
  data: EventUpdateWithoutParentEventInput!
}

input EventUpdateManyWithWhereWithoutParentEventInput {
  where: EventScalarWhereInput!
  data: EventUpdateManyMutationInput!
}

input EventScalarWhereInput {
  AND: [EventScalarWhereInput!]
  OR: [EventScalarWhereInput!]
  NOT: [EventScalarWhereInput!]
  id: IntFilter
  customerId: IntFilter
  data: JsonNullableFilter
  notifiedAt: DateTimeNullableFilter
  text: StringNullableFilter
  type: EnumEventTypeFilter
  companyId: IntNullableFilter
  needsAttention: EnumEventAttentionNullableFilter
  createdAt: DateTimeFilter
  parentEventId: IntNullableFilter
  messageId: IntNullableFilter
}

input EventUpdateManyMutationInput {
  data: JSON
  notifiedAt: NullableDateTimeFieldUpdateOperationsInput
  text: NullableStringFieldUpdateOperationsInput
  type: EnumEventTypeFieldUpdateOperationsInput
  needsAttention: NullableEnumEventAttentionFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
}

input EventUpdateWithWhereUniqueWithoutMessageInput {
  where: EventWhereUniqueInput!
  data: EventUpdateWithoutMessageInput!
}

input EventUpdateManyWithWhereWithoutMessageInput {
  where: EventScalarWhereInput!
  data: EventUpdateManyMutationInput!
}

input NoteGroupTagsUpdateWithWhereUniqueWithoutGroupInput {
  where: NoteGroupTagsWhereUniqueInput!
  data: NoteGroupTagsUpdateWithoutGroupInput!
}

input NoteGroupTagsUpdateManyWithWhereWithoutGroupInput {
  where: NoteGroupTagsScalarWhereInput!
  data: NoteGroupTagsUpdateManyMutationInput!
}

input NoteGroupTagsScalarWhereInput {
  AND: [NoteGroupTagsScalarWhereInput!]
  OR: [NoteGroupTagsScalarWhereInput!]
  NOT: [NoteGroupTagsScalarWhereInput!]
  noteId: IntFilter
  groupId: IntFilter
  createdAt: DateTimeFilter
}

input NoteGroupTagsUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
}

input GroupUpdateManyWithoutParentInput {
  create: [GroupCreateWithoutParentInput!]
  connectOrCreate: [GroupCreateOrConnectWithoutParentInput!]
  upsert: [GroupUpsertWithWhereUniqueWithoutParentInput!]
  createMany: GroupCreateManyParentInputEnvelope
  connect: [GroupWhereUniqueInput!]
  set: [GroupWhereUniqueInput!]
  disconnect: [GroupWhereUniqueInput!]
  delete: [GroupWhereUniqueInput!]
  update: [GroupUpdateWithWhereUniqueWithoutParentInput!]
  updateMany: [GroupUpdateManyWithWhereWithoutParentInput!]
  deleteMany: [GroupScalarWhereInput!]
}

input GroupUpsertWithWhereUniqueWithoutParentInput {
  where: GroupWhereUniqueInput!
  update: GroupUpdateWithoutParentInput!
  create: GroupCreateWithoutParentInput!
}

input GroupUpdateWithoutParentInput {
  name: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  customer: CustomerUpdateOneRequiredWithoutGroupsInput
  users: GroupUserUpdateManyWithoutGroupInput
  children: GroupUpdateManyWithoutParentInput
  noteGroupTags: NoteGroupTagsUpdateManyWithoutGroupInput
}

input GroupUpdateWithWhereUniqueWithoutParentInput {
  where: GroupWhereUniqueInput!
  data: GroupUpdateWithoutParentInput!
}

input GroupUpdateManyWithWhereWithoutParentInput {
  where: GroupScalarWhereInput!
  data: GroupUpdateManyMutationInput!
}

input GroupScalarWhereInput {
  AND: [GroupScalarWhereInput!]
  OR: [GroupScalarWhereInput!]
  NOT: [GroupScalarWhereInput!]
  id: IntFilter
  customerId: IntFilter
  name: StringFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  parentId: IntNullableFilter
}

input GroupUpdateManyMutationInput {
  name: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input NoteGroupTagsUpdateWithWhereUniqueWithoutNoteInput {
  where: NoteGroupTagsWhereUniqueInput!
  data: NoteGroupTagsUpdateWithoutNoteInput!
}

input NoteGroupTagsUpdateManyWithWhereWithoutNoteInput {
  where: NoteGroupTagsScalarWhereInput!
  data: NoteGroupTagsUpdateManyMutationInput!
}

input NoteUserTagsUpdateWithWhereUniqueWithoutUserInput {
  where: NoteUserTagsWhereUniqueInput!
  data: NoteUserTagsUpdateWithoutUserInput!
}

input NoteUserTagsUpdateManyWithWhereWithoutUserInput {
  where: NoteUserTagsScalarWhereInput!
  data: NoteUserTagsUpdateManyMutationInput!
}

input MessageTemplateUpdateWithWhereUniqueWithoutCustomerInput {
  where: MessageTemplateWhereUniqueInput!
  data: MessageTemplateUpdateWithoutCustomerInput!
}

input MessageTemplateUpdateManyWithWhereWithoutCustomerInput {
  where: MessageTemplateScalarWhereInput!
  data: MessageTemplateUpdateManyMutationInput!
}

input ListCompanyUpdateWithWhereUniqueWithoutCompanyInput {
  where: ListCompanyWhereUniqueInput!
  data: ListCompanyUpdateWithoutCompanyInput!
}

input ListCompanyUpdateManyWithWhereWithoutCompanyInput {
  where: ListCompanyScalarWhereInput!
  data: ListCompanyUpdateManyMutationInput!
}

input UserCompanyRatingsUpdateWithWhereUniqueWithoutUserInput {
  where: UserCompanyRatingsWhereUniqueInput!
  data: UserCompanyRatingsUpdateWithoutUserInput!
}

input UserCompanyRatingsUpdateManyWithWhereWithoutUserInput {
  where: UserCompanyRatingsScalarWhereInput!
  data: UserCompanyRatingsUpdateManyMutationInput!
}

input UserCompanyRatingsScalarWhereInput {
  AND: [UserCompanyRatingsScalarWhereInput!]
  OR: [UserCompanyRatingsScalarWhereInput!]
  NOT: [UserCompanyRatingsScalarWhereInput!]
  id: IntFilter
  userId: IntFilter
  ratingId: IntFilter
  companyId: IntFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
}

input UserCompanyRatingsUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input UserUpdateWithWhereUniqueWithoutCustomerInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutCustomerInput!
}

input UserUpdateManyWithWhereWithoutCustomerInput {
  where: UserScalarWhereInput!
  data: UserUpdateManyMutationInput!
}

input UserScalarWhereInput {
  AND: [UserScalarWhereInput!]
  OR: [UserScalarWhereInput!]
  NOT: [UserScalarWhereInput!]
  id: IntFilter
  admin: BoolFilter
  customerId: IntFilter
  email: StringFilter
  name: StringFilter
  passwordHash: StringNullableFilter
  passwordSalt: StringNullableFilter
  workPhone: StringNullableFilter
  mobilePhone: StringNullableFilter
  title: StringNullableFilter
  token: StringNullableFilter
  notificationSettings: JsonNullableFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  dynamicFields: JsonNullableFilter
  active: BoolFilter
  oktaUserId: IntNullableFilter
  oktaManagerId: IntNullableFilter
  forgetPassword: StringNullableFilter
  csmStatus: BoolFilter
  crmStatus: BoolFilter
}

input UserUpdateManyMutationInput {
  admin: BoolFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  passwordHash: NullableStringFieldUpdateOperationsInput
  passwordSalt: NullableStringFieldUpdateOperationsInput
  workPhone: NullableStringFieldUpdateOperationsInput
  mobilePhone: NullableStringFieldUpdateOperationsInput
  title: NullableStringFieldUpdateOperationsInput
  token: NullableStringFieldUpdateOperationsInput
  notificationSettings: JSON
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  dynamicFields: JSON
  active: BoolFieldUpdateOperationsInput
  oktaUserId: NullableIntFieldUpdateOperationsInput
  oktaManagerId: NullableIntFieldUpdateOperationsInput
  forgetPassword: NullableStringFieldUpdateOperationsInput
  csmStatus: BoolFieldUpdateOperationsInput
  crmStatus: BoolFieldUpdateOperationsInput
}

input UserRoleUpdateWithWhereUniqueWithoutUserInput {
  where: UserRoleWhereUniqueInput!
  data: UserRoleUpdateWithoutUserInput!
}

input UserRoleUpdateManyWithWhereWithoutUserInput {
  where: UserRoleScalarWhereInput!
  data: UserRoleUpdateManyMutationInput!
}

input UserRoleScalarWhereInput {
  AND: [UserRoleScalarWhereInput!]
  OR: [UserRoleScalarWhereInput!]
  NOT: [UserRoleScalarWhereInput!]
  id: IntFilter
  roleId: IntFilter
  userId: IntFilter
  createdAt: DateTimeFilter
}

input UserRoleUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
}

input UserEventsUpdateWithWhereUniqueWithoutEventInput {
  where: UserEventsWhereUniqueInput!
  data: UserEventsUpdateWithoutEventInput!
}

input UserEventsUpdateManyWithWhereWithoutEventInput {
  where: UserEventsScalarWhereInput!
  data: UserEventsUpdateManyMutationInput!
}

input UserEventsScalarWhereInput {
  AND: [UserEventsScalarWhereInput!]
  OR: [UserEventsScalarWhereInput!]
  NOT: [UserEventsScalarWhereInput!]
  id: IntFilter
  userId: IntFilter
  readAt: DateTimeNullableFilter
  flaggedAt: IntNullableFilter
  hideAt: DateTimeNullableFilter
  eventId: IntFilter
  createdAt: DateTimeFilter
}

input UserEventsUpdateManyMutationInput {
  readAt: NullableDateTimeFieldUpdateOperationsInput
  flaggedAt: NullableIntFieldUpdateOperationsInput
  hideAt: NullableDateTimeFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
}

input UserEventsUpdateWithWhereUniqueWithoutUserInput {
  where: UserEventsWhereUniqueInput!
  data: UserEventsUpdateWithoutUserInput!
}

input UserEventsUpdateManyWithWhereWithoutUserInput {
  where: UserEventsScalarWhereInput!
  data: UserEventsUpdateManyMutationInput!
}

input UserRoleUpdateWithWhereUniqueWithoutRoleInput {
  where: UserRoleWhereUniqueInput!
  data: UserRoleUpdateWithoutRoleInput!
}

input UserRoleUpdateManyWithWhereWithoutRoleInput {
  where: UserRoleScalarWhereInput!
  data: UserRoleUpdateManyMutationInput!
}

input RoleUpdateWithWhereUniqueWithoutCustomerInput {
  where: RoleWhereUniqueInput!
  data: RoleUpdateWithoutCustomerInput!
}

input RoleUpdateManyWithWhereWithoutCustomerInput {
  where: RoleScalarWhereInput!
  data: RoleUpdateManyMutationInput!
}

input RoleScalarWhereInput {
  AND: [RoleScalarWhereInput!]
  OR: [RoleScalarWhereInput!]
  NOT: [RoleScalarWhereInput!]
  id: IntFilter
  name: StringFilter
  capabilities: IntNullableListFilter
  customerId: IntFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
}

input RoleUpdateManyMutationInput {
  name: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  capabilities: RoleUpdatecapabilitiesInput
}

input GroupUserUpdateWithWhereUniqueWithoutUserInput {
  where: GroupUserWhereUniqueInput!
  data: GroupUserUpdateWithoutUserInput!
}

input GroupUserUpdateManyWithWhereWithoutUserInput {
  where: GroupUserScalarWhereInput!
  data: GroupUserUpdateManyMutationInput!
}

input GroupUserScalarWhereInput {
  AND: [GroupUserScalarWhereInput!]
  OR: [GroupUserScalarWhereInput!]
  NOT: [GroupUserScalarWhereInput!]
  dummy: IntNullableFilter
  groupId: IntFilter
  userId: IntFilter
}

input GroupUserUpdateManyMutationInput {
  dummy: NullableIntFieldUpdateOperationsInput
}

input NoteUpdateWithWhereUniqueWithoutCustomerInput {
  where: NoteWhereUniqueInput!
  data: NoteUpdateWithoutCustomerInput!
}

input NoteUpdateManyWithWhereWithoutCustomerInput {
  where: NoteScalarWhereInput!
  data: NoteUpdateManyMutationInput!
}

input NoteScalarWhereInput {
  AND: [NoteScalarWhereInput!]
  OR: [NoteScalarWhereInput!]
  NOT: [NoteScalarWhereInput!]
  id: IntFilter
  customerId: IntNullableFilter
  eventId: IntNullableFilter
  readAt: DateTimeNullableFilter
  flaggedAt: DateTimeNullableFilter
  subject: StringFilter
  text: StringFilter
  companyId: IntNullableFilter
  createdBy: IntNullableFilter
  allCanView: BoolFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  delta: JsonNullableFilter
}

input NoteUpdateManyMutationInput {
  readAt: NullableDateTimeFieldUpdateOperationsInput
  flaggedAt: NullableDateTimeFieldUpdateOperationsInput
  subject: StringFieldUpdateOperationsInput
  text: StringFieldUpdateOperationsInput
  allCanView: BoolFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  delta: JSON
}

input LaunchUpdateWithWhereUniqueWithoutEventsInput {
  where: LaunchWhereUniqueInput!
  data: LaunchUpdateWithoutEventsInput!
}

input LaunchUpdateManyWithWhereWithoutEventsInput {
  where: LaunchScalarWhereInput!
  data: LaunchUpdateManyMutationInput!
}

input NoteUpdateWithWhereUniqueWithoutUserInput {
  where: NoteWhereUniqueInput!
  data: NoteUpdateWithoutUserInput!
}

input NoteUpdateManyWithWhereWithoutUserInput {
  where: NoteScalarWhereInput!
  data: NoteUpdateManyMutationInput!
}

input GroupUserUpdateWithWhereUniqueWithoutGroupInput {
  where: GroupUserWhereUniqueInput!
  data: GroupUserUpdateWithoutGroupInput!
}

input GroupUserUpdateManyWithWhereWithoutGroupInput {
  where: GroupUserScalarWhereInput!
  data: GroupUserUpdateManyMutationInput!
}

input GroupUpdateWithWhereUniqueWithoutCustomerInput {
  where: GroupWhereUniqueInput!
  data: GroupUpdateWithoutCustomerInput!
}

input GroupUpdateManyWithWhereWithoutCustomerInput {
  where: GroupScalarWhereInput!
  data: GroupUpdateManyMutationInput!
}

input ExternalGroupMemberUpdateWithWhereUniqueWithoutUserInput {
  where: ExternalGroupMemberWhereUniqueInput!
  data: ExternalGroupMemberUpdateWithoutUserInput!
}

input ExternalGroupMemberUpdateManyWithWhereWithoutUserInput {
  where: ExternalGroupMemberScalarWhereInput!
  data: ExternalGroupMemberUpdateManyMutationInput!
}

input ExternalGroupMemberScalarWhereInput {
  AND: [ExternalGroupMemberScalarWhereInput!]
  OR: [ExternalGroupMemberScalarWhereInput!]
  NOT: [ExternalGroupMemberScalarWhereInput!]
  customerId: IntFilter
  groupId: StringFilter
  source: EnumCustomerIntegrationTypeFilter
  userId: StringFilter
  createdAt: DateTimeFilter
}

input ExternalGroupMemberUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
}

input ExternalUserUpdateWithWhereUniqueWithoutUserInput {
  where: ExternalUserWhereUniqueInput!
  data: ExternalUserUpdateWithoutUserInput!
}

input ExternalUserUpdateManyWithWhereWithoutUserInput {
  where: ExternalUserScalarWhereInput!
  data: ExternalUserUpdateManyMutationInput!
}

input ExternalUserScalarWhereInput {
  AND: [ExternalUserScalarWhereInput!]
  OR: [ExternalUserScalarWhereInput!]
  NOT: [ExternalUserScalarWhereInput!]
  customerId: IntFilter
  department: StringNullableFilter
  division: StringNullableFilter
  email: StringNullableFilter
  employeeNumber: StringNullableFilter
  externalId: StringFilter
  name: StringNullableFilter
  source: EnumCustomerIntegrationTypeFilter
  userId: IntNullableFilter
  title: StringNullableFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
}

input ExternalUserUpdateManyMutationInput {
  department: NullableStringFieldUpdateOperationsInput
  division: NullableStringFieldUpdateOperationsInput
  email: NullableStringFieldUpdateOperationsInput
  employeeNumber: NullableStringFieldUpdateOperationsInput
  externalId: StringFieldUpdateOperationsInput
  name: NullableStringFieldUpdateOperationsInput
  source: EnumCustomerIntegrationTypeFieldUpdateOperationsInput
  title: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input UserCompanyRatingsUpdateWithWhereUniqueWithoutCompanyInput {
  where: UserCompanyRatingsWhereUniqueInput!
  data: UserCompanyRatingsUpdateWithoutCompanyInput!
}

input UserCompanyRatingsUpdateManyWithWhereWithoutCompanyInput {
  where: UserCompanyRatingsScalarWhereInput!
  data: UserCompanyRatingsUpdateManyMutationInput!
}

input NoteUpdateWithWhereUniqueWithoutEventsInput {
  where: NoteWhereUniqueInput!
  data: NoteUpdateWithoutEventsInput!
}

input NoteUpdateManyWithWhereWithoutEventsInput {
  where: NoteScalarWhereInput!
  data: NoteUpdateManyMutationInput!
}

input LaunchContactsUpdateWithWhereUniqueWithoutContactInput {
  where: LaunchContactsWhereUniqueInput!
  data: LaunchContactsUpdateWithoutContactInput!
}

input LaunchContactsUpdateManyWithWhereWithoutContactInput {
  where: LaunchContactsScalarWhereInput!
  data: LaunchContactsUpdateManyMutationInput!
}

input ContactsUpdateWithWhereUniqueWithoutCompanyInput {
  where: ContactsWhereUniqueInput!
  data: ContactsUpdateWithoutCompanyInput!
}

input ContactsUpdateManyWithWhereWithoutCompanyInput {
  where: ContactsScalarWhereInput!
  data: ContactsUpdateManyMutationInput!
}

input ContactsScalarWhereInput {
  AND: [ContactsScalarWhereInput!]
  OR: [ContactsScalarWhereInput!]
  NOT: [ContactsScalarWhereInput!]
  id: IntFilter
  email: StringFilter
  name: StringFilter
  workPhone: StringNullableFilter
  mobilePhone: StringNullableFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  primary: BoolFilter
  image: StringNullableFilter
  companyId: IntNullableFilter
}

input ContactsUpdateManyMutationInput {
  email: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  workPhone: NullableStringFieldUpdateOperationsInput
  mobilePhone: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  primary: BoolFieldUpdateOperationsInput
  image: NullableStringFieldUpdateOperationsInput
}

input CompanyStarredUpdateWithWhereUniqueWithoutUserInput {
  where: CompanyStarredWhereUniqueInput!
  data: CompanyStarredUpdateWithoutUserInput!
}

input CompanyStarredUpdateManyWithWhereWithoutUserInput {
  where: CompanyStarredScalarWhereInput!
  data: CompanyStarredUpdateManyMutationInput!
}

input CompanyStarredScalarWhereInput {
  AND: [CompanyStarredScalarWhereInput!]
  OR: [CompanyStarredScalarWhereInput!]
  NOT: [CompanyStarredScalarWhereInput!]
  dummy: IntNullableFilter
  createdAt: DateTimeFilter
  companyId: IntFilter
  userId: IntFilter
}

input CompanyStarredUpdateManyMutationInput {
  dummy: NullableIntFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
}

input ExternalUserUpdateWithWhereUniqueWithoutCustomerInput {
  where: ExternalUserWhereUniqueInput!
  data: ExternalUserUpdateWithoutCustomerInput!
}

input ExternalUserUpdateManyWithWhereWithoutCustomerInput {
  where: ExternalUserScalarWhereInput!
  data: ExternalUserUpdateManyMutationInput!
}

input NoteUpdateWithWhereUniqueWithoutCompanyInput {
  where: NoteWhereUniqueInput!
  data: NoteUpdateWithoutCompanyInput!
}

input NoteUpdateManyWithWhereWithoutCompanyInput {
  where: NoteScalarWhereInput!
  data: NoteUpdateManyMutationInput!
}

input EventUpdateWithWhereUniqueWithoutCustomerInput {
  where: EventWhereUniqueInput!
  data: EventUpdateWithoutCustomerInput!
}

input EventUpdateManyWithWhereWithoutCustomerInput {
  where: EventScalarWhereInput!
  data: EventUpdateManyMutationInput!
}

input ExternalGroupMemberUpdateWithWhereUniqueWithoutGroupInput {
  where: ExternalGroupMemberWhereUniqueInput!
  data: ExternalGroupMemberUpdateWithoutGroupInput!
}

input ExternalGroupMemberUpdateManyWithWhereWithoutGroupInput {
  where: ExternalGroupMemberScalarWhereInput!
  data: ExternalGroupMemberUpdateManyMutationInput!
}

input ExternalGroupUpdateWithWhereUniqueWithoutCustomerInput {
  where: ExternalGroupWhereUniqueInput!
  data: ExternalGroupUpdateWithoutCustomerInput!
}

input ExternalGroupUpdateManyWithWhereWithoutCustomerInput {
  where: ExternalGroupScalarWhereInput!
  data: ExternalGroupUpdateManyMutationInput!
}

input ExternalGroupScalarWhereInput {
  AND: [ExternalGroupScalarWhereInput!]
  OR: [ExternalGroupScalarWhereInput!]
  NOT: [ExternalGroupScalarWhereInput!]
  customerId: IntFilter
  externalId: StringFilter
  developerName: StringFilter
  name: StringNullableFilter
  ownerId: StringNullableFilter
  source: EnumCustomerIntegrationTypeFilter
  type: StringNullableFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
}

input ExternalGroupUpdateManyMutationInput {
  externalId: StringFieldUpdateOperationsInput
  developerName: StringFieldUpdateOperationsInput
  name: NullableStringFieldUpdateOperationsInput
  ownerId: NullableStringFieldUpdateOperationsInput
  source: EnumCustomerIntegrationTypeFieldUpdateOperationsInput
  type: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input EventUpdateWithWhereUniqueWithoutCompanyInput {
  where: EventWhereUniqueInput!
  data: EventUpdateWithoutCompanyInput!
}

input EventUpdateManyWithWhereWithoutCompanyInput {
  where: EventScalarWhereInput!
  data: EventUpdateManyMutationInput!
}

input CompanyUpdateWithWhereUniqueWithoutPrimaryContactInput {
  where: CompanyWhereUniqueInput!
  data: CompanyUpdateWithoutPrimaryContactInput!
}

input CompanyUpdateManyWithWhereWithoutPrimaryContactInput {
  where: CompanyScalarWhereInput!
  data: CompanyUpdateManyMutationInput!
}

input CompanyScalarWhereInput {
  AND: [CompanyScalarWhereInput!]
  OR: [CompanyScalarWhereInput!]
  NOT: [CompanyScalarWhereInput!]
  id: IntFilter
  leadSourceId: IntNullableFilter
  annualRecurringRevenue: IntNullableFilter
  customerId: IntFilter
  expectedToCloseAt: DateTimeNullableFilter
  fiscalYearStartMonth: IntNullableFilter
  name: StringFilter
  companyType: EnumCompanyTypeFilter
  primaryContactId: IntNullableFilter
  seatSize: IntNullableFilter
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  fiscalYear: IntFilter
  parentId: IntNullableFilter
  accountId: IntFilter
  renewalDate: DateTimeNullableFilter
  referredOn: DateTimeNullableFilter
  latestReferenceId: IntNullableFilter
}

input CompanyUpdateManyMutationInput {
  annualRecurringRevenue: NullableIntFieldUpdateOperationsInput
  expectedToCloseAt: NullableDateTimeFieldUpdateOperationsInput
  fiscalYearStartMonth: NullableIntFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  companyType: EnumCompanyTypeFieldUpdateOperationsInput
  seatSize: NullableIntFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  fiscalYear: IntFieldUpdateOperationsInput
  renewalDate: NullableDateTimeFieldUpdateOperationsInput
  referredOn: NullableDateTimeFieldUpdateOperationsInput
  latestReferenceId: NullableIntFieldUpdateOperationsInput
}

input CompanyStarredUpdateWithWhereUniqueWithoutCompanyInput {
  where: CompanyStarredWhereUniqueInput!
  data: CompanyStarredUpdateWithoutCompanyInput!
}

input CompanyStarredUpdateManyWithWhereWithoutCompanyInput {
  where: CompanyStarredScalarWhereInput!
  data: CompanyStarredUpdateManyMutationInput!
}

input UserUpdateOneWithoutReferencesInput {
  create: UserCreateWithoutReferencesInput
  connectOrCreate: UserCreateOrConnectWithoutReferencesInput
  upsert: UserUpsertWithoutReferencesInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: UserUpdateWithoutReferencesInput
}

input UserUpsertWithoutReferencesInput {
  update: UserUpdateWithoutReferencesInput!
  create: UserCreateWithoutReferencesInput!
}

input UserUpdateWithoutReferencesInput {
  admin: BoolFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  passwordHash: NullableStringFieldUpdateOperationsInput
  passwordSalt: NullableStringFieldUpdateOperationsInput
  workPhone: NullableStringFieldUpdateOperationsInput
  mobilePhone: NullableStringFieldUpdateOperationsInput
  title: NullableStringFieldUpdateOperationsInput
  token: NullableStringFieldUpdateOperationsInput
  notificationSettings: JSON
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  dynamicFields: JSON
  active: BoolFieldUpdateOperationsInput
  oktaUserId: NullableIntFieldUpdateOperationsInput
  oktaManagerId: NullableIntFieldUpdateOperationsInput
  forgetPassword: NullableStringFieldUpdateOperationsInput
  csmStatus: BoolFieldUpdateOperationsInput
  crmStatus: BoolFieldUpdateOperationsInput
  customer: CustomerUpdateOneRequiredWithoutUsersInput
  leadSourceFor: CompanyUpdateManyWithoutLeadSourceInput
  primaryContactFor: CompanyUpdateManyWithoutPrimaryContactInput
  starred: CompanyStarredUpdateManyWithoutUserInput
  externalUser: ExternalUserUpdateManyWithoutUserInput
  groups: GroupUserUpdateManyWithoutUserInput
  Note: NoteUpdateManyWithoutUserInput
  roles: UserRoleUpdateManyWithoutUserInput
  userEvents: UserEventsUpdateManyWithoutUserInput
  UserCompanyRatings: UserCompanyRatingsUpdateManyWithoutUserInput
  noteUserTags: NoteUserTagsUpdateManyWithoutUserInput
  messageTemplate: MessageTemplateUpdateManyWithoutUserInput
  Feedback: FeedbackUpdateManyWithoutUserInput
  userManager: UserManagerUpdateManyWithoutUserInput
  userReportee: UserManagerUpdateManyWithoutManagerInput
}

input ReferenceUpdateWithWhereUniqueWithoutServedAsReferenceForInput {
  where: ReferenceWhereUniqueInput!
  data: ReferenceUpdateWithoutServedAsReferenceForInput!
}

input ReferenceUpdateManyWithWhereWithoutServedAsReferenceForInput {
  where: ReferenceScalarWhereInput!
  data: ReferenceUpdateManyMutationInput!
}

input CompanyUpdateWithWhereUniqueWithoutCompanyParentInput {
  where: CompanyWhereUniqueInput!
  data: CompanyUpdateWithoutCompanyParentInput!
}

input CompanyUpdateManyWithWhereWithoutCompanyParentInput {
  where: CompanyScalarWhereInput!
  data: CompanyUpdateManyMutationInput!
}

input ReferenceUpdateWithWhereUniqueWithoutCompanyInput {
  where: ReferenceWhereUniqueInput!
  data: ReferenceUpdateWithoutCompanyInput!
}

input ReferenceUpdateManyWithWhereWithoutCompanyInput {
  where: ReferenceScalarWhereInput!
  data: ReferenceUpdateManyMutationInput!
}

input CompanyUpdateWithWhereUniqueWithoutLeadSourceInput {
  where: CompanyWhereUniqueInput!
  data: CompanyUpdateWithoutLeadSourceInput!
}

input CompanyUpdateManyWithWhereWithoutLeadSourceInput {
  where: CompanyScalarWhereInput!
  data: CompanyUpdateManyMutationInput!
}

input CompanyUpdateWithWhereUniqueWithoutCustomerInput {
  where: CompanyWhereUniqueInput!
  data: CompanyUpdateWithoutCustomerInput!
}

input CompanyUpdateManyWithWhereWithoutCustomerInput {
  where: CompanyScalarWhereInput!
  data: CompanyUpdateManyMutationInput!
}

input LaunchUpdateWithWhereUniqueWithoutCustomerInput {
  where: LaunchWhereUniqueInput!
  data: LaunchUpdateWithoutCustomerInput!
}

input LaunchUpdateManyWithWhereWithoutCustomerInput {
  where: LaunchScalarWhereInput!
  data: LaunchUpdateManyMutationInput!
}

input CompanyUpdateWithWhereUniqueWithoutAccountInput {
  where: CompanyWhereUniqueInput!
  data: CompanyUpdateWithoutAccountInput!
}

input CompanyUpdateManyWithWhereWithoutAccountInput {
  where: CompanyScalarWhereInput!
  data: CompanyUpdateManyMutationInput!
}

input AccountUpdateManyMutationInput {
  accountName: StringFieldUpdateOperationsInput
  AccountUUID: StringFieldUpdateOperationsInput
}

input CompanyCreateInput {
  annualRecurringRevenue: Int
  expectedToCloseAt: DateTime
  fiscalYearStartMonth: Int
  name: String!
  companyType: CompanyType!
  seatSize: Int
  createdAt: DateTime
  updatedAt: DateTime
  fiscalYear: Int
  renewalDate: DateTime
  referredOn: DateTime
  latestReferenceId: Int
  customer: CustomerCreateNestedOneWithoutCompaniesInput!
  leadSource: UserCreateNestedOneWithoutLeadSourceForInput
  companyParent: CompanyCreateNestedOneWithoutSubsidiaryInput
  primaryContact: UserCreateNestedOneWithoutPrimaryContactForInput
  references: ReferenceCreateNestedManyWithoutCompanyInput
  referencesServedFor: ReferenceCreateNestedManyWithoutServedAsReferenceForInput
  subsidiary: CompanyCreateNestedManyWithoutCompanyParentInput
  starredBy: CompanyStarredCreateNestedManyWithoutCompanyInput
  events: EventCreateNestedManyWithoutCompanyInput
  notes: NoteCreateNestedManyWithoutCompanyInput
  account: AccountCreateNestedOneWithoutCompanyInput!
  competitors: CompetitorCreateNestedManyWithoutCompanyInput
  products: ProductCreateNestedManyWithoutCompanyInput
  contacts: ContactsCreateNestedManyWithoutCompanyInput
  UserCompanyRatings: UserCompanyRatingsCreateNestedManyWithoutCompanyInput
  listCompanies: ListCompanyCreateNestedManyWithoutCompanyInput
  Launch: LaunchCreateNestedManyWithoutCompanyInput
}

input CompanyCreateManyInput {
  id: Int
  leadSourceId: Int
  annualRecurringRevenue: Int
  customerId: Int!
  expectedToCloseAt: DateTime
  fiscalYearStartMonth: Int
  name: String!
  companyType: CompanyType!
  primaryContactId: Int
  seatSize: Int
  createdAt: DateTime
  updatedAt: DateTime
  fiscalYear: Int
  parentId: Int
  accountId: Int!
  renewalDate: DateTime
  referredOn: DateTime
  latestReferenceId: Int
}

input CompanyUpdateInput {
  annualRecurringRevenue: NullableIntFieldUpdateOperationsInput
  expectedToCloseAt: NullableDateTimeFieldUpdateOperationsInput
  fiscalYearStartMonth: NullableIntFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  companyType: EnumCompanyTypeFieldUpdateOperationsInput
  seatSize: NullableIntFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  fiscalYear: IntFieldUpdateOperationsInput
  renewalDate: NullableDateTimeFieldUpdateOperationsInput
  referredOn: NullableDateTimeFieldUpdateOperationsInput
  latestReferenceId: NullableIntFieldUpdateOperationsInput
  customer: CustomerUpdateOneRequiredWithoutCompaniesInput
  leadSource: UserUpdateOneWithoutLeadSourceForInput
  companyParent: CompanyUpdateOneWithoutSubsidiaryInput
  primaryContact: UserUpdateOneWithoutPrimaryContactForInput
  references: ReferenceUpdateManyWithoutCompanyInput
  referencesServedFor: ReferenceUpdateManyWithoutServedAsReferenceForInput
  subsidiary: CompanyUpdateManyWithoutCompanyParentInput
  starredBy: CompanyStarredUpdateManyWithoutCompanyInput
  events: EventUpdateManyWithoutCompanyInput
  notes: NoteUpdateManyWithoutCompanyInput
  account: AccountUpdateOneRequiredWithoutCompanyInput
  competitors: CompetitorUpdateManyWithoutCompanyInput
  products: ProductUpdateManyWithoutCompanyInput
  contacts: ContactsUpdateManyWithoutCompanyInput
  UserCompanyRatings: UserCompanyRatingsUpdateManyWithoutCompanyInput
  listCompanies: ListCompanyUpdateManyWithoutCompanyInput
  Launch: LaunchUpdateManyWithoutCompanyInput
}

input CompanyStarredCreateInput {
  dummy: Int
  createdAt: DateTime
  company: CompanyCreateNestedOneWithoutStarredByInput!
  user: UserCreateNestedOneWithoutStarredInput!
}

input CompanyStarredCreateManyInput {
  dummy: Int
  createdAt: DateTime
  companyId: Int!
  userId: Int!
}

input CompanyStarredUpdateInput {
  dummy: NullableIntFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  company: CompanyUpdateOneRequiredWithoutStarredByInput
  user: UserUpdateOneRequiredWithoutStarredInput
}

input CompetitorCreateInput {
  name: String!
  createdAt: DateTime
  Company: CompanyCreateNestedOneWithoutCompetitorsInput
}

input CompanyCreateNestedOneWithoutCompetitorsInput {
  create: CompanyCreateWithoutCompetitorsInput
  connectOrCreate: CompanyCreateOrConnectWithoutCompetitorsInput
  connect: CompanyWhereUniqueInput
}

input CompanyCreateWithoutCompetitorsInput {
  annualRecurringRevenue: Int
  expectedToCloseAt: DateTime
  fiscalYearStartMonth: Int
  name: String!
  companyType: CompanyType!
  seatSize: Int
  createdAt: DateTime
  updatedAt: DateTime
  fiscalYear: Int
  renewalDate: DateTime
  referredOn: DateTime
  latestReferenceId: Int
  customer: CustomerCreateNestedOneWithoutCompaniesInput!
  leadSource: UserCreateNestedOneWithoutLeadSourceForInput
  companyParent: CompanyCreateNestedOneWithoutSubsidiaryInput
  primaryContact: UserCreateNestedOneWithoutPrimaryContactForInput
  references: ReferenceCreateNestedManyWithoutCompanyInput
  referencesServedFor: ReferenceCreateNestedManyWithoutServedAsReferenceForInput
  subsidiary: CompanyCreateNestedManyWithoutCompanyParentInput
  starredBy: CompanyStarredCreateNestedManyWithoutCompanyInput
  events: EventCreateNestedManyWithoutCompanyInput
  notes: NoteCreateNestedManyWithoutCompanyInput
  account: AccountCreateNestedOneWithoutCompanyInput!
  products: ProductCreateNestedManyWithoutCompanyInput
  contacts: ContactsCreateNestedManyWithoutCompanyInput
  UserCompanyRatings: UserCompanyRatingsCreateNestedManyWithoutCompanyInput
  listCompanies: ListCompanyCreateNestedManyWithoutCompanyInput
  Launch: LaunchCreateNestedManyWithoutCompanyInput
}

input CompanyCreateOrConnectWithoutCompetitorsInput {
  where: CompanyWhereUniqueInput!
  create: CompanyCreateWithoutCompetitorsInput!
}

input CompetitorCreateManyInput {
  id: Int
  name: String!
  createdAt: DateTime
  companyId: Int
}

input CompetitorUpdateInput {
  name: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  Company: CompanyUpdateOneWithoutCompetitorsInput
}

input CompanyUpdateOneWithoutCompetitorsInput {
  create: CompanyCreateWithoutCompetitorsInput
  connectOrCreate: CompanyCreateOrConnectWithoutCompetitorsInput
  upsert: CompanyUpsertWithoutCompetitorsInput
  connect: CompanyWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: CompanyUpdateWithoutCompetitorsInput
}

input CompanyUpsertWithoutCompetitorsInput {
  update: CompanyUpdateWithoutCompetitorsInput!
  create: CompanyCreateWithoutCompetitorsInput!
}

input CompanyUpdateWithoutCompetitorsInput {
  annualRecurringRevenue: NullableIntFieldUpdateOperationsInput
  expectedToCloseAt: NullableDateTimeFieldUpdateOperationsInput
  fiscalYearStartMonth: NullableIntFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  companyType: EnumCompanyTypeFieldUpdateOperationsInput
  seatSize: NullableIntFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  fiscalYear: IntFieldUpdateOperationsInput
  renewalDate: NullableDateTimeFieldUpdateOperationsInput
  referredOn: NullableDateTimeFieldUpdateOperationsInput
  latestReferenceId: NullableIntFieldUpdateOperationsInput
  customer: CustomerUpdateOneRequiredWithoutCompaniesInput
  leadSource: UserUpdateOneWithoutLeadSourceForInput
  companyParent: CompanyUpdateOneWithoutSubsidiaryInput
  primaryContact: UserUpdateOneWithoutPrimaryContactForInput
  references: ReferenceUpdateManyWithoutCompanyInput
  referencesServedFor: ReferenceUpdateManyWithoutServedAsReferenceForInput
  subsidiary: CompanyUpdateManyWithoutCompanyParentInput
  starredBy: CompanyStarredUpdateManyWithoutCompanyInput
  events: EventUpdateManyWithoutCompanyInput
  notes: NoteUpdateManyWithoutCompanyInput
  account: AccountUpdateOneRequiredWithoutCompanyInput
  products: ProductUpdateManyWithoutCompanyInput
  contacts: ContactsUpdateManyWithoutCompanyInput
  UserCompanyRatings: UserCompanyRatingsUpdateManyWithoutCompanyInput
  listCompanies: ListCompanyUpdateManyWithoutCompanyInput
  Launch: LaunchUpdateManyWithoutCompanyInput
}

input ContactsCreateInput {
  email: String!
  name: String!
  workPhone: String
  mobilePhone: String
  createdAt: DateTime
  updatedAt: DateTime
  primary: Boolean
  image: String
  company: CompanyCreateNestedOneWithoutContactsInput
  launchContacts: LaunchContactsCreateNestedManyWithoutContactInput
}

input ContactsCreateManyInput {
  id: Int
  email: String!
  name: String!
  workPhone: String
  mobilePhone: String
  createdAt: DateTime
  updatedAt: DateTime
  primary: Boolean
  image: String
  companyId: Int
}

input ContactsUpdateInput {
  email: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  workPhone: NullableStringFieldUpdateOperationsInput
  mobilePhone: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  primary: BoolFieldUpdateOperationsInput
  image: NullableStringFieldUpdateOperationsInput
  company: CompanyUpdateOneWithoutContactsInput
  launchContacts: LaunchContactsUpdateManyWithoutContactInput
}

input CustomerCreateInput {
  name: String!
  type: CustomerType!
  favoritedAt: DateTime
  createdAt: DateTime
  updatedAt: DateTime
  oktaClientId: String
  oktaDomain: String
  oktaClientSecret: String
  oktaApiKey: String
  launch: LaunchCreateNestedManyWithoutCustomerInput
  companies: CompanyCreateNestedManyWithoutCustomerInput
  integrations: CustomerIntegrationCreateNestedManyWithoutCustomerInput
  events: EventCreateNestedManyWithoutCustomerInput
  externalGroups: ExternalGroupCreateNestedManyWithoutCustomerInput
  externalUsers: ExternalUserCreateNestedManyWithoutCustomerInput
  groups: GroupCreateNestedManyWithoutCustomerInput
  notes: NoteCreateNestedManyWithoutCustomerInput
  roles: RoleCreateNestedManyWithoutCustomerInput
  salesLeads: SalesLeadCreateNestedManyWithoutCustomerInput
  syncEvents: SyncEventCreateNestedManyWithoutCustomerInput
  users: UserCreateNestedManyWithoutCustomerInput
  messageTemplate: MessageTemplateCreateNestedManyWithoutCustomerInput
  dynamicFields: DynamicUserFieldsCreateNestedManyWithoutCustomerInput
  lists: ListCreateNestedManyWithoutCustomerInput
  useCaseCollections: UseCaseCollectionsCreateNestedManyWithoutCustomerInput
  customerDataSources: DataSourcesOnCustomerCreateNestedManyWithoutCustomerInput
  dataObjectCollections: DataObjectCollectionsCreateNestedManyWithoutCustomerInput
}

input CustomerCreateManyInput {
  id: Int
  name: String!
  type: CustomerType!
  favoritedAt: DateTime
  createdAt: DateTime
  updatedAt: DateTime
  oktaClientId: String
  oktaDomain: String
  oktaClientSecret: String
  oktaApiKey: String
}

input CustomerUpdateInput {
  name: StringFieldUpdateOperationsInput
  type: EnumCustomerTypeFieldUpdateOperationsInput
  favoritedAt: NullableDateTimeFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  oktaClientId: NullableStringFieldUpdateOperationsInput
  oktaDomain: NullableStringFieldUpdateOperationsInput
  oktaClientSecret: NullableStringFieldUpdateOperationsInput
  oktaApiKey: NullableStringFieldUpdateOperationsInput
  launch: LaunchUpdateManyWithoutCustomerInput
  companies: CompanyUpdateManyWithoutCustomerInput
  integrations: CustomerIntegrationUpdateManyWithoutCustomerInput
  events: EventUpdateManyWithoutCustomerInput
  externalGroups: ExternalGroupUpdateManyWithoutCustomerInput
  externalUsers: ExternalUserUpdateManyWithoutCustomerInput
  groups: GroupUpdateManyWithoutCustomerInput
  notes: NoteUpdateManyWithoutCustomerInput
  roles: RoleUpdateManyWithoutCustomerInput
  salesLeads: SalesLeadUpdateManyWithoutCustomerInput
  syncEvents: SyncEventUpdateManyWithoutCustomerInput
  users: UserUpdateManyWithoutCustomerInput
  messageTemplate: MessageTemplateUpdateManyWithoutCustomerInput
  dynamicFields: DynamicUserFieldsUpdateManyWithoutCustomerInput
  lists: ListUpdateManyWithoutCustomerInput
  useCaseCollections: UseCaseCollectionsUpdateManyWithoutCustomerInput
  customerDataSources: DataSourcesOnCustomerUpdateManyWithoutCustomerInput
  dataObjectCollections: DataObjectCollectionsUpdateManyWithoutCustomerInput
}

input CustomerUpdateManyMutationInput {
  name: StringFieldUpdateOperationsInput
  type: EnumCustomerTypeFieldUpdateOperationsInput
  favoritedAt: NullableDateTimeFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  oktaClientId: NullableStringFieldUpdateOperationsInput
  oktaDomain: NullableStringFieldUpdateOperationsInput
  oktaClientSecret: NullableStringFieldUpdateOperationsInput
  oktaApiKey: NullableStringFieldUpdateOperationsInput
}

input CustomerDataObjectsCreateInput {
  name: String!
  displayName: String!
  createdAt: DateTime
  dataSource: DataSourcesCreateNestedOneWithoutDataObjectsInput!
  dataObjectCollectionOnDataObject: DataObjectCollectionOnDataObjectCreateNestedManyWithoutDataObjectInput
}

input CustomerDataObjectsCreateManyInput {
  id: Int
  name: String!
  displayName: String!
  dataSourceId: Int!
  createdAt: DateTime
}

input CustomerDataObjectsUpdateInput {
  name: StringFieldUpdateOperationsInput
  displayName: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  dataSource: DataSourcesUpdateOneRequiredWithoutDataObjectsInput
  dataObjectCollectionOnDataObject: DataObjectCollectionOnDataObjectUpdateManyWithoutDataObjectInput
}

input CustomerIntegrationCreateInput {
  refreshToken: String
  token: String!
  type: CustomerIntegrationType!
  url: String
  createdAt: DateTime
  updatedAt: DateTime
  customer: CustomerCreateNestedOneWithoutIntegrationsInput!
}

input CustomerCreateNestedOneWithoutIntegrationsInput {
  create: CustomerCreateWithoutIntegrationsInput
  connectOrCreate: CustomerCreateOrConnectWithoutIntegrationsInput
  connect: CustomerWhereUniqueInput
}

input CustomerCreateWithoutIntegrationsInput {
  name: String!
  type: CustomerType!
  favoritedAt: DateTime
  createdAt: DateTime
  updatedAt: DateTime
  oktaClientId: String
  oktaDomain: String
  oktaClientSecret: String
  oktaApiKey: String
  launch: LaunchCreateNestedManyWithoutCustomerInput
  companies: CompanyCreateNestedManyWithoutCustomerInput
  events: EventCreateNestedManyWithoutCustomerInput
  externalGroups: ExternalGroupCreateNestedManyWithoutCustomerInput
  externalUsers: ExternalUserCreateNestedManyWithoutCustomerInput
  groups: GroupCreateNestedManyWithoutCustomerInput
  notes: NoteCreateNestedManyWithoutCustomerInput
  roles: RoleCreateNestedManyWithoutCustomerInput
  salesLeads: SalesLeadCreateNestedManyWithoutCustomerInput
  syncEvents: SyncEventCreateNestedManyWithoutCustomerInput
  users: UserCreateNestedManyWithoutCustomerInput
  messageTemplate: MessageTemplateCreateNestedManyWithoutCustomerInput
  dynamicFields: DynamicUserFieldsCreateNestedManyWithoutCustomerInput
  lists: ListCreateNestedManyWithoutCustomerInput
  useCaseCollections: UseCaseCollectionsCreateNestedManyWithoutCustomerInput
  customerDataSources: DataSourcesOnCustomerCreateNestedManyWithoutCustomerInput
  dataObjectCollections: DataObjectCollectionsCreateNestedManyWithoutCustomerInput
}

input CustomerCreateOrConnectWithoutIntegrationsInput {
  where: CustomerWhereUniqueInput!
  create: CustomerCreateWithoutIntegrationsInput!
}

input CustomerIntegrationCreateManyInput {
  id: Int
  customerId: Int!
  refreshToken: String
  token: String!
  type: CustomerIntegrationType!
  url: String
  createdAt: DateTime
  updatedAt: DateTime
}

input CustomerIntegrationUpdateInput {
  refreshToken: NullableStringFieldUpdateOperationsInput
  token: StringFieldUpdateOperationsInput
  type: EnumCustomerIntegrationTypeFieldUpdateOperationsInput
  url: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  customer: CustomerUpdateOneRequiredWithoutIntegrationsInput
}

input CustomerUpdateOneRequiredWithoutIntegrationsInput {
  create: CustomerCreateWithoutIntegrationsInput
  connectOrCreate: CustomerCreateOrConnectWithoutIntegrationsInput
  upsert: CustomerUpsertWithoutIntegrationsInput
  connect: CustomerWhereUniqueInput
  update: CustomerUpdateWithoutIntegrationsInput
}

input CustomerUpsertWithoutIntegrationsInput {
  update: CustomerUpdateWithoutIntegrationsInput!
  create: CustomerCreateWithoutIntegrationsInput!
}

input CustomerUpdateWithoutIntegrationsInput {
  name: StringFieldUpdateOperationsInput
  type: EnumCustomerTypeFieldUpdateOperationsInput
  favoritedAt: NullableDateTimeFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  oktaClientId: NullableStringFieldUpdateOperationsInput
  oktaDomain: NullableStringFieldUpdateOperationsInput
  oktaClientSecret: NullableStringFieldUpdateOperationsInput
  oktaApiKey: NullableStringFieldUpdateOperationsInput
  launch: LaunchUpdateManyWithoutCustomerInput
  companies: CompanyUpdateManyWithoutCustomerInput
  events: EventUpdateManyWithoutCustomerInput
  externalGroups: ExternalGroupUpdateManyWithoutCustomerInput
  externalUsers: ExternalUserUpdateManyWithoutCustomerInput
  groups: GroupUpdateManyWithoutCustomerInput
  notes: NoteUpdateManyWithoutCustomerInput
  roles: RoleUpdateManyWithoutCustomerInput
  salesLeads: SalesLeadUpdateManyWithoutCustomerInput
  syncEvents: SyncEventUpdateManyWithoutCustomerInput
  users: UserUpdateManyWithoutCustomerInput
  messageTemplate: MessageTemplateUpdateManyWithoutCustomerInput
  dynamicFields: DynamicUserFieldsUpdateManyWithoutCustomerInput
  lists: ListUpdateManyWithoutCustomerInput
  useCaseCollections: UseCaseCollectionsUpdateManyWithoutCustomerInput
  customerDataSources: DataSourcesOnCustomerUpdateManyWithoutCustomerInput
  dataObjectCollections: DataObjectCollectionsUpdateManyWithoutCustomerInput
}

input DataObjectCollectionOnDataObjectCreateInput {
  status: Boolean!
  createdAt: DateTime
  updatedAt: DateTime
  dataObjectCollections: DataObjectCollectionsCreateNestedOneWithoutDataObjectCollectionOnDataObjectInput!
  dataObject: CustomerDataObjectsCreateNestedOneWithoutDataObjectCollectionOnDataObjectInput!
}

input DataObjectCollectionOnDataObjectCreateManyInput {
  id: Int
  dataObjectCollectionId: Int!
  status: Boolean!
  dataObjectId: Int!
  createdAt: DateTime
  updatedAt: DateTime
}

input DataObjectCollectionOnDataObjectUpdateInput {
  status: BoolFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
  dataObjectCollections: DataObjectCollectionsUpdateOneRequiredWithoutDataObjectCollectionOnDataObjectInput
  dataObject: CustomerDataObjectsUpdateOneRequiredWithoutDataObjectCollectionOnDataObjectInput
}

input DataObjectCollectionsCreateInput {
  name: String!
  default: Boolean
  isAllAccess: Boolean
  createdAt: DateTime
  updatedAt: DateTime
  dataObjectCollectionOnDataObject: DataObjectCollectionOnDataObjectCreateNestedManyWithoutDataObjectCollectionsInput
  customer: CustomerCreateNestedOneWithoutDataObjectCollectionsInput!
}

input DataObjectCollectionsCreateManyInput {
  id: Int
  name: String!
  customerId: Int!
  default: Boolean
  isAllAccess: Boolean
  createdAt: DateTime
  updatedAt: DateTime
}

input DataObjectCollectionsUpdateInput {
  name: StringFieldUpdateOperationsInput
  default: BoolFieldUpdateOperationsInput
  isAllAccess: BoolFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
  dataObjectCollectionOnDataObject: DataObjectCollectionOnDataObjectUpdateManyWithoutDataObjectCollectionsInput
  customer: CustomerUpdateOneRequiredWithoutDataObjectCollectionsInput
}

input DataSourcesCreateInput {
  name: String!
  icon: String
  sourceType: SourceTypes!
  createdAt: DateTime
  dataObjects: CustomerDataObjectsCreateNestedManyWithoutDataSourceInput
  customerDataSources: DataSourcesOnCustomerCreateNestedManyWithoutDataSourceInput
}

input DataSourcesCreateManyInput {
  id: Int
  name: String!
  icon: String
  sourceType: SourceTypes!
  createdAt: DateTime
}

input DataSourcesUpdateInput {
  name: StringFieldUpdateOperationsInput
  icon: NullableStringFieldUpdateOperationsInput
  sourceType: EnumSourceTypesFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  dataObjects: CustomerDataObjectsUpdateManyWithoutDataSourceInput
  customerDataSources: DataSourcesOnCustomerUpdateManyWithoutDataSourceInput
}

input DataSourcesUpdateManyMutationInput {
  name: StringFieldUpdateOperationsInput
  icon: NullableStringFieldUpdateOperationsInput
  sourceType: EnumSourceTypesFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
}

input DataSourcesOnCustomerCreateInput {
  status: Boolean
  createdAt: DateTime
  updatedAt: DateTime
  dataSource: DataSourcesCreateNestedOneWithoutCustomerDataSourcesInput!
  customer: CustomerCreateNestedOneWithoutCustomerDataSourcesInput!
}

input DataSourcesOnCustomerCreateManyInput {
  id: Int
  status: Boolean
  dataSourceId: Int!
  customerId: Int!
  createdAt: DateTime
  updatedAt: DateTime
}

input DataSourcesOnCustomerUpdateInput {
  status: BoolFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
  dataSource: DataSourcesUpdateOneRequiredWithoutCustomerDataSourcesInput
  customer: CustomerUpdateOneRequiredWithoutCustomerDataSourcesInput
}

input DynamicUserFieldsCreateInput {
  fieldName: String!
  fieldLabel: String!
  fieldType: FieldTypes
  display: Boolean
  allowedValues: JSON
  isDefault: Boolean
  order: Int
  customer: CustomerCreateNestedOneWithoutDynamicFieldsInput!
}

input CustomerCreateNestedOneWithoutDynamicFieldsInput {
  create: CustomerCreateWithoutDynamicFieldsInput
  connectOrCreate: CustomerCreateOrConnectWithoutDynamicFieldsInput
  connect: CustomerWhereUniqueInput
}

input CustomerCreateWithoutDynamicFieldsInput {
  name: String!
  type: CustomerType!
  favoritedAt: DateTime
  createdAt: DateTime
  updatedAt: DateTime
  oktaClientId: String
  oktaDomain: String
  oktaClientSecret: String
  oktaApiKey: String
  launch: LaunchCreateNestedManyWithoutCustomerInput
  companies: CompanyCreateNestedManyWithoutCustomerInput
  integrations: CustomerIntegrationCreateNestedManyWithoutCustomerInput
  events: EventCreateNestedManyWithoutCustomerInput
  externalGroups: ExternalGroupCreateNestedManyWithoutCustomerInput
  externalUsers: ExternalUserCreateNestedManyWithoutCustomerInput
  groups: GroupCreateNestedManyWithoutCustomerInput
  notes: NoteCreateNestedManyWithoutCustomerInput
  roles: RoleCreateNestedManyWithoutCustomerInput
  salesLeads: SalesLeadCreateNestedManyWithoutCustomerInput
  syncEvents: SyncEventCreateNestedManyWithoutCustomerInput
  users: UserCreateNestedManyWithoutCustomerInput
  messageTemplate: MessageTemplateCreateNestedManyWithoutCustomerInput
  lists: ListCreateNestedManyWithoutCustomerInput
  useCaseCollections: UseCaseCollectionsCreateNestedManyWithoutCustomerInput
  customerDataSources: DataSourcesOnCustomerCreateNestedManyWithoutCustomerInput
  dataObjectCollections: DataObjectCollectionsCreateNestedManyWithoutCustomerInput
}

input CustomerCreateOrConnectWithoutDynamicFieldsInput {
  where: CustomerWhereUniqueInput!
  create: CustomerCreateWithoutDynamicFieldsInput!
}

input DynamicUserFieldsCreateManyInput {
  id: Int
  fieldName: String!
  fieldLabel: String!
  fieldType: FieldTypes
  display: Boolean
  allowedValues: JSON
  isDefault: Boolean
  customerId: Int!
  order: Int
}

input DynamicUserFieldsUpdateInput {
  fieldName: StringFieldUpdateOperationsInput
  fieldLabel: StringFieldUpdateOperationsInput
  fieldType: NullableEnumFieldTypesFieldUpdateOperationsInput
  display: BoolFieldUpdateOperationsInput
  allowedValues: JSON
  isDefault: BoolFieldUpdateOperationsInput
  order: NullableIntFieldUpdateOperationsInput
  customer: CustomerUpdateOneRequiredWithoutDynamicFieldsInput
}

input CustomerUpdateOneRequiredWithoutDynamicFieldsInput {
  create: CustomerCreateWithoutDynamicFieldsInput
  connectOrCreate: CustomerCreateOrConnectWithoutDynamicFieldsInput
  upsert: CustomerUpsertWithoutDynamicFieldsInput
  connect: CustomerWhereUniqueInput
  update: CustomerUpdateWithoutDynamicFieldsInput
}

input CustomerUpsertWithoutDynamicFieldsInput {
  update: CustomerUpdateWithoutDynamicFieldsInput!
  create: CustomerCreateWithoutDynamicFieldsInput!
}

input CustomerUpdateWithoutDynamicFieldsInput {
  name: StringFieldUpdateOperationsInput
  type: EnumCustomerTypeFieldUpdateOperationsInput
  favoritedAt: NullableDateTimeFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  oktaClientId: NullableStringFieldUpdateOperationsInput
  oktaDomain: NullableStringFieldUpdateOperationsInput
  oktaClientSecret: NullableStringFieldUpdateOperationsInput
  oktaApiKey: NullableStringFieldUpdateOperationsInput
  launch: LaunchUpdateManyWithoutCustomerInput
  companies: CompanyUpdateManyWithoutCustomerInput
  integrations: CustomerIntegrationUpdateManyWithoutCustomerInput
  events: EventUpdateManyWithoutCustomerInput
  externalGroups: ExternalGroupUpdateManyWithoutCustomerInput
  externalUsers: ExternalUserUpdateManyWithoutCustomerInput
  groups: GroupUpdateManyWithoutCustomerInput
  notes: NoteUpdateManyWithoutCustomerInput
  roles: RoleUpdateManyWithoutCustomerInput
  salesLeads: SalesLeadUpdateManyWithoutCustomerInput
  syncEvents: SyncEventUpdateManyWithoutCustomerInput
  users: UserUpdateManyWithoutCustomerInput
  messageTemplate: MessageTemplateUpdateManyWithoutCustomerInput
  lists: ListUpdateManyWithoutCustomerInput
  useCaseCollections: UseCaseCollectionsUpdateManyWithoutCustomerInput
  customerDataSources: DataSourcesOnCustomerUpdateManyWithoutCustomerInput
  dataObjectCollections: DataObjectCollectionsUpdateManyWithoutCustomerInput
}

input EventCreateInput {
  data: JSON
  notifiedAt: DateTime
  text: String
  type: EventType!
  needsAttention: EventAttention
  createdAt: DateTime
  company: CompanyCreateNestedOneWithoutEventsInput
  customer: CustomerCreateNestedOneWithoutEventsInput!
  Launch: LaunchCreateNestedManyWithoutEventsInput
  notes: NoteCreateNestedManyWithoutEventsInput
  userEvents: UserEventsCreateNestedManyWithoutEventInput
  parentEvent: EventCreateNestedOneWithoutChildEventsInput
  childEvents: EventCreateNestedManyWithoutParentEventInput
  message: NoteCreateNestedOneWithoutEventInput
}

input EventCreateManyInput {
  id: Int
  customerId: Int!
  data: JSON
  notifiedAt: DateTime
  text: String
  type: EventType!
  companyId: Int
  needsAttention: EventAttention
  createdAt: DateTime
  parentEventId: Int
  messageId: Int
}

input EventUpdateInput {
  data: JSON
  notifiedAt: NullableDateTimeFieldUpdateOperationsInput
  text: NullableStringFieldUpdateOperationsInput
  type: EnumEventTypeFieldUpdateOperationsInput
  needsAttention: NullableEnumEventAttentionFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  company: CompanyUpdateOneWithoutEventsInput
  customer: CustomerUpdateOneRequiredWithoutEventsInput
  Launch: LaunchUpdateManyWithoutEventsInput
  notes: NoteUpdateManyWithoutEventsInput
  userEvents: UserEventsUpdateManyWithoutEventInput
  parentEvent: EventUpdateOneWithoutChildEventsInput
  childEvents: EventUpdateManyWithoutParentEventInput
  message: NoteUpdateOneWithoutEventInput
}

input ExternalGroupCreateInput {
  externalId: String!
  developerName: String!
  name: String
  ownerId: String
  source: CustomerIntegrationType!
  type: String
  createdAt: DateTime
  updatedAt: DateTime
  customer: CustomerCreateNestedOneWithoutExternalGroupsInput!
  members: ExternalGroupMemberCreateNestedManyWithoutGroupInput
}

input ExternalGroupCreateManyInput {
  customerId: Int!
  externalId: String!
  developerName: String!
  name: String
  ownerId: String
  source: CustomerIntegrationType!
  type: String
  createdAt: DateTime
  updatedAt: DateTime
}

input ExternalGroupUpdateInput {
  externalId: StringFieldUpdateOperationsInput
  developerName: StringFieldUpdateOperationsInput
  name: NullableStringFieldUpdateOperationsInput
  ownerId: NullableStringFieldUpdateOperationsInput
  source: EnumCustomerIntegrationTypeFieldUpdateOperationsInput
  type: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  customer: CustomerUpdateOneRequiredWithoutExternalGroupsInput
  members: ExternalGroupMemberUpdateManyWithoutGroupInput
}

input ExternalGroupMemberCreateInput {
  createdAt: DateTime
  group: ExternalGroupCreateNestedOneWithoutMembersInput!
  user: ExternalUserCreateNestedOneWithoutExternalGroupsInput!
}

input ExternalGroupMemberCreateManyInput {
  customerId: Int!
  groupId: String!
  source: CustomerIntegrationType!
  userId: String!
  createdAt: DateTime
}

input ExternalGroupMemberUpdateInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  group: ExternalGroupUpdateOneRequiredWithoutMembersInput
  user: ExternalUserUpdateOneRequiredWithoutExternalGroupsInput
}

input ExternalUserCreateInput {
  department: String
  division: String
  email: String
  employeeNumber: String
  externalId: String!
  name: String
  source: CustomerIntegrationType!
  title: String
  createdAt: DateTime
  updatedAt: DateTime
  customer: CustomerCreateNestedOneWithoutExternalUsersInput!
  user: UserCreateNestedOneWithoutExternalUserInput
  externalGroups: ExternalGroupMemberCreateNestedManyWithoutUserInput
}

input ExternalUserCreateManyInput {
  customerId: Int!
  department: String
  division: String
  email: String
  employeeNumber: String
  externalId: String!
  name: String
  source: CustomerIntegrationType!
  userId: Int
  title: String
  createdAt: DateTime
  updatedAt: DateTime
}

input ExternalUserUpdateInput {
  department: NullableStringFieldUpdateOperationsInput
  division: NullableStringFieldUpdateOperationsInput
  email: NullableStringFieldUpdateOperationsInput
  employeeNumber: NullableStringFieldUpdateOperationsInput
  externalId: StringFieldUpdateOperationsInput
  name: NullableStringFieldUpdateOperationsInput
  source: EnumCustomerIntegrationTypeFieldUpdateOperationsInput
  title: NullableStringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  customer: CustomerUpdateOneRequiredWithoutExternalUsersInput
  user: UserUpdateOneWithoutExternalUserInput
  externalGroups: ExternalGroupMemberUpdateManyWithoutUserInput
}

input FeedbackCreateInput {
  feedbackValue: Float!
  feedback: String!
  user: UserCreateNestedOneWithoutFeedbackInput!
}

input UserCreateNestedOneWithoutFeedbackInput {
  create: UserCreateWithoutFeedbackInput
  connectOrCreate: UserCreateOrConnectWithoutFeedbackInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutFeedbackInput {
  admin: Boolean
  email: String!
  name: String!
  passwordHash: String
  passwordSalt: String
  workPhone: String
  mobilePhone: String
  title: String
  token: String
  notificationSettings: JSON
  createdAt: DateTime
  updatedAt: DateTime
  dynamicFields: JSON
  active: Boolean
  oktaUserId: Int
  oktaManagerId: Int
  forgetPassword: String
  csmStatus: Boolean
  crmStatus: Boolean
  customer: CustomerCreateNestedOneWithoutUsersInput!
  leadSourceFor: CompanyCreateNestedManyWithoutLeadSourceInput
  primaryContactFor: CompanyCreateNestedManyWithoutPrimaryContactInput
  starred: CompanyStarredCreateNestedManyWithoutUserInput
  externalUser: ExternalUserCreateNestedManyWithoutUserInput
  groups: GroupUserCreateNestedManyWithoutUserInput
  Note: NoteCreateNestedManyWithoutUserInput
  roles: UserRoleCreateNestedManyWithoutUserInput
  userEvents: UserEventsCreateNestedManyWithoutUserInput
  UserCompanyRatings: UserCompanyRatingsCreateNestedManyWithoutUserInput
  noteUserTags: NoteUserTagsCreateNestedManyWithoutUserInput
  messageTemplate: MessageTemplateCreateNestedManyWithoutUserInput
  references: ReferenceCreateNestedManyWithoutUserInput
  userManager: UserManagerCreateNestedManyWithoutUserInput
  userReportee: UserManagerCreateNestedManyWithoutManagerInput
}

input UserCreateOrConnectWithoutFeedbackInput {
  where: UserWhereUniqueInput!
  create: UserCreateWithoutFeedbackInput!
}

input FeedbackCreateManyInput {
  feedbackId: Int
  feedbackValue: Float!
  feedback: String!
  userId: Int!
}

input FeedbackUpdateInput {
  feedbackValue: FloatFieldUpdateOperationsInput
  feedback: StringFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutFeedbackInput
}

input UserUpdateOneRequiredWithoutFeedbackInput {
  create: UserCreateWithoutFeedbackInput
  connectOrCreate: UserCreateOrConnectWithoutFeedbackInput
  upsert: UserUpsertWithoutFeedbackInput
  connect: UserWhereUniqueInput
  update: UserUpdateWithoutFeedbackInput
}

input UserUpsertWithoutFeedbackInput {
  update: UserUpdateWithoutFeedbackInput!
  create: UserCreateWithoutFeedbackInput!
}

input UserUpdateWithoutFeedbackInput {
  admin: BoolFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  passwordHash: NullableStringFieldUpdateOperationsInput
  passwordSalt: NullableStringFieldUpdateOperationsInput
  workPhone: NullableStringFieldUpdateOperationsInput
  mobilePhone: NullableStringFieldUpdateOperationsInput
  title: NullableStringFieldUpdateOperationsInput
  token: NullableStringFieldUpdateOperationsInput
  notificationSettings: JSON
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  dynamicFields: JSON
  active: BoolFieldUpdateOperationsInput
  oktaUserId: NullableIntFieldUpdateOperationsInput
  oktaManagerId: NullableIntFieldUpdateOperationsInput
  forgetPassword: NullableStringFieldUpdateOperationsInput
  csmStatus: BoolFieldUpdateOperationsInput
  crmStatus: BoolFieldUpdateOperationsInput
  customer: CustomerUpdateOneRequiredWithoutUsersInput
  leadSourceFor: CompanyUpdateManyWithoutLeadSourceInput
  primaryContactFor: CompanyUpdateManyWithoutPrimaryContactInput
  starred: CompanyStarredUpdateManyWithoutUserInput
  externalUser: ExternalUserUpdateManyWithoutUserInput
  groups: GroupUserUpdateManyWithoutUserInput
  Note: NoteUpdateManyWithoutUserInput
  roles: UserRoleUpdateManyWithoutUserInput
  userEvents: UserEventsUpdateManyWithoutUserInput
  UserCompanyRatings: UserCompanyRatingsUpdateManyWithoutUserInput
  noteUserTags: NoteUserTagsUpdateManyWithoutUserInput
  messageTemplate: MessageTemplateUpdateManyWithoutUserInput
  references: ReferenceUpdateManyWithoutUserInput
  userManager: UserManagerUpdateManyWithoutUserInput
  userReportee: UserManagerUpdateManyWithoutManagerInput
}

input GroupCreateInput {
  name: String!
  createdAt: DateTime
  updatedAt: DateTime
  customer: CustomerCreateNestedOneWithoutGroupsInput!
  users: GroupUserCreateNestedManyWithoutGroupInput
  parent: GroupCreateNestedOneWithoutChildrenInput
  children: GroupCreateNestedManyWithoutParentInput
  noteGroupTags: NoteGroupTagsCreateNestedManyWithoutGroupInput
}

input GroupCreateManyInput {
  id: Int
  customerId: Int!
  name: String!
  createdAt: DateTime
  updatedAt: DateTime
  parentId: Int
}

input GroupUpdateInput {
  name: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  customer: CustomerUpdateOneRequiredWithoutGroupsInput
  users: GroupUserUpdateManyWithoutGroupInput
  parent: GroupUpdateOneWithoutChildrenInput
  children: GroupUpdateManyWithoutParentInput
  noteGroupTags: NoteGroupTagsUpdateManyWithoutGroupInput
}

input GroupUserCreateInput {
  dummy: Int
  group: GroupCreateNestedOneWithoutUsersInput!
  user: UserCreateNestedOneWithoutGroupsInput!
}

input GroupUserCreateManyInput {
  dummy: Int
  groupId: Int!
  userId: Int!
}

input GroupUserUpdateInput {
  dummy: NullableIntFieldUpdateOperationsInput
  group: GroupUpdateOneRequiredWithoutUsersInput
  user: UserUpdateOneRequiredWithoutGroupsInput
}

input LaunchCreateInput {
  createdAt: DateTime
  sendToAddress: String
  subject: String!
  text: String!
  delta: JSON
  company: CompanyCreateNestedOneWithoutLaunchInput!
  events: EventCreateNestedOneWithoutLaunchInput
  messageTempate: MessageTemplateCreateNestedOneWithoutLaunchInput
  launchContacts: LaunchContactsCreateNestedManyWithoutLaunchInput
  Customer: CustomerCreateNestedOneWithoutLaunchInput
}

input LaunchCreateManyInput {
  id: Int
  createdAt: DateTime
  companyId: Int!
  eventId: Int
  messageTemplateId: Int
  sendToAddress: String
  subject: String!
  text: String!
  delta: JSON
  customerId: Int
}

input LaunchUpdateInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  sendToAddress: NullableStringFieldUpdateOperationsInput
  subject: StringFieldUpdateOperationsInput
  text: StringFieldUpdateOperationsInput
  delta: JSON
  company: CompanyUpdateOneRequiredWithoutLaunchInput
  events: EventUpdateOneWithoutLaunchInput
  messageTempate: MessageTemplateUpdateOneWithoutLaunchInput
  launchContacts: LaunchContactsUpdateManyWithoutLaunchInput
  Customer: CustomerUpdateOneWithoutLaunchInput
}

input LaunchContactsCreateInput {
  createdAt: DateTime
  launch: LaunchCreateNestedOneWithoutLaunchContactsInput!
  contact: ContactsCreateNestedOneWithoutLaunchContactsInput!
}

input LaunchContactsCreateManyInput {
  id: Int
  launchId: Int!
  contactId: Int!
  createdAt: DateTime
}

input LaunchContactsUpdateInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  launch: LaunchUpdateOneRequiredWithoutLaunchContactsInput
  contact: ContactsUpdateOneRequiredWithoutLaunchContactsInput
}

input ListCreateInput {
  name: String!
  createdAt: DateTime
  updatedAt: DateTime
  customer: CustomerCreateNestedOneWithoutListsInput!
  listCompanies: ListCompanyCreateNestedManyWithoutListInput
  parent: ListCreateNestedOneWithoutChildrenInput
  children: ListCreateNestedManyWithoutParentInput
}

input ListCreateManyInput {
  id: Int
  customerId: Int!
  name: String!
  createdAt: DateTime
  updatedAt: DateTime
  parentId: Int
}

input ListUpdateInput {
  name: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  customer: CustomerUpdateOneRequiredWithoutListsInput
  listCompanies: ListCompanyUpdateManyWithoutListInput
  parent: ListUpdateOneWithoutChildrenInput
  children: ListUpdateManyWithoutParentInput
}

input ListCompanyCreateInput {
  createdAt: DateTime
  updatedAt: DateTime
  list: ListCreateNestedOneWithoutListCompaniesInput!
  company: CompanyCreateNestedOneWithoutListCompaniesInput!
}

input ListCompanyCreateManyInput {
  id: Int
  listId: Int!
  companyId: Int!
  createdAt: DateTime
  updatedAt: DateTime
}

input ListCompanyUpdateInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  list: ListUpdateOneRequiredWithoutListCompaniesInput
  company: CompanyUpdateOneRequiredWithoutListCompaniesInput
}

input MessageTemplateCreateInput {
  eventType: EventType!
  companyType: CompanyType!
  messageType: MessageType!
  sendToAddress: String
  title: String
  subject: String!
  text: String!
  delta: JSON
  createdAt: DateTime
  updatedAt: DateTime
  customer: CustomerCreateNestedOneWithoutMessageTemplateInput!
  user: UserCreateNestedOneWithoutMessageTemplateInput!
  launch: LaunchCreateNestedManyWithoutMessageTempateInput
}

input MessageTemplateCreateManyInput {
  id: Int
  eventType: EventType!
  companyType: CompanyType!
  messageType: MessageType!
  sendToAddress: String
  title: String
  subject: String!
  text: String!
  customerId: Int!
  userId: Int!
  delta: JSON
  createdAt: DateTime
  updatedAt: DateTime
}

input MessageTemplateUpdateInput {
  eventType: EnumEventTypeFieldUpdateOperationsInput
  companyType: EnumCompanyTypeFieldUpdateOperationsInput
  messageType: EnumMessageTypeFieldUpdateOperationsInput
  sendToAddress: NullableStringFieldUpdateOperationsInput
  title: NullableStringFieldUpdateOperationsInput
  subject: StringFieldUpdateOperationsInput
  text: StringFieldUpdateOperationsInput
  delta: JSON
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
  customer: CustomerUpdateOneRequiredWithoutMessageTemplateInput
  user: UserUpdateOneRequiredWithoutMessageTemplateInput
  launch: LaunchUpdateManyWithoutMessageTempateInput
}

input NoteCreateInput {
  readAt: DateTime
  flaggedAt: DateTime
  subject: String!
  text: String!
  allCanView: Boolean
  createdAt: DateTime
  updatedAt: DateTime
  delta: JSON
  company: CompanyCreateNestedOneWithoutNotesInput
  customer: CustomerCreateNestedOneWithoutNotesInput
  events: EventCreateNestedOneWithoutNotesInput
  user: UserCreateNestedOneWithoutNoteInput
  noteUserTags: NoteUserTagsCreateNestedManyWithoutNoteInput
  noteGroupTags: NoteGroupTagsCreateNestedManyWithoutNoteInput
  Event: EventCreateNestedManyWithoutMessageInput
}

input NoteCreateManyInput {
  id: Int
  customerId: Int
  eventId: Int
  readAt: DateTime
  flaggedAt: DateTime
  subject: String!
  text: String!
  companyId: Int
  createdBy: Int
  allCanView: Boolean
  createdAt: DateTime
  updatedAt: DateTime
  delta: JSON
}

input NoteUpdateInput {
  readAt: NullableDateTimeFieldUpdateOperationsInput
  flaggedAt: NullableDateTimeFieldUpdateOperationsInput
  subject: StringFieldUpdateOperationsInput
  text: StringFieldUpdateOperationsInput
  allCanView: BoolFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  delta: JSON
  company: CompanyUpdateOneWithoutNotesInput
  customer: CustomerUpdateOneWithoutNotesInput
  events: EventUpdateOneWithoutNotesInput
  user: UserUpdateOneWithoutNoteInput
  noteUserTags: NoteUserTagsUpdateManyWithoutNoteInput
  noteGroupTags: NoteGroupTagsUpdateManyWithoutNoteInput
  Event: EventUpdateManyWithoutMessageInput
}

input NoteGroupTagsCreateInput {
  createdAt: DateTime
  note: NoteCreateNestedOneWithoutNoteGroupTagsInput!
  group: GroupCreateNestedOneWithoutNoteGroupTagsInput!
}

input NoteGroupTagsCreateManyInput {
  noteId: Int!
  groupId: Int!
  createdAt: DateTime
}

input NoteGroupTagsUpdateInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  note: NoteUpdateOneRequiredWithoutNoteGroupTagsInput
  group: GroupUpdateOneRequiredWithoutNoteGroupTagsInput
}

input NoteUserTagsCreateInput {
  createdAt: DateTime
  note: NoteCreateNestedOneWithoutNoteUserTagsInput!
  user: UserCreateNestedOneWithoutNoteUserTagsInput!
}

input NoteUserTagsCreateManyInput {
  noteId: Int!
  userId: Int!
  createdAt: DateTime
}

input NoteUserTagsUpdateInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  note: NoteUpdateOneRequiredWithoutNoteUserTagsInput
  user: UserUpdateOneRequiredWithoutNoteUserTagsInput
}

input OfferOptionCreateInput {
  offerType: String!
  status: Boolean
  references: ReferenceOnOfferOptionsCreateNestedManyWithoutOfferOptionInput
}

input ReferenceOnOfferOptionsCreateNestedManyWithoutOfferOptionInput {
  create: [ReferenceOnOfferOptionsCreateWithoutOfferOptionInput!]
  connectOrCreate: [ReferenceOnOfferOptionsCreateOrConnectWithoutOfferOptionInput!]
  createMany: ReferenceOnOfferOptionsCreateManyOfferOptionInputEnvelope
  connect: [ReferenceOnOfferOptionsWhereUniqueInput!]
}

input ReferenceOnOfferOptionsCreateWithoutOfferOptionInput {
  createdAt: DateTime
  reference: ReferenceCreateNestedOneWithoutOfferOptionsInput!
}

input ReferenceCreateNestedOneWithoutOfferOptionsInput {
  create: ReferenceCreateWithoutOfferOptionsInput
  connectOrCreate: ReferenceCreateOrConnectWithoutOfferOptionsInput
  connect: ReferenceWhereUniqueInput
}

input ReferenceCreateWithoutOfferOptionsInput {
  offeredTo: Boolean!
  servedAsReferenceBefore: Boolean!
  servedAsReferenceAt: DateTime
  notes: String
  dealClosed: Boolean
  createdAt: DateTime
  company: CompanyCreateNestedOneWithoutReferencesInput!
  servedAsReferenceFor: CompanyCreateNestedOneWithoutReferencesServedForInput
  user: UserCreateNestedOneWithoutReferencesInput
}

input ReferenceCreateOrConnectWithoutOfferOptionsInput {
  where: ReferenceWhereUniqueInput!
  create: ReferenceCreateWithoutOfferOptionsInput!
}

input ReferenceOnOfferOptionsCreateOrConnectWithoutOfferOptionInput {
  where: ReferenceOnOfferOptionsWhereUniqueInput!
  create: ReferenceOnOfferOptionsCreateWithoutOfferOptionInput!
}

input ReferenceOnOfferOptionsCreateManyOfferOptionInputEnvelope {
  data: [ReferenceOnOfferOptionsCreateManyOfferOptionInput!]!
  skipDuplicates: Boolean
}

input ReferenceOnOfferOptionsCreateManyOfferOptionInput {
  createdAt: DateTime
  referenceId: Int!
}

input OfferOptionCreateManyInput {
  id: Int
  offerType: String!
  status: Boolean
}

input OfferOptionUpdateInput {
  offerType: StringFieldUpdateOperationsInput
  status: BoolFieldUpdateOperationsInput
  references: ReferenceOnOfferOptionsUpdateManyWithoutOfferOptionInput
}

input ReferenceOnOfferOptionsUpdateManyWithoutOfferOptionInput {
  create: [ReferenceOnOfferOptionsCreateWithoutOfferOptionInput!]
  connectOrCreate: [ReferenceOnOfferOptionsCreateOrConnectWithoutOfferOptionInput!]
  upsert: [ReferenceOnOfferOptionsUpsertWithWhereUniqueWithoutOfferOptionInput!]
  createMany: ReferenceOnOfferOptionsCreateManyOfferOptionInputEnvelope
  connect: [ReferenceOnOfferOptionsWhereUniqueInput!]
  set: [ReferenceOnOfferOptionsWhereUniqueInput!]
  disconnect: [ReferenceOnOfferOptionsWhereUniqueInput!]
  delete: [ReferenceOnOfferOptionsWhereUniqueInput!]
  update: [ReferenceOnOfferOptionsUpdateWithWhereUniqueWithoutOfferOptionInput!]
  updateMany: [ReferenceOnOfferOptionsUpdateManyWithWhereWithoutOfferOptionInput!]
  deleteMany: [ReferenceOnOfferOptionsScalarWhereInput!]
}

input ReferenceOnOfferOptionsUpsertWithWhereUniqueWithoutOfferOptionInput {
  where: ReferenceOnOfferOptionsWhereUniqueInput!
  update: ReferenceOnOfferOptionsUpdateWithoutOfferOptionInput!
  create: ReferenceOnOfferOptionsCreateWithoutOfferOptionInput!
}

input ReferenceOnOfferOptionsUpdateWithoutOfferOptionInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  reference: ReferenceUpdateOneRequiredWithoutOfferOptionsInput
}

input ReferenceUpdateOneRequiredWithoutOfferOptionsInput {
  create: ReferenceCreateWithoutOfferOptionsInput
  connectOrCreate: ReferenceCreateOrConnectWithoutOfferOptionsInput
  upsert: ReferenceUpsertWithoutOfferOptionsInput
  connect: ReferenceWhereUniqueInput
  update: ReferenceUpdateWithoutOfferOptionsInput
}

input ReferenceUpsertWithoutOfferOptionsInput {
  update: ReferenceUpdateWithoutOfferOptionsInput!
  create: ReferenceCreateWithoutOfferOptionsInput!
}

input ReferenceUpdateWithoutOfferOptionsInput {
  offeredTo: BoolFieldUpdateOperationsInput
  servedAsReferenceBefore: BoolFieldUpdateOperationsInput
  servedAsReferenceAt: NullableDateTimeFieldUpdateOperationsInput
  notes: NullableStringFieldUpdateOperationsInput
  dealClosed: NullableBoolFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  company: CompanyUpdateOneRequiredWithoutReferencesInput
  servedAsReferenceFor: CompanyUpdateOneWithoutReferencesServedForInput
  user: UserUpdateOneWithoutReferencesInput
}

input ReferenceOnOfferOptionsUpdateWithWhereUniqueWithoutOfferOptionInput {
  where: ReferenceOnOfferOptionsWhereUniqueInput!
  data: ReferenceOnOfferOptionsUpdateWithoutOfferOptionInput!
}

input ReferenceOnOfferOptionsUpdateManyWithWhereWithoutOfferOptionInput {
  where: ReferenceOnOfferOptionsScalarWhereInput!
  data: ReferenceOnOfferOptionsUpdateManyMutationInput!
}

input OfferOptionUpdateManyMutationInput {
  offerType: StringFieldUpdateOperationsInput
  status: BoolFieldUpdateOperationsInput
}

input ProductCreateInput {
  name: String!
  orderStartDate: DateTime!
  orderEndDate: DateTime!
  orderTerms: Int!
  monthlyUnitPrice: Int!
  quantity: Int!
  totalPrice: Int!
  createdAt: DateTime
  updatedAt: DateTime
  Company: CompanyCreateNestedOneWithoutProductsInput!
}

input CompanyCreateNestedOneWithoutProductsInput {
  create: CompanyCreateWithoutProductsInput
  connectOrCreate: CompanyCreateOrConnectWithoutProductsInput
  connect: CompanyWhereUniqueInput
}

input CompanyCreateWithoutProductsInput {
  annualRecurringRevenue: Int
  expectedToCloseAt: DateTime
  fiscalYearStartMonth: Int
  name: String!
  companyType: CompanyType!
  seatSize: Int
  createdAt: DateTime
  updatedAt: DateTime
  fiscalYear: Int
  renewalDate: DateTime
  referredOn: DateTime
  latestReferenceId: Int
  customer: CustomerCreateNestedOneWithoutCompaniesInput!
  leadSource: UserCreateNestedOneWithoutLeadSourceForInput
  companyParent: CompanyCreateNestedOneWithoutSubsidiaryInput
  primaryContact: UserCreateNestedOneWithoutPrimaryContactForInput
  references: ReferenceCreateNestedManyWithoutCompanyInput
  referencesServedFor: ReferenceCreateNestedManyWithoutServedAsReferenceForInput
  subsidiary: CompanyCreateNestedManyWithoutCompanyParentInput
  starredBy: CompanyStarredCreateNestedManyWithoutCompanyInput
  events: EventCreateNestedManyWithoutCompanyInput
  notes: NoteCreateNestedManyWithoutCompanyInput
  account: AccountCreateNestedOneWithoutCompanyInput!
  competitors: CompetitorCreateNestedManyWithoutCompanyInput
  contacts: ContactsCreateNestedManyWithoutCompanyInput
  UserCompanyRatings: UserCompanyRatingsCreateNestedManyWithoutCompanyInput
  listCompanies: ListCompanyCreateNestedManyWithoutCompanyInput
  Launch: LaunchCreateNestedManyWithoutCompanyInput
}

input CompanyCreateOrConnectWithoutProductsInput {
  where: CompanyWhereUniqueInput!
  create: CompanyCreateWithoutProductsInput!
}

input ProductCreateManyInput {
  id: Int
  name: String!
  orderStartDate: DateTime!
  orderEndDate: DateTime!
  orderTerms: Int!
  monthlyUnitPrice: Int!
  quantity: Int!
  totalPrice: Int!
  createdAt: DateTime
  updatedAt: DateTime
  companyId: Int!
}

input ProductUpdateInput {
  name: StringFieldUpdateOperationsInput
  orderStartDate: DateTimeFieldUpdateOperationsInput
  orderEndDate: DateTimeFieldUpdateOperationsInput
  orderTerms: IntFieldUpdateOperationsInput
  monthlyUnitPrice: IntFieldUpdateOperationsInput
  quantity: IntFieldUpdateOperationsInput
  totalPrice: IntFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  Company: CompanyUpdateOneRequiredWithoutProductsInput
}

input CompanyUpdateOneRequiredWithoutProductsInput {
  create: CompanyCreateWithoutProductsInput
  connectOrCreate: CompanyCreateOrConnectWithoutProductsInput
  upsert: CompanyUpsertWithoutProductsInput
  connect: CompanyWhereUniqueInput
  update: CompanyUpdateWithoutProductsInput
}

input CompanyUpsertWithoutProductsInput {
  update: CompanyUpdateWithoutProductsInput!
  create: CompanyCreateWithoutProductsInput!
}

input CompanyUpdateWithoutProductsInput {
  annualRecurringRevenue: NullableIntFieldUpdateOperationsInput
  expectedToCloseAt: NullableDateTimeFieldUpdateOperationsInput
  fiscalYearStartMonth: NullableIntFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  companyType: EnumCompanyTypeFieldUpdateOperationsInput
  seatSize: NullableIntFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  fiscalYear: IntFieldUpdateOperationsInput
  renewalDate: NullableDateTimeFieldUpdateOperationsInput
  referredOn: NullableDateTimeFieldUpdateOperationsInput
  latestReferenceId: NullableIntFieldUpdateOperationsInput
  customer: CustomerUpdateOneRequiredWithoutCompaniesInput
  leadSource: UserUpdateOneWithoutLeadSourceForInput
  companyParent: CompanyUpdateOneWithoutSubsidiaryInput
  primaryContact: UserUpdateOneWithoutPrimaryContactForInput
  references: ReferenceUpdateManyWithoutCompanyInput
  referencesServedFor: ReferenceUpdateManyWithoutServedAsReferenceForInput
  subsidiary: CompanyUpdateManyWithoutCompanyParentInput
  starredBy: CompanyStarredUpdateManyWithoutCompanyInput
  events: EventUpdateManyWithoutCompanyInput
  notes: NoteUpdateManyWithoutCompanyInput
  account: AccountUpdateOneRequiredWithoutCompanyInput
  competitors: CompetitorUpdateManyWithoutCompanyInput
  contacts: ContactsUpdateManyWithoutCompanyInput
  UserCompanyRatings: UserCompanyRatingsUpdateManyWithoutCompanyInput
  listCompanies: ListCompanyUpdateManyWithoutCompanyInput
  Launch: LaunchUpdateManyWithoutCompanyInput
}

input RatingCreateInput {
  status: RatingStatus!
  createdAt: DateTime
  updatedAt: DateTime
  userratingcompany: UserCompanyRatingsCreateNestedManyWithoutRatingInput
}

input UserCompanyRatingsCreateNestedManyWithoutRatingInput {
  create: [UserCompanyRatingsCreateWithoutRatingInput!]
  connectOrCreate: [UserCompanyRatingsCreateOrConnectWithoutRatingInput!]
  createMany: UserCompanyRatingsCreateManyRatingInputEnvelope
  connect: [UserCompanyRatingsWhereUniqueInput!]
}

input UserCompanyRatingsCreateWithoutRatingInput {
  createdAt: DateTime
  updatedAt: DateTime
  user: UserCreateNestedOneWithoutUserCompanyRatingsInput!
  company: CompanyCreateNestedOneWithoutUserCompanyRatingsInput!
}

input UserCompanyRatingsCreateOrConnectWithoutRatingInput {
  where: UserCompanyRatingsWhereUniqueInput!
  create: UserCompanyRatingsCreateWithoutRatingInput!
}

input UserCompanyRatingsCreateManyRatingInputEnvelope {
  data: [UserCompanyRatingsCreateManyRatingInput!]!
  skipDuplicates: Boolean
}

input UserCompanyRatingsCreateManyRatingInput {
  id: Int
  userId: Int!
  companyId: Int!
  createdAt: DateTime
  updatedAt: DateTime
}

input RatingCreateManyInput {
  id: Int
  status: RatingStatus!
  createdAt: DateTime
  updatedAt: DateTime
}

input RatingUpdateInput {
  status: EnumRatingStatusFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  userratingcompany: UserCompanyRatingsUpdateManyWithoutRatingInput
}

input UserCompanyRatingsUpdateManyWithoutRatingInput {
  create: [UserCompanyRatingsCreateWithoutRatingInput!]
  connectOrCreate: [UserCompanyRatingsCreateOrConnectWithoutRatingInput!]
  upsert: [UserCompanyRatingsUpsertWithWhereUniqueWithoutRatingInput!]
  createMany: UserCompanyRatingsCreateManyRatingInputEnvelope
  connect: [UserCompanyRatingsWhereUniqueInput!]
  set: [UserCompanyRatingsWhereUniqueInput!]
  disconnect: [UserCompanyRatingsWhereUniqueInput!]
  delete: [UserCompanyRatingsWhereUniqueInput!]
  update: [UserCompanyRatingsUpdateWithWhereUniqueWithoutRatingInput!]
  updateMany: [UserCompanyRatingsUpdateManyWithWhereWithoutRatingInput!]
  deleteMany: [UserCompanyRatingsScalarWhereInput!]
}

input UserCompanyRatingsUpsertWithWhereUniqueWithoutRatingInput {
  where: UserCompanyRatingsWhereUniqueInput!
  update: UserCompanyRatingsUpdateWithoutRatingInput!
  create: UserCompanyRatingsCreateWithoutRatingInput!
}

input UserCompanyRatingsUpdateWithoutRatingInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutUserCompanyRatingsInput
  company: CompanyUpdateOneRequiredWithoutUserCompanyRatingsInput
}

input UserCompanyRatingsUpdateWithWhereUniqueWithoutRatingInput {
  where: UserCompanyRatingsWhereUniqueInput!
  data: UserCompanyRatingsUpdateWithoutRatingInput!
}

input UserCompanyRatingsUpdateManyWithWhereWithoutRatingInput {
  where: UserCompanyRatingsScalarWhereInput!
  data: UserCompanyRatingsUpdateManyMutationInput!
}

input RatingUpdateManyMutationInput {
  status: EnumRatingStatusFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ReferenceCreateInput {
  offeredTo: Boolean!
  servedAsReferenceBefore: Boolean!
  servedAsReferenceAt: DateTime
  notes: String
  dealClosed: Boolean
  createdAt: DateTime
  company: CompanyCreateNestedOneWithoutReferencesInput!
  servedAsReferenceFor: CompanyCreateNestedOneWithoutReferencesServedForInput
  offerOptions: ReferenceOnOfferOptionsCreateNestedManyWithoutReferenceInput
  user: UserCreateNestedOneWithoutReferencesInput
}

input ReferenceCreateManyInput {
  id: Int
  companyId: Int!
  offeredTo: Boolean!
  servedAsReferenceBefore: Boolean!
  servedAsReferenceForId: Int
  servedAsReferenceAt: DateTime
  notes: String
  dealClosed: Boolean
  createdAt: DateTime
  userId: Int!
}

input ReferenceUpdateInput {
  offeredTo: BoolFieldUpdateOperationsInput
  servedAsReferenceBefore: BoolFieldUpdateOperationsInput
  servedAsReferenceAt: NullableDateTimeFieldUpdateOperationsInput
  notes: NullableStringFieldUpdateOperationsInput
  dealClosed: NullableBoolFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  company: CompanyUpdateOneRequiredWithoutReferencesInput
  servedAsReferenceFor: CompanyUpdateOneWithoutReferencesServedForInput
  offerOptions: ReferenceOnOfferOptionsUpdateManyWithoutReferenceInput
  user: UserUpdateOneWithoutReferencesInput
}

input ReferenceOnOfferOptionsCreateInput {
  createdAt: DateTime
  reference: ReferenceCreateNestedOneWithoutOfferOptionsInput!
  offerOption: OfferOptionCreateNestedOneWithoutReferencesInput!
}

input ReferenceOnOfferOptionsCreateManyInput {
  createdAt: DateTime
  referenceId: Int!
  offerOptionId: Int!
}

input ReferenceOnOfferOptionsUpdateInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  reference: ReferenceUpdateOneRequiredWithoutOfferOptionsInput
  offerOption: OfferOptionUpdateOneRequiredWithoutReferencesInput
}

input RoleCreateInput {
  name: String!
  createdAt: DateTime
  updatedAt: DateTime
  capabilities: RoleCreatecapabilitiesInput
  customer: CustomerCreateNestedOneWithoutRolesInput!
  userRoles: UserRoleCreateNestedManyWithoutRoleInput
}

input RoleCreateManyInput {
  id: Int
  name: String!
  customerId: Int!
  createdAt: DateTime
  updatedAt: DateTime
  capabilities: RoleCreateManycapabilitiesInput
}

input RoleUpdateInput {
  name: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  capabilities: RoleUpdatecapabilitiesInput
  customer: CustomerUpdateOneRequiredWithoutRolesInput
  userRoles: UserRoleUpdateManyWithoutRoleInput
}

input SalesLeadCreateInput {
  company: String!
  description: String
  email: String
  name: String!
  processedAt: DateTime
  source: String!
  status: String!
  createdAt: DateTime
  updatedAt: DateTime
  customer: CustomerCreateNestedOneWithoutSalesLeadsInput!
}

input CustomerCreateNestedOneWithoutSalesLeadsInput {
  create: CustomerCreateWithoutSalesLeadsInput
  connectOrCreate: CustomerCreateOrConnectWithoutSalesLeadsInput
  connect: CustomerWhereUniqueInput
}

input CustomerCreateWithoutSalesLeadsInput {
  name: String!
  type: CustomerType!
  favoritedAt: DateTime
  createdAt: DateTime
  updatedAt: DateTime
  oktaClientId: String
  oktaDomain: String
  oktaClientSecret: String
  oktaApiKey: String
  launch: LaunchCreateNestedManyWithoutCustomerInput
  companies: CompanyCreateNestedManyWithoutCustomerInput
  integrations: CustomerIntegrationCreateNestedManyWithoutCustomerInput
  events: EventCreateNestedManyWithoutCustomerInput
  externalGroups: ExternalGroupCreateNestedManyWithoutCustomerInput
  externalUsers: ExternalUserCreateNestedManyWithoutCustomerInput
  groups: GroupCreateNestedManyWithoutCustomerInput
  notes: NoteCreateNestedManyWithoutCustomerInput
  roles: RoleCreateNestedManyWithoutCustomerInput
  syncEvents: SyncEventCreateNestedManyWithoutCustomerInput
  users: UserCreateNestedManyWithoutCustomerInput
  messageTemplate: MessageTemplateCreateNestedManyWithoutCustomerInput
  dynamicFields: DynamicUserFieldsCreateNestedManyWithoutCustomerInput
  lists: ListCreateNestedManyWithoutCustomerInput
  useCaseCollections: UseCaseCollectionsCreateNestedManyWithoutCustomerInput
  customerDataSources: DataSourcesOnCustomerCreateNestedManyWithoutCustomerInput
  dataObjectCollections: DataObjectCollectionsCreateNestedManyWithoutCustomerInput
}

input CustomerCreateOrConnectWithoutSalesLeadsInput {
  where: CustomerWhereUniqueInput!
  create: CustomerCreateWithoutSalesLeadsInput!
}

input SalesLeadCreateManyInput {
  id: Int
  company: String!
  customerId: Int!
  description: String
  email: String
  name: String!
  processedAt: DateTime
  source: String!
  status: String!
  createdAt: DateTime
  updatedAt: DateTime
}

input SalesLeadUpdateInput {
  company: StringFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  email: NullableStringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  processedAt: NullableDateTimeFieldUpdateOperationsInput
  source: StringFieldUpdateOperationsInput
  status: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  customer: CustomerUpdateOneRequiredWithoutSalesLeadsInput
}

input CustomerUpdateOneRequiredWithoutSalesLeadsInput {
  create: CustomerCreateWithoutSalesLeadsInput
  connectOrCreate: CustomerCreateOrConnectWithoutSalesLeadsInput
  upsert: CustomerUpsertWithoutSalesLeadsInput
  connect: CustomerWhereUniqueInput
  update: CustomerUpdateWithoutSalesLeadsInput
}

input CustomerUpsertWithoutSalesLeadsInput {
  update: CustomerUpdateWithoutSalesLeadsInput!
  create: CustomerCreateWithoutSalesLeadsInput!
}

input CustomerUpdateWithoutSalesLeadsInput {
  name: StringFieldUpdateOperationsInput
  type: EnumCustomerTypeFieldUpdateOperationsInput
  favoritedAt: NullableDateTimeFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  oktaClientId: NullableStringFieldUpdateOperationsInput
  oktaDomain: NullableStringFieldUpdateOperationsInput
  oktaClientSecret: NullableStringFieldUpdateOperationsInput
  oktaApiKey: NullableStringFieldUpdateOperationsInput
  launch: LaunchUpdateManyWithoutCustomerInput
  companies: CompanyUpdateManyWithoutCustomerInput
  integrations: CustomerIntegrationUpdateManyWithoutCustomerInput
  events: EventUpdateManyWithoutCustomerInput
  externalGroups: ExternalGroupUpdateManyWithoutCustomerInput
  externalUsers: ExternalUserUpdateManyWithoutCustomerInput
  groups: GroupUpdateManyWithoutCustomerInput
  notes: NoteUpdateManyWithoutCustomerInput
  roles: RoleUpdateManyWithoutCustomerInput
  syncEvents: SyncEventUpdateManyWithoutCustomerInput
  users: UserUpdateManyWithoutCustomerInput
  messageTemplate: MessageTemplateUpdateManyWithoutCustomerInput
  dynamicFields: DynamicUserFieldsUpdateManyWithoutCustomerInput
  lists: ListUpdateManyWithoutCustomerInput
  useCaseCollections: UseCaseCollectionsUpdateManyWithoutCustomerInput
  customerDataSources: DataSourcesOnCustomerUpdateManyWithoutCustomerInput
  dataObjectCollections: DataObjectCollectionsUpdateManyWithoutCustomerInput
}

input SyncEventCreateInput {
  completedAt: DateTime
  entityType: SyncEventEntityType!
  recordsCreated: Int
  recordsDeleted: Int
  recordsUpdated: Int
  replayId: String
  startedAt: DateTime
  type: SyncEventType!
  customer: CustomerCreateNestedOneWithoutSyncEventsInput!
}

input CustomerCreateNestedOneWithoutSyncEventsInput {
  create: CustomerCreateWithoutSyncEventsInput
  connectOrCreate: CustomerCreateOrConnectWithoutSyncEventsInput
  connect: CustomerWhereUniqueInput
}

input CustomerCreateWithoutSyncEventsInput {
  name: String!
  type: CustomerType!
  favoritedAt: DateTime
  createdAt: DateTime
  updatedAt: DateTime
  oktaClientId: String
  oktaDomain: String
  oktaClientSecret: String
  oktaApiKey: String
  launch: LaunchCreateNestedManyWithoutCustomerInput
  companies: CompanyCreateNestedManyWithoutCustomerInput
  integrations: CustomerIntegrationCreateNestedManyWithoutCustomerInput
  events: EventCreateNestedManyWithoutCustomerInput
  externalGroups: ExternalGroupCreateNestedManyWithoutCustomerInput
  externalUsers: ExternalUserCreateNestedManyWithoutCustomerInput
  groups: GroupCreateNestedManyWithoutCustomerInput
  notes: NoteCreateNestedManyWithoutCustomerInput
  roles: RoleCreateNestedManyWithoutCustomerInput
  salesLeads: SalesLeadCreateNestedManyWithoutCustomerInput
  users: UserCreateNestedManyWithoutCustomerInput
  messageTemplate: MessageTemplateCreateNestedManyWithoutCustomerInput
  dynamicFields: DynamicUserFieldsCreateNestedManyWithoutCustomerInput
  lists: ListCreateNestedManyWithoutCustomerInput
  useCaseCollections: UseCaseCollectionsCreateNestedManyWithoutCustomerInput
  customerDataSources: DataSourcesOnCustomerCreateNestedManyWithoutCustomerInput
  dataObjectCollections: DataObjectCollectionsCreateNestedManyWithoutCustomerInput
}

input CustomerCreateOrConnectWithoutSyncEventsInput {
  where: CustomerWhereUniqueInput!
  create: CustomerCreateWithoutSyncEventsInput!
}

input SyncEventCreateManyInput {
  id: Int
  completedAt: DateTime
  customerId: Int!
  entityType: SyncEventEntityType!
  recordsCreated: Int
  recordsDeleted: Int
  recordsUpdated: Int
  replayId: String
  startedAt: DateTime
  type: SyncEventType!
}

input SyncEventUpdateInput {
  completedAt: NullableDateTimeFieldUpdateOperationsInput
  entityType: EnumSyncEventEntityTypeFieldUpdateOperationsInput
  recordsCreated: IntFieldUpdateOperationsInput
  recordsDeleted: IntFieldUpdateOperationsInput
  recordsUpdated: IntFieldUpdateOperationsInput
  replayId: NullableStringFieldUpdateOperationsInput
  startedAt: DateTimeFieldUpdateOperationsInput
  type: EnumSyncEventTypeFieldUpdateOperationsInput
  customer: CustomerUpdateOneRequiredWithoutSyncEventsInput
}

input CustomerUpdateOneRequiredWithoutSyncEventsInput {
  create: CustomerCreateWithoutSyncEventsInput
  connectOrCreate: CustomerCreateOrConnectWithoutSyncEventsInput
  upsert: CustomerUpsertWithoutSyncEventsInput
  connect: CustomerWhereUniqueInput
  update: CustomerUpdateWithoutSyncEventsInput
}

input CustomerUpsertWithoutSyncEventsInput {
  update: CustomerUpdateWithoutSyncEventsInput!
  create: CustomerCreateWithoutSyncEventsInput!
}

input CustomerUpdateWithoutSyncEventsInput {
  name: StringFieldUpdateOperationsInput
  type: EnumCustomerTypeFieldUpdateOperationsInput
  favoritedAt: NullableDateTimeFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  oktaClientId: NullableStringFieldUpdateOperationsInput
  oktaDomain: NullableStringFieldUpdateOperationsInput
  oktaClientSecret: NullableStringFieldUpdateOperationsInput
  oktaApiKey: NullableStringFieldUpdateOperationsInput
  launch: LaunchUpdateManyWithoutCustomerInput
  companies: CompanyUpdateManyWithoutCustomerInput
  integrations: CustomerIntegrationUpdateManyWithoutCustomerInput
  events: EventUpdateManyWithoutCustomerInput
  externalGroups: ExternalGroupUpdateManyWithoutCustomerInput
  externalUsers: ExternalUserUpdateManyWithoutCustomerInput
  groups: GroupUpdateManyWithoutCustomerInput
  notes: NoteUpdateManyWithoutCustomerInput
  roles: RoleUpdateManyWithoutCustomerInput
  salesLeads: SalesLeadUpdateManyWithoutCustomerInput
  users: UserUpdateManyWithoutCustomerInput
  messageTemplate: MessageTemplateUpdateManyWithoutCustomerInput
  dynamicFields: DynamicUserFieldsUpdateManyWithoutCustomerInput
  lists: ListUpdateManyWithoutCustomerInput
  useCaseCollections: UseCaseCollectionsUpdateManyWithoutCustomerInput
  customerDataSources: DataSourcesOnCustomerUpdateManyWithoutCustomerInput
  dataObjectCollections: DataObjectCollectionsUpdateManyWithoutCustomerInput
}

input TemplateShortCodesCreateInput {
  shortcode: String!
  icon: String!
  label: String!
  createdAt: DateTime
}

input TemplateShortCodesCreateManyInput {
  id: Int
  shortcode: String!
  icon: String!
  label: String!
  createdAt: DateTime
}

input TemplateShortCodesUpdateInput {
  shortcode: StringFieldUpdateOperationsInput
  icon: StringFieldUpdateOperationsInput
  label: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
}

input TemplateShortCodesUpdateManyMutationInput {
  shortcode: StringFieldUpdateOperationsInput
  icon: StringFieldUpdateOperationsInput
  label: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
}

input UseCaseCollectionsCreateInput {
  name: String!
  default: Boolean
  createdAt: DateTime
  updatedAt: DateTime
  customer: CustomerCreateNestedOneWithoutUseCaseCollectionsInput!
  useCasesOnCollections: UseCasesOnCollectionsCreateNestedManyWithoutCollectionInput
}

input CustomerCreateNestedOneWithoutUseCaseCollectionsInput {
  create: CustomerCreateWithoutUseCaseCollectionsInput
  connectOrCreate: CustomerCreateOrConnectWithoutUseCaseCollectionsInput
  connect: CustomerWhereUniqueInput
}

input CustomerCreateWithoutUseCaseCollectionsInput {
  name: String!
  type: CustomerType!
  favoritedAt: DateTime
  createdAt: DateTime
  updatedAt: DateTime
  oktaClientId: String
  oktaDomain: String
  oktaClientSecret: String
  oktaApiKey: String
  launch: LaunchCreateNestedManyWithoutCustomerInput
  companies: CompanyCreateNestedManyWithoutCustomerInput
  integrations: CustomerIntegrationCreateNestedManyWithoutCustomerInput
  events: EventCreateNestedManyWithoutCustomerInput
  externalGroups: ExternalGroupCreateNestedManyWithoutCustomerInput
  externalUsers: ExternalUserCreateNestedManyWithoutCustomerInput
  groups: GroupCreateNestedManyWithoutCustomerInput
  notes: NoteCreateNestedManyWithoutCustomerInput
  roles: RoleCreateNestedManyWithoutCustomerInput
  salesLeads: SalesLeadCreateNestedManyWithoutCustomerInput
  syncEvents: SyncEventCreateNestedManyWithoutCustomerInput
  users: UserCreateNestedManyWithoutCustomerInput
  messageTemplate: MessageTemplateCreateNestedManyWithoutCustomerInput
  dynamicFields: DynamicUserFieldsCreateNestedManyWithoutCustomerInput
  lists: ListCreateNestedManyWithoutCustomerInput
  customerDataSources: DataSourcesOnCustomerCreateNestedManyWithoutCustomerInput
  dataObjectCollections: DataObjectCollectionsCreateNestedManyWithoutCustomerInput
}

input CustomerCreateOrConnectWithoutUseCaseCollectionsInput {
  where: CustomerWhereUniqueInput!
  create: CustomerCreateWithoutUseCaseCollectionsInput!
}

input UseCaseCollectionsCreateManyInput {
  id: Int
  name: String!
  customerId: Int!
  default: Boolean
  createdAt: DateTime
  updatedAt: DateTime
}

input UseCaseCollectionsUpdateInput {
  name: StringFieldUpdateOperationsInput
  default: BoolFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
  customer: CustomerUpdateOneRequiredWithoutUseCaseCollectionsInput
  useCasesOnCollections: UseCasesOnCollectionsUpdateManyWithoutCollectionInput
}

input CustomerUpdateOneRequiredWithoutUseCaseCollectionsInput {
  create: CustomerCreateWithoutUseCaseCollectionsInput
  connectOrCreate: CustomerCreateOrConnectWithoutUseCaseCollectionsInput
  upsert: CustomerUpsertWithoutUseCaseCollectionsInput
  connect: CustomerWhereUniqueInput
  update: CustomerUpdateWithoutUseCaseCollectionsInput
}

input CustomerUpsertWithoutUseCaseCollectionsInput {
  update: CustomerUpdateWithoutUseCaseCollectionsInput!
  create: CustomerCreateWithoutUseCaseCollectionsInput!
}

input CustomerUpdateWithoutUseCaseCollectionsInput {
  name: StringFieldUpdateOperationsInput
  type: EnumCustomerTypeFieldUpdateOperationsInput
  favoritedAt: NullableDateTimeFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  oktaClientId: NullableStringFieldUpdateOperationsInput
  oktaDomain: NullableStringFieldUpdateOperationsInput
  oktaClientSecret: NullableStringFieldUpdateOperationsInput
  oktaApiKey: NullableStringFieldUpdateOperationsInput
  launch: LaunchUpdateManyWithoutCustomerInput
  companies: CompanyUpdateManyWithoutCustomerInput
  integrations: CustomerIntegrationUpdateManyWithoutCustomerInput
  events: EventUpdateManyWithoutCustomerInput
  externalGroups: ExternalGroupUpdateManyWithoutCustomerInput
  externalUsers: ExternalUserUpdateManyWithoutCustomerInput
  groups: GroupUpdateManyWithoutCustomerInput
  notes: NoteUpdateManyWithoutCustomerInput
  roles: RoleUpdateManyWithoutCustomerInput
  salesLeads: SalesLeadUpdateManyWithoutCustomerInput
  syncEvents: SyncEventUpdateManyWithoutCustomerInput
  users: UserUpdateManyWithoutCustomerInput
  messageTemplate: MessageTemplateUpdateManyWithoutCustomerInput
  dynamicFields: DynamicUserFieldsUpdateManyWithoutCustomerInput
  lists: ListUpdateManyWithoutCustomerInput
  customerDataSources: DataSourcesOnCustomerUpdateManyWithoutCustomerInput
  dataObjectCollections: DataObjectCollectionsUpdateManyWithoutCustomerInput
}

input UseCasesCreateInput {
  name: String!
  displayName: String!
  createdAt: DateTime
  updatedAt: DateTime
  useCasesOnCollections: UseCasesOnCollectionsCreateNestedManyWithoutUseCaseInput
}

input UseCasesOnCollectionsCreateNestedManyWithoutUseCaseInput {
  create: [UseCasesOnCollectionsCreateWithoutUseCaseInput!]
  connectOrCreate: [UseCasesOnCollectionsCreateOrConnectWithoutUseCaseInput!]
  createMany: UseCasesOnCollectionsCreateManyUseCaseInputEnvelope
  connect: [UseCasesOnCollectionsWhereUniqueInput!]
}

input UseCasesOnCollectionsCreateWithoutUseCaseInput {
  status: Boolean!
  createdAt: DateTime
  updatedAt: DateTime
  collection: UseCaseCollectionsCreateNestedOneWithoutUseCasesOnCollectionsInput!
}

input UseCaseCollectionsCreateNestedOneWithoutUseCasesOnCollectionsInput {
  create: UseCaseCollectionsCreateWithoutUseCasesOnCollectionsInput
  connectOrCreate: UseCaseCollectionsCreateOrConnectWithoutUseCasesOnCollectionsInput
  connect: UseCaseCollectionsWhereUniqueInput
}

input UseCaseCollectionsCreateWithoutUseCasesOnCollectionsInput {
  name: String!
  default: Boolean
  createdAt: DateTime
  updatedAt: DateTime
  customer: CustomerCreateNestedOneWithoutUseCaseCollectionsInput!
}

input UseCaseCollectionsCreateOrConnectWithoutUseCasesOnCollectionsInput {
  where: UseCaseCollectionsWhereUniqueInput!
  create: UseCaseCollectionsCreateWithoutUseCasesOnCollectionsInput!
}

input UseCasesOnCollectionsCreateOrConnectWithoutUseCaseInput {
  where: UseCasesOnCollectionsWhereUniqueInput!
  create: UseCasesOnCollectionsCreateWithoutUseCaseInput!
}

input UseCasesOnCollectionsCreateManyUseCaseInputEnvelope {
  data: [UseCasesOnCollectionsCreateManyUseCaseInput!]!
  skipDuplicates: Boolean
}

input UseCasesOnCollectionsCreateManyUseCaseInput {
  id: Int
  status: Boolean!
  collectionId: Int!
  createdAt: DateTime
  updatedAt: DateTime
}

input UseCasesCreateManyInput {
  id: Int
  name: String!
  displayName: String!
  createdAt: DateTime
  updatedAt: DateTime
}

input UseCasesUpdateInput {
  name: StringFieldUpdateOperationsInput
  displayName: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
  useCasesOnCollections: UseCasesOnCollectionsUpdateManyWithoutUseCaseInput
}

input UseCasesOnCollectionsUpdateManyWithoutUseCaseInput {
  create: [UseCasesOnCollectionsCreateWithoutUseCaseInput!]
  connectOrCreate: [UseCasesOnCollectionsCreateOrConnectWithoutUseCaseInput!]
  upsert: [UseCasesOnCollectionsUpsertWithWhereUniqueWithoutUseCaseInput!]
  createMany: UseCasesOnCollectionsCreateManyUseCaseInputEnvelope
  connect: [UseCasesOnCollectionsWhereUniqueInput!]
  set: [UseCasesOnCollectionsWhereUniqueInput!]
  disconnect: [UseCasesOnCollectionsWhereUniqueInput!]
  delete: [UseCasesOnCollectionsWhereUniqueInput!]
  update: [UseCasesOnCollectionsUpdateWithWhereUniqueWithoutUseCaseInput!]
  updateMany: [UseCasesOnCollectionsUpdateManyWithWhereWithoutUseCaseInput!]
  deleteMany: [UseCasesOnCollectionsScalarWhereInput!]
}

input UseCasesOnCollectionsUpsertWithWhereUniqueWithoutUseCaseInput {
  where: UseCasesOnCollectionsWhereUniqueInput!
  update: UseCasesOnCollectionsUpdateWithoutUseCaseInput!
  create: UseCasesOnCollectionsCreateWithoutUseCaseInput!
}

input UseCasesOnCollectionsUpdateWithoutUseCaseInput {
  status: BoolFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
  collection: UseCaseCollectionsUpdateOneRequiredWithoutUseCasesOnCollectionsInput
}

input UseCaseCollectionsUpdateOneRequiredWithoutUseCasesOnCollectionsInput {
  create: UseCaseCollectionsCreateWithoutUseCasesOnCollectionsInput
  connectOrCreate: UseCaseCollectionsCreateOrConnectWithoutUseCasesOnCollectionsInput
  upsert: UseCaseCollectionsUpsertWithoutUseCasesOnCollectionsInput
  connect: UseCaseCollectionsWhereUniqueInput
  update: UseCaseCollectionsUpdateWithoutUseCasesOnCollectionsInput
}

input UseCaseCollectionsUpsertWithoutUseCasesOnCollectionsInput {
  update: UseCaseCollectionsUpdateWithoutUseCasesOnCollectionsInput!
  create: UseCaseCollectionsCreateWithoutUseCasesOnCollectionsInput!
}

input UseCaseCollectionsUpdateWithoutUseCasesOnCollectionsInput {
  name: StringFieldUpdateOperationsInput
  default: BoolFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
  customer: CustomerUpdateOneRequiredWithoutUseCaseCollectionsInput
}

input UseCasesOnCollectionsUpdateWithWhereUniqueWithoutUseCaseInput {
  where: UseCasesOnCollectionsWhereUniqueInput!
  data: UseCasesOnCollectionsUpdateWithoutUseCaseInput!
}

input UseCasesOnCollectionsUpdateManyWithWhereWithoutUseCaseInput {
  where: UseCasesOnCollectionsScalarWhereInput!
  data: UseCasesOnCollectionsUpdateManyMutationInput!
}

input UseCasesUpdateManyMutationInput {
  name: StringFieldUpdateOperationsInput
  displayName: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
}

input UseCasesOnCollectionsCreateInput {
  status: Boolean!
  createdAt: DateTime
  updatedAt: DateTime
  useCase: UseCasesCreateNestedOneWithoutUseCasesOnCollectionsInput!
  collection: UseCaseCollectionsCreateNestedOneWithoutUseCasesOnCollectionsInput!
}

input UseCasesOnCollectionsCreateManyInput {
  id: Int
  status: Boolean!
  useCaseId: Int!
  collectionId: Int!
  createdAt: DateTime
  updatedAt: DateTime
}

input UseCasesOnCollectionsUpdateInput {
  status: BoolFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
  useCase: UseCasesUpdateOneRequiredWithoutUseCasesOnCollectionsInput
  collection: UseCaseCollectionsUpdateOneRequiredWithoutUseCasesOnCollectionsInput
}

input UserCreateInput {
  admin: Boolean
  email: String!
  name: String!
  passwordHash: String
  passwordSalt: String
  workPhone: String
  mobilePhone: String
  title: String
  token: String
  notificationSettings: JSON
  createdAt: DateTime
  updatedAt: DateTime
  dynamicFields: JSON
  active: Boolean
  oktaUserId: Int
  oktaManagerId: Int
  forgetPassword: String
  csmStatus: Boolean
  crmStatus: Boolean
  customer: CustomerCreateNestedOneWithoutUsersInput!
  leadSourceFor: CompanyCreateNestedManyWithoutLeadSourceInput
  primaryContactFor: CompanyCreateNestedManyWithoutPrimaryContactInput
  starred: CompanyStarredCreateNestedManyWithoutUserInput
  externalUser: ExternalUserCreateNestedManyWithoutUserInput
  groups: GroupUserCreateNestedManyWithoutUserInput
  Note: NoteCreateNestedManyWithoutUserInput
  roles: UserRoleCreateNestedManyWithoutUserInput
  userEvents: UserEventsCreateNestedManyWithoutUserInput
  UserCompanyRatings: UserCompanyRatingsCreateNestedManyWithoutUserInput
  noteUserTags: NoteUserTagsCreateNestedManyWithoutUserInput
  messageTemplate: MessageTemplateCreateNestedManyWithoutUserInput
  Feedback: FeedbackCreateNestedManyWithoutUserInput
  references: ReferenceCreateNestedManyWithoutUserInput
  userManager: UserManagerCreateNestedManyWithoutUserInput
  userReportee: UserManagerCreateNestedManyWithoutManagerInput
}

input UserCreateManyInput {
  id: Int
  admin: Boolean
  customerId: Int!
  email: String!
  name: String!
  passwordHash: String
  passwordSalt: String
  workPhone: String
  mobilePhone: String
  title: String
  token: String
  notificationSettings: JSON
  createdAt: DateTime
  updatedAt: DateTime
  dynamicFields: JSON
  active: Boolean
  oktaUserId: Int
  oktaManagerId: Int
  forgetPassword: String
  csmStatus: Boolean
  crmStatus: Boolean
}

input UserUpdateInput {
  admin: BoolFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  passwordHash: NullableStringFieldUpdateOperationsInput
  passwordSalt: NullableStringFieldUpdateOperationsInput
  workPhone: NullableStringFieldUpdateOperationsInput
  mobilePhone: NullableStringFieldUpdateOperationsInput
  title: NullableStringFieldUpdateOperationsInput
  token: NullableStringFieldUpdateOperationsInput
  notificationSettings: JSON
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  dynamicFields: JSON
  active: BoolFieldUpdateOperationsInput
  oktaUserId: NullableIntFieldUpdateOperationsInput
  oktaManagerId: NullableIntFieldUpdateOperationsInput
  forgetPassword: NullableStringFieldUpdateOperationsInput
  csmStatus: BoolFieldUpdateOperationsInput
  crmStatus: BoolFieldUpdateOperationsInput
  customer: CustomerUpdateOneRequiredWithoutUsersInput
  leadSourceFor: CompanyUpdateManyWithoutLeadSourceInput
  primaryContactFor: CompanyUpdateManyWithoutPrimaryContactInput
  starred: CompanyStarredUpdateManyWithoutUserInput
  externalUser: ExternalUserUpdateManyWithoutUserInput
  groups: GroupUserUpdateManyWithoutUserInput
  Note: NoteUpdateManyWithoutUserInput
  roles: UserRoleUpdateManyWithoutUserInput
  userEvents: UserEventsUpdateManyWithoutUserInput
  UserCompanyRatings: UserCompanyRatingsUpdateManyWithoutUserInput
  noteUserTags: NoteUserTagsUpdateManyWithoutUserInput
  messageTemplate: MessageTemplateUpdateManyWithoutUserInput
  Feedback: FeedbackUpdateManyWithoutUserInput
  references: ReferenceUpdateManyWithoutUserInput
  userManager: UserManagerUpdateManyWithoutUserInput
  userReportee: UserManagerUpdateManyWithoutManagerInput
}

input UserCompanyRatingsCreateInput {
  createdAt: DateTime
  updatedAt: DateTime
  user: UserCreateNestedOneWithoutUserCompanyRatingsInput!
  rating: RatingCreateNestedOneWithoutUserratingcompanyInput!
  company: CompanyCreateNestedOneWithoutUserCompanyRatingsInput!
}

input UserCompanyRatingsCreateManyInput {
  id: Int
  userId: Int!
  ratingId: Int!
  companyId: Int!
  createdAt: DateTime
  updatedAt: DateTime
}

input UserCompanyRatingsUpdateInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutUserCompanyRatingsInput
  rating: RatingUpdateOneRequiredWithoutUserratingcompanyInput
  company: CompanyUpdateOneRequiredWithoutUserCompanyRatingsInput
}

input UserEventsCreateInput {
  readAt: DateTime
  flaggedAt: Int
  hideAt: DateTime
  createdAt: DateTime
  user: UserCreateNestedOneWithoutUserEventsInput!
  event: EventCreateNestedOneWithoutUserEventsInput!
}

input UserEventsCreateManyInput {
  id: Int
  userId: Int!
  readAt: DateTime
  flaggedAt: Int
  hideAt: DateTime
  eventId: Int!
  createdAt: DateTime
}

input UserEventsUpdateInput {
  readAt: NullableDateTimeFieldUpdateOperationsInput
  flaggedAt: NullableIntFieldUpdateOperationsInput
  hideAt: NullableDateTimeFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutUserEventsInput
  event: EventUpdateOneRequiredWithoutUserEventsInput
}

input UserManagerCreateInput {
  createdAt: DateTime
  user: UserCreateNestedOneWithoutUserManagerInput!
  manager: UserCreateNestedOneWithoutUserReporteeInput!
}

input UserManagerCreateManyInput {
  id: Int
  userId: Int!
  managerId: Int!
  createdAt: DateTime
}

input UserManagerUpdateInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutUserManagerInput
  manager: UserUpdateOneRequiredWithoutUserReporteeInput
}

input UserRoleCreateInput {
  createdAt: DateTime
  role: RoleCreateNestedOneWithoutUserRolesInput!
  user: UserCreateNestedOneWithoutRolesInput!
}

input UserRoleCreateManyInput {
  id: Int
  roleId: Int!
  userId: Int!
  createdAt: DateTime
}

input UserRoleUpdateInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  role: RoleUpdateOneRequiredWithoutUserRolesInput
  user: UserUpdateOneRequiredWithoutRolesInput
}

type EmailCreateArgs {
  eventType: String!
  companyType: String!
  messageType: String
  text: String!
  subject: String!
  title: String
  sendToAddress: String
  delta: JSON!
}
