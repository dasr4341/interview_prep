import { PatientEventActionTypes } from 'health-generatedTypes';

export const messagesData = {
  successList: {
    login: 'Login successful',
    resend: 'Resend successfully! Please check your mail',
    referenceCreate: 'Reference created successfully',
    referenceDelete: 'Reference deleted successfully',
    objectCreate: 'Data object collection created successfully',
    objectUpdate: 'Data object collection updated successfully',
    objectDelete: 'Data object deleted successfully',
    remove: 'Successfully removed',
    eventUnHide: 'Event successfully visible now',
    eyeballHighlighted: 'Eyeball highlighted',
    eyeballNotHighlighted: 'Eyeball not highlighted',
    lunchCreate: 'Launch email created successfully',
    hustleHintCreate: 'Hustle hint created successfully',
    noteCreate: 'Note created successfully',
    noteUpdate: 'Note updated successfully',
    noteDelete: 'Note deleted successfully',
    roleCreate: 'Role created successfully',
    roleUpdate: 'Role updated successfully',
    roleDelete: 'Role deleted successfully',
    settingUpdate: 'Settings updated!',
    integrationUpdate: 'Integration updated successfully',
    thresholdUpdate: 'Threshold updated successfully',
    createFacility: 'Facility added successfully',
    updateFacility: 'Facility updated successfully',
    groupCreate: 'This user group is successfully created',
    groupAdd: 'Group added successfully',
    groupUpdate: 'This user group is successfully updated',
    groupDelete: 'Group deleted successfully',
    groupRemoved: 'User removed from this group successfully',
    listDelete: 'List deleted successfully',
    duplicateTemplate: 'Template duplicated successfully',
    templateAssign: 'Template assigned',
    templateShare: 'Template shared',
    templateUnShare: 'Template unshared',
    templateRemoved: 'Email template removed successfully',
    templateDeleted: 'Email template deleted successfully',
    templateUnAssign: 'Template unassigned',
    useCaseCreate: 'Use case collection created successfully',
    useCaseUpdate: 'Use case collection updated successfully',
    useCaseDelete: 'Use case deleted successfully',
    useCaseCopyCreate: 'Copy of use case created successfully',
    managerAssign: 'Manager assigned successfully',
    notificationUpdate: 'User notification updated successfully',
    passwordUpdate: 'Password has been updated successfully',
    userDeactivate: 'User deactivated successfully',
    usersDeactivate: 'Users deactivated successfully',
    listUpdate: 'Company list updated ',
    ratingAdd: 'Added company rating successfully',
    userRoleUpdate: 'User role updated successfully',
    templateCreate: 'Template created successfully',
    templateUpdate: 'Template updated successfully',
    surveyTemplateRemoved: ' Template removed successfully',
    surveyDuplicate: 'Assessment duplicated successfully',
    surveyReminder: 'Assessment reminder sent successfully',
    listCreated: 'Company list created successfully',
    activeUser: 'User active successfully',
    inActiveUser: 'User inactive successfully',
    passwordUpdated: 'Your password successfully updated',
    ownerCreated: 'Client created successfully',
    ownerEdited: 'Client updated successfully',
    supporterStatusUpdate: (action: PatientEventActionTypes) => `Supporter ${action.toLowerCase()} successfully`,
    supporterRegistered: 'Supporter registered successfully',
    surveyDelete: 'Assessment deleted successfully',
    createStandardTemplate: 'Template created successfully',
    updateStandardTemplate: 'Template updated successfully',
    deleteStandardTemplate: 'Template deleted successfully',
    changeStatusStandardTemplate: 'Template status changed successfully',
    surveyTemplateWarning: {
      active: 'Once template is activated, all campaigns will be activated. Are you sure you want to go ahead?',
      inActive: 'Once template is deactivated, all campaigns will be paused. Also, new campaigns can not be created. Are you sure you want to go ahead?'
    },
    patientContactAdded: 'Patient contact added successfully',
    patientContactUpdated: 'Patient contact updated successfully',
    assessmentSubmit: 'Assessment submitted successfully.',
    assessmentSendToPatient: 'Assessment sent successfully',
    assessmentScheduled: 'Assessment scheduled successfully',
    deletedSuccessful: (user?: string) => `${user || 'User'} deleted successfully`,
    invitationSent:  'Invitation sent successfully'
  },
  errorList: {
    required: 'This field is required',
    requiredQuestion: 'This question is required',
    passwordCriteria: 'Password needs to be at least 8 characters in length. Contain 1 upper case letter (A-Z), 1 lower case letter (a-z), Numbers (0-9) and a special character.',
    npsErrorBetween: 'Please enter value between 0 to 10',
    npsErrorMinMax: 'Min value is not greater than to max',
    rating: 'Select rating option',
    ratingComment: 'Comment requires at least 25 characters',
    text: 'Please type a text',
    useCaseCreate: 'Use case name is required',
    groupCreate: 'User group name is required',
    email: 'Enter valid email',
    facilityName: 'Facility name is required',
    facilityUserEmail: 'Facility user email is required',
    template: 'Please select a template',
    url: 'Enter valid URL',
    companyListName: 'Company list name is required',
    companyListNameCharacter: 'Company list name should be within 30 characters',
    group: 'Please select at least one group',
    useCase: 'Use case is required field',
    dataObject: 'Data object is required field',
    actionType: 'Passed action type is not implemented',
    title: 'Title field is required',
    subject: 'Subject field is required',
    setting: 'Please select at least one setting',
    csv: 'Please upload csv file',
    otp: 'Please enter sent OTP',
    invalidOtp: 'Invalid OTP',
    otpRequired: 'Please enter otp to continue',
    feedback: 'Feedback value is a required field',
    currentPassword: 'Current password is a required field',
    newPasswordRequired: 'New password is required field',
    matchPassword: 'New password and confirm password must match',
    password: 'Password criteria not matched',
    invalidPassword: 'Invalid Password',
    controlPanelUserToggle: 'Client status updated successfully',
    noDataFound: 'No data found',
    proceedOtp:'Please enter OTP to proceed',
    noteDetails: 'Failed to get Note Details',
    noNoteWarning: 'Note not available',
    spaceNotAllowed: 'Please enter a proper value, only space not allowed',
    surveyDeleteError: 'Assessment not available',
    tryAgain: 'Please try again',
    specialCharactersNotAllowed: 'Please enter a valid value',
    validPhoneNumber: 'Please enter a valid phone number',
    numberMaxLength: (maxLength: number) => `Maximum ${maxLength} digits allowed`,
    stepLimit: 'Steps value must be less than maximum range limit',
    errorMaxLength: (maxLength: number) => `Maximum ${maxLength} characters are allowed`,
    minLength: (maxLength: number) => `Minimum ${maxLength} characters is required`,
    uniqueDataNeeded: (valueType: string) => `Unique ${valueType} is needed`,
    commaNotAllowed: (type: string) => `${type} does not contain comma`,
    commaSeparated: 'Value needs to be comma separated numbers',
    numberAllowed: 'Only number value allowed',
    paymentNotDone: 'Payment not done',
    supporterInvitationPendingByPatient: 'Awaiting response from patient',
    supporterInvitationDeclinedByPatient: 'Patient declined your access to view patient events',
    resolveErrorsToContinue: 'Please resolve the errors to continue',
    userInactive: 'User is inactive',
    minOptionsRequired: 'Please add at least two options to continue',
    toggleBtnNotSelected: 'Please click the toggle btn once again',
    positiveValue: 'Please enter positive value',
    endDate: 'Please select end date',
    textNoEmptyString: 'Text filter should not contain an empty string',
    groupOrRecipient: 'Select group or recipients',
    userLoggedOut: 'You have been logged out. Please log in again',
    positiveValueNeeded: 'Please enter positive integer number',
    primaryTherapistOrCaseManager: 'Please select either primary therapist or case manager',
    deleteStaff: 'Please select a staff to delete',
    deletePatient: 'Please select a patient to delete',
    facilityNotFound: 'Oops facility not found'
  },
};

export default messagesData;
